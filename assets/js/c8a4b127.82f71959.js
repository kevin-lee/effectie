"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1711],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(t),h=r,m=d["".concat(c,".").concat(h)]||d[h]||p[h]||o;return t?a.createElement(m,i(i({ref:n},u),{},{components:t})):a.createElement(m,i({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=h;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>i});var a=t(7294),r=t(6010);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>g});var a=t(7462),r=t(7294),o=t(6010),i=t(2466),l=t(6550),c=t(1980),s=t(7392),u=t(12);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function p(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??d(t);return function(e){const n=(0,s.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const a=(0,l.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c._X)(o),(0,r.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=p(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:o}))),[c,s]=m({queryString:t,groupId:a}),[d,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,u.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),E=(()=>{const e=c??d;return h({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{E&&l(E)}),[E]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),s(e),f(e)}),[s,f,o]),tabValues:o}}var E=t(2389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:n,block:t,selectedValue:l,selectValue:c,tabValues:s}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),p=e=>{const n=e.currentTarget,t=u.indexOf(n),a=s[t].value;a!==l&&(d(n),c(a))},h=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},s.map((e=>{let{value:n,label:t,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>u.push(e),onKeyDown:h,onClick:p},i,{className:(0,o.Z)("tabs__item",y.tabItem,i?.className,{"tabs__item--active":l===n})}),t??n)})))}function x(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function v(e){const n=f(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",y.tabList)},r.createElement(b,(0,a.Z)({},e,n)),r.createElement(x,(0,a.Z)({},e,n)))}function g(e){const n=(0,E.Z)();return r.createElement(v,(0,a.Z)({key:String(n)},e))}},1918:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var a=t(7462),r=(t(7294),t(3905)),o=t(4866),i=t(5162);const l={sidebar_position:1,id:"can-catch",title:"CanCatch"},c=void 0,s={unversionedId:"cats-effect2/fx/error-handling/can-catch",id:"cats-effect2/fx/error-handling/can-catch",title:"CanCatch",description:"CanCatch",source:"@site/../generated-docs/docs/cats-effect2/fx/error-handling/can-catch.md",sourceDirName:"cats-effect2/fx/error-handling",slug:"/cats-effect2/fx/error-handling/can-catch",permalink:"/docs/cats-effect2/fx/error-handling/can-catch",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"can-catch",title:"CanCatch"},sidebar:"latestSidebar",previous:{title:"Error Handling",permalink:"/docs/cats-effect2/fx/error-handling/"},next:{title:"CanHandleError",permalink:"/docs/cats-effect2/fx/error-handling/can-handle-error"}},u={},d=[{value:"CanCatch",id:"cancatch",level:2},{value:"CanCatch.catchNonFatal",id:"cancatchcatchnonfatal",level:2},{value:"How to Use",id:"how-to-use",level:3},{value:"Happy Path Example",id:"happy-path-example",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example",level:3},{value:"CanCatch.catchNonFatalEither",id:"cancatchcatchnonfataleither",level:2},{value:"How to Use",id:"how-to-use-1",level:3},{value:"Happy Path Example",id:"happy-path-example-1",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-1",level:3},{value:"CanCatch.catchNonFatalEitherT",id:"cancatchcatchnonfataleithert",level:2},{value:"How to Use",id:"how-to-use-2",level:3},{value:"Happy Path Example",id:"happy-path-example-2",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-2",level:3},{value:"Catching",id:"catching",level:2},{value:"Catching.catchNonFatal",id:"catchingcatchnonfatal",level:2},{value:"How to Use",id:"how-to-use-3",level:3},{value:"Happy Path Example",id:"happy-path-example-3",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-3",level:3},{value:"Catching.catchNonFatalEither",id:"catchingcatchnonfataleither",level:2},{value:"How to Use",id:"how-to-use-4",level:3},{value:"Happy Path Example",id:"happy-path-example-4",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-4",level:3},{value:"Catching.catchNonFatalEitherT",id:"catchingcatchnonfataleithert",level:2},{value:"How to Use",id:"how-to-use-5",level:3},{value:"Happy Path Example",id:"happy-path-example-5",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-5",level:3}],p={toc:d},h="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(h,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"cancatch"},"CanCatch"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch")," lets you catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"F[A]"),"\nand turned it into ",(0,r.kt)("inlineCode",{parentName:"p"},"F[Either[Throwable, A]]"),". It takes a function from ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable"),"\nto your own error type, yet it can handle only ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ones as already mentioned."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch")," looks like this."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"trait CanCatch[F[_]] {\n  def catchNonFatal[A, B](fb: => F[B])(f: PartialFunction[Throwable, A]): F[Either[A, B]]\n\n  def catchNonFatalEither[A, AA >: A, B](fab: => F[Either[A, B]])(\n    f: PartialFunction[Throwable, AA]\n  ): F[Either[AA, B]]\n}\n")),(0,r.kt)("p",null,"In practice, you don't need to use it directly because ",(0,r.kt)("inlineCode",{parentName:"p"},"Fx")," is already ",(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch")," as well."),(0,r.kt)("h2",{id:"cancatchcatchnonfatal"},"CanCatch.catchNonFatal"),(0,r.kt)(o.Z,{groupId:"can-catch",defaultValue:"fx",values:[{label:"Fx",value:"fx"},{label:"CanCatch",value:"cancatch"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"fx",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val fa: F[A] = ...\nFx[F].catchNonFatal(fa) {\n  case SomeException(message) =>\n    SomeError(message)\n} // F[Either[SomeError, A]\n"))),(0,r.kt)(i.Z,{value:"cancatch",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val fa: F[A] = ...\nCanCatch[F].catchNonFatal(fa) {\n  case SomeException(message) =>\n    SomeError(message)\n} // F[Either[SomeError, A]\n")))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch[F].catchNonFatal[A, B]")," lets you catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"F[B]"),"\nand returns ",(0,r.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]"),"."),(0,r.kt)("h3",{id:"how-to-use"},"How to Use"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.effect._\n\nimport effectie.core._\nimport effectie.instances.ce2.fx._\n\nfinal case class MyException(cause: Throwable) extends RuntimeException\n\nval fa = CanCatch[IO].catchNonFatal(\n    IO(throw new RuntimeException(\"Something's wrong!\"))\n  ) {\n    case ex =>\n      MyException(ex)\n  }\n// fa: IO[Either[MyException, Nothing]] = Bind(\n//   source = Bind(\n//     source = Delay(\n// ...\n\nfa.unsafeRunSync()\n// res1: Either[MyException, Nothing] = Left(\n//   value = MyException(cause = java.lang.RuntimeException: Something's wrong!)\n// )\n"))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.core._\nimport effectie.instances.future.fx._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@bcab0fa[Running, parallelism = 4, size = 2, active = 0, running = 0, steals = 2, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@62031398\n\nfinal case class MyException(cause: Throwable) extends RuntimeException\n\nval fa = CanCatch[Future].catchNonFatal(\n    Future(throw new RuntimeException(\"Something's wrong!\"))\n  ) {\n    case ex =>\n      MyException(ex)\n  }\n// fa: Future[Either[MyException, Nothing]] = Future(Success(Left(repl.MdocSession$App2$MyException)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res3: Either[MyException, Nothing] = Left(\n//   value = MyException(cause = java.lang.RuntimeException: Something's wrong!)\n// )\n"))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import cats._\n\nimport effectie.core._\nimport effectie.instances.id.fx._\n\nfinal case class MyException(cause: Throwable) extends RuntimeException\n\nCanCatch[Id].catchNonFatal(\n    throw new RuntimeException(\"Something's wrong!\")\n  ) {\n    case ex =>\n      MyException(ex)\n  }\n// res5: Id[Either[MyException, Nothing]] = Left(\n//   value = MyException(cause = java.lang.RuntimeException: Something's wrong!)\n// )\n")))),(0,r.kt)("h3",{id:"happy-path-example"},"Happy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  ) {\n    case ex => MyError.nonFatalThrowable(ex)\n  }\n\nimport effectie.instances.ce2.fx._\n\nval fa = doSomething[IO](1)\n// fa: IO[Either[MyError, Int]] = Bind(\n//   source = Bind(\n//     source = Bind(\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Right(value = 202)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\nimport extras.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    ) {\n      case ex => MyError.nonFatalThrowable(ex)\n    }\n\n  def main(arg: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    import effectie.instances.future.fx._\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(202)\n// Result is 202\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  ) {\n    case ex => MyError.nonFatalThrowable(ex)\n  }\n  \nimport effectie.instances.id.fx._\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 202)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n')))),(0,r.kt)("h3",{id:"unhappy-path-example"},"Unhappy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  ) {\n    case ex => MyError.nonFatalThrowable(ex)\n  }\n  \nimport effectie.instances.ce2.fx._\n\nval fa = doSomething[IO](-101)\n// fa: IO[Either[MyError, Int]] = Bind(\n//   source = Bind(\n//     source = Bind(\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative numbe...\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\nimport extras.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    ) {\n      case ex => MyError.nonFatalThrowable(ex)\n    }\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    import effectie.instances.future.fx._\n    \n    try {\n      val fa = doSomething[Future](-101)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1])\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  ) {\n    case ex => MyError.nonFatalThrowable(ex)\n  }\n  \nimport effectie.instances.id.fx._\n\nval fa = doSomething[Id](-101)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative numbe...\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n')))),(0,r.kt)("h2",{id:"cancatchcatchnonfataleither"},"CanCatch.catchNonFatalEither"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch[F].catchNonFatalEither[A, B]")," lets you catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]"),"\nand returns ",(0,r.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]"),"."),(0,r.kt)("h3",{id:"how-to-use-1"},"How to Use"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.effect._\n\nimport effectie.core._\nimport effectie.instances.ce2.fx._\n\nfinal case class MyException(cause: Throwable) extends RuntimeException\n\nval fa = CanCatch[IO].catchNonFatalEither(\n    IO((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int])\n  ) {\n    case ex => MyException(ex)\n  }\n// fa: IO[Either[Throwable, Int]] = Bind(\n//   source = Bind(\n//     source = Delay(\n// ...\n\nfa.unsafeRunSync()\n// res19: Either[Throwable, Int] = Left(\n//   value = MyException(cause = java.lang.RuntimeException: Something's wrong!)\n// )\n"))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.core._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@ba99c72[Running, parallelism = 4, size = 3, active = 0, running = 0, steals = 2, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@71ccc14c\n\nfinal case class MyException(cause: Throwable) extends RuntimeException\n\nimport effectie.instances.future.fx._\n\nval fa = CanCatch[Future].catchNonFatalEither(\n    Future((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int])\n  ) {\n    case ex => MyException(ex)\n  }\n// fa: Future[Either[Throwable, Int]] = Future(Success(Left(repl.MdocSession$App20$MyException)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res21: Either[Throwable, Int] = Left(\n//   value = MyException(cause = java.lang.RuntimeException: Something's wrong!)\n// )\n"))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import cats._\n\nimport effectie.core._\nimport effectie.instances.id.fx._\n\nfinal case class MyException(cause: Throwable) extends RuntimeException\n\nCanCatch[Id].catchNonFatalEither(\n    (throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]\n  ){\n    case ex => MyException(ex)\n  }\n// res23: Id[Either[Throwable, Int]] = Left(\n//   value = MyException(cause = java.lang.RuntimeException: Something's wrong!)\n// )\n")))),(0,r.kt)("h3",{id:"happy-path-example-1"},"Happy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  ) {\n    case ex => MyError.nonFatalThrowable(ex)\n  }\n  \nimport effectie.instances.ce2.fx._\n\nval fa = doSomething[IO](1)\n// fa: IO[Either[MyError, Int]] = Bind(\n//   source = Bind(\n//     source = Bind(\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Right(value = 200)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\nimport extras.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n  \n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    ) {\n      case ex => MyError.nonFatalThrowable(ex)\n    }\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    import effectie.instances.future.fx._\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(200)\n// Result is 200\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  ) {\n    case ex => MyError.nonFatalThrowable(ex)\n  }\n  \nimport effectie.instances.id.fx._\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 200)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),(0,r.kt)("h3",{id:"unhappy-path-example-1"},"Unhappy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  ) {\n    case ex => MyError.nonFatalThrowable(ex)\n  }\n\nimport effectie.instances.ce2.fx._\n\nval fa = doSomething[IO](-1)\n// fa: IO[Either[MyError, Int]] = Bind(\n//   source = Bind(\n//     source = Bind(\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative numbe...\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\nimport extras.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    ) {\n      case ex => MyError.nonFatalThrowable(ex)\n    }\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    import effectie.instances.future.fx._\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  ) {\n    case ex => MyError.nonFatalThrowable(ex)\n  }\n  \nimport effectie.instances.id.fx._\n\nval fa = doSomething[Id](-1)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative numbe...\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))),(0,r.kt)("h2",{id:"cancatchcatchnonfataleithert"},"CanCatch.catchNonFatalEitherT"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch[F].catchNonFatalEitherT[A, B]")," lets you catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"EitherT[F, A, B]"),"\nand returns ",(0,r.kt)("inlineCode",{parentName:"p"},"EitherT[F, A, B]"),"."),(0,r.kt)("h3",{id:"how-to-use-2"},"How to Use"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.data.EitherT\nimport cats.effect._\n\nimport effectie.core._\nimport effectie.syntax.all._\nimport effectie.instances.ce2.fx._\n\nfinal case class MyException(cause: Throwable) extends RuntimeException\n\nval fa = CanCatch[IO].catchNonFatalEitherT(\n    EitherT(IO((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]))\n  ) {\n    case ex => MyException(ex)\n  }\n// fa: EitherT[[\u03b1$0$]IO[\u03b1$0$], Throwable, Int] = EitherT(\n//   value = Bind(\n//     source = Bind(\n// ...\n\nfa.value.unsafeRunSync()\n// res37: Either[Throwable, Int] = Left(\n//   value = MyException(cause = java.lang.RuntimeException: Something's wrong!)\n// )\n"))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats.data.EitherT\nimport effectie.core._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@68ab4530[Running, parallelism = 4, size = 3, active = 0, running = 0, steals = 2, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@68cb7ba9\n\nfinal case class MyException(cause: Throwable) extends RuntimeException\n\nimport effectie.syntax.all._\nimport effectie.instances.future.fx._\n\nval fa = CanCatch[Future].catchNonFatalEitherT(\n    EitherT(Future((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]))\n  ) {\n    case ex => MyException(ex)\n  }\n// fa: EitherT[[\u03b1$0$]Future[\u03b1$0$], Throwable, Int] = EitherT(\n//   value = Future(Success(Left(repl.MdocSession$App38$MyException)))\n// )\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa.value, Duration.Inf)\n// res39: Either[Throwable, Int] = Left(\n//   value = MyException(cause = java.lang.RuntimeException: Something's wrong!)\n// )\n"))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import cats._\nimport cats.data.EitherT\n\nimport effectie.core._\nimport effectie.syntax.all._\nimport effectie.instances.id.fx._\n\nfinal case class MyException(cause: Throwable) extends RuntimeException\n\nval fa = CanCatch[Id].catchNonFatalEitherT(\n    EitherT((throw new RuntimeException(\"Something's wrong!\")): Id[Either[Throwable, Int]])\n  ) {\n    case ex => MyException(ex)\n  }\n// fa: EitherT[[\u03b1$0$]Id[\u03b1$0$], Throwable, Int] = EitherT(\n//   value = Left(\n//     value = MyException(cause = java.lang.RuntimeException: Something's wrong!)\n// ...\n\nfa.value\n// res41: Id[Either[Throwable, Int]] = Left(\n//   value = MyException(cause = java.lang.RuntimeException: Something's wrong!)\n// )\n")))),(0,r.kt)("h3",{id:"happy-path-example-2"},"Happy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nimport extras.cats.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- pureOf(divide100By(n)).eitherT\n      c <- doSomethingBad(b).rightTF[F, MyError]\n    } yield c\n  ) {\n    case ex => MyError.nonFatalThrowable(ex)\n  }.value\n  \nimport effectie.instances.ce2.fx._\n\nval fa = doSomething[IO](1)\n// fa: IO[Either[MyError, Int]] = Bind(\n//   source = Bind(\n//     source = Bind(\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Right(value = 200)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\nimport extras.cats.syntax.all._\nimport extras.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatalEitherT(\n      for {\n        b <- pureOf(divide100By(n)).eitherT\n        c <- doSomethingBad(b).rightTF[F, MyError]\n      } yield c\n    ) {\n      case ex => MyError.nonFatalThrowable(ex)\n    }.value\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    import effectie.instances.future.fx._\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(200)\n// Result is 200\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\nimport extras.cats.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- pureOf(divide100By(n)).eitherT\n      c <- doSomethingBad(b).rightTF[F, MyError]\n    } yield c\n  ) {\n    case ex => MyError.nonFatalThrowable(ex)\n  }.value\n\nimport effectie.instances.id.fx._\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 200)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),(0,r.kt)("h3",{id:"unhappy-path-example-2"},"Unhappy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.core._\nimport effectie.syntax.all._\nimport extras.cats.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- pureOf(divide100By(n)).eitherT\n      c <- doSomethingBad(b).rightTF[F, MyError]\n    } yield c\n  ) {\n    case ex => MyError.nonFatalThrowable(ex)\n  }.value\n\nimport effectie.instances.ce2.fx._\n\nval fa = doSomething[IO](-1)\n// fa: IO[Either[MyError, Int]] = Bind(\n//   source = Bind(\n//     source = Bind(\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative numbe...\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nimport extras.cats.syntax.all._\nimport extras.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatalEitherT(\n      for {\n        b <- pureOf(divide100By(n)).eitherT\n        c <- doSomethingBad(b).rightTF[F, MyError]\n      } yield c\n    ) {\n      case ex => MyError.nonFatalThrowable(ex)\n    }.value\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    import effectie.instances.future.fx._\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nimport extras.cats.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- pureOf(divide100By(n)).eitherT\n      c <- doSomethingBad(b).rightTF[F, MyError]\n    } yield c\n  ) {\n    case ex => MyError.nonFatalThrowable(ex)\n  }.value\n  \nimport effectie.instances.id.fx._\n\nval fa = doSomething[Id](-1)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative numbe...\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))),(0,r.kt)("h2",{id:"catching"},"Catching"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Catching.catchNonFatal")," provides a convenient way to use ",(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch")," to catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"F[A]"),"\nand turned it into ",(0,r.kt)("inlineCode",{parentName:"p"},"F[Either[Throwable, A]]"),". Just like ",(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch"),", it takes a function from ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable"),"\nto your own error type, yet it can handle only ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ones as already mentioned."),(0,r.kt)("h2",{id:"catchingcatchnonfatal"},"Catching.catchNonFatal"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"catchNonFatal")," lets you catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"F[B]"),"\nand returns ",(0,r.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]"),"."),(0,r.kt)("h3",{id:"how-to-use-3"},"How to Use"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.effect._\n\nimport effectie.syntax.all._\n\nfinal case class MyException(cause: Throwable) extends RuntimeException\n\nimport effectie.instances.ce2.fx._\n\nval fa = \n  IO(throw new RuntimeException(\"Something's wrong!\"))\n    .catchNonFatal {\n      case ex => MyException(ex)\n    }\n// fa: IO[Either[MyException, Nothing]] = Bind(\n//   source = Bind(\n//     source = Delay(\n// ...\n\nfa.unsafeRunSync()\n// res55: Either[MyException, Nothing] = Left(\n//   value = MyException(cause = java.lang.RuntimeException: Something's wrong!)\n// )\n"))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.syntax.all._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@aa7122c[Running, parallelism = 4, size = 3, active = 0, running = 0, steals = 2, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@398236e2\n\nfinal case class MyException(cause: Throwable) extends RuntimeException\n\nimport effectie.instances.future.fx._\n\nval fa = \n    Future(throw new RuntimeException(\"Something's wrong!\"))\n      .catchNonFatal {\n        case ex => MyException(ex)\n      }\n// fa: Future[Either[MyException, Nothing]] = Future(Success(Left(repl.MdocSession$App56$MyException)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res57: Either[MyException, Nothing] = Left(\n//   value = MyException(cause = java.lang.RuntimeException: Something's wrong!)\n// )\n"))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"")))),(0,r.kt)("h3",{id:"happy-path-example-3"},"Happy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  (for {\n    a <- pureOf(n + 100)\n    b <- effectOf(doSomethingBad(a))\n  } yield b)\n    .catchNonFatal {\n      case ex => MyError.nonFatalThrowable(ex)\n    }\n    \nimport effectie.instances.ce2.fx._\n\nval fa = doSomething[IO](1)\n// fa: IO[Either[MyError, Int]] = Bind(\n//   source = Bind(\n//     source = Bind(\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Right(value = 202)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\nimport extras.concurrent.ExecutorServiceOps\n\nobject MyApp {\n\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    (for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b)\n      .catchNonFatal {\n        case ex => MyError.nonFatalThrowable(ex)\n      }\n\n  def main(arg: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      import effectie.instances.future.fx._\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(202)\n// Result is 202\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  (for {\n    a <- pureOf(n + 100)\n    b <- effectOf(doSomethingBad(a))\n  } yield b)\n    .catchNonFatal {\n      case ex => MyError.nonFatalThrowable(ex)\n    }\n\nimport effectie.instances.id.fx._\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 202)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n')))),(0,r.kt)("h3",{id:"unhappy-path-example-3"},"Unhappy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  (for {\n    a <- pureOf(n + 100)\n    b <- effectOf(doSomethingBad(a))\n  } yield b)\n    .catchNonFatal {\n      case ex => MyError.nonFatalThrowable(ex)\n    }\n\nimport effectie.instances.ce2.fx._\n\nval fa = doSomething[IO](-101)\n// fa: IO[Either[MyError, Int]] = Bind(\n//   source = Bind(\n//     source = Bind(\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative numbe...\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\nimport extras.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    (for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b)\n      .catchNonFatal {\n        case ex => MyError.nonFatalThrowable(ex)\n      }\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      import effectie.instances.future.fx._\n      \n      val fa = doSomething[Future](-101)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1])\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  (for {\n    a <- pureOf(n + 100)\n    b <- effectOf(doSomethingBad(a))\n  } yield b)\n    .catchNonFatal {\n      case ex => MyError.nonFatalThrowable(ex)\n    }\n\nimport effectie.instances.id.fx._\n\nval fa = doSomething[Id](-101)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative numbe...\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n')))),(0,r.kt)("h2",{id:"catchingcatchnonfataleither"},"Catching.catchNonFatalEither"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Catching.catchNonFatalEither")," provides a convenient way to use ",(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch"),"\nto catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]")," and returns ",(0,r.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]"),"."),(0,r.kt)("h3",{id:"how-to-use-4"},"How to Use"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.effect._\n\nimport effectie.syntax.all._\n\nfinal case class MyException(cause: Throwable) extends RuntimeException\n\nimport effectie.instances.ce2.fx._\n\nval fa = \n    IO((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int])\n      .catchNonFatalEither {\n        case ex => MyException(ex)\n      }\n// fa: IO[Either[Throwable, Int]] = Bind(\n//   source = Bind(\n//     source = Delay(\n// ...\n\nfa.unsafeRunSync()\n// res72: Either[Throwable, Int] = Left(\n//   value = MyException(cause = java.lang.RuntimeException: Something's wrong!)\n// )\n"))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.syntax.all._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@175b6e83[Running, parallelism = 4, size = 3, active = 0, running = 0, steals = 2, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@3f466fac\n\nfinal case class MyException(cause: Throwable) extends RuntimeException\n\nimport effectie.instances.future.fx._\n\nval fa = \n  Future((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int])\n    .catchNonFatalEither {\n      case ex => MyException(ex)\n    }\n// fa: Future[Either[Throwable, Int]] = Future(Success(Left(repl.MdocSession$App73$MyException)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res74: Either[Throwable, Int] = Left(\n//   value = MyException(cause = java.lang.RuntimeException: Something's wrong!)\n// )\n"))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"")))),(0,r.kt)("h3",{id:"happy-path-example-4"},"Happy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  (for {\n    aOrB <- pureOf(divide100By(n))\n    c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n  } yield c)\n    .catchNonFatalEither {\n      case ex => MyError.nonFatalThrowable(ex)\n    }\n    \nimport effectie.instances.ce2.fx._\n\nval fa = doSomething[IO](1)\n// fa: IO[Either[MyError, Int]] = Bind(\n//   source = Bind(\n//     source = Bind(\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Right(value = 200)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\nimport extras.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n  \n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    (for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c)\n      .catchNonFatalEither {\n        case ex => MyError.nonFatalThrowable(ex)\n      }\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      import effectie.instances.future.fx._\n      \n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(200)\n// Result is 200\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  (for {\n    aOrB <- pureOf(divide100By(n))\n    c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n  } yield c)\n    .catchNonFatalEither {\n      case ex => MyError.nonFatalThrowable(ex)\n    }\n\nimport effectie.instances.id.fx._\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 200)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),(0,r.kt)("h3",{id:"unhappy-path-example-4"},"Unhappy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  (for {\n    aOrB <- pureOf(divide100By(n))\n    c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n  } yield c)\n    .catchNonFatalEither {\n      case ex => MyError.nonFatalThrowable(ex)\n    }\n\nimport effectie.instances.ce2.fx._\n\nval fa = doSomething[IO](-1)\n// fa: IO[Either[MyError, Int]] = Bind(\n//   source = Bind(\n//     source = Bind(\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative numbe...\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\nimport extras.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    (for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c)\n      .catchNonFatalEither {\n        case ex => MyError.nonFatalThrowable(ex)\n      }\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      import effectie.instances.future.fx._\n      \n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  (for {\n    aOrB <- pureOf(divide100By(n))\n    c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n  } yield c)\n    .catchNonFatalEither {\n      case ex => MyError.nonFatalThrowable(ex)\n    }\n\nimport effectie.instances.id.fx._\n\nval fa = doSomething[Id](-1)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative numbe...\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))),(0,r.kt)("h2",{id:"catchingcatchnonfataleithert"},"Catching.catchNonFatalEitherT"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Catching.catchNonFatalEitherT")," provides a convenient way to use ",(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch"),"\nto catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"EitherT[F, A, B]")," and returns ",(0,r.kt)("inlineCode",{parentName:"p"},"EitherT[F, A, B]"),"."),(0,r.kt)("h3",{id:"how-to-use-5"},"How to Use"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.data.EitherT\nimport cats.effect._\n\nimport effectie.syntax.all._\n\nfinal case class MyException(cause: Throwable) extends RuntimeException\n\nimport effectie.instances.ce2.fx._\n\nval fa = \n  EitherT(IO((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]))\n    .catchNonFatalEitherT {\n      case ex => MyException(ex)\n    }\n// fa: EitherT[[A]IO[A], Throwable, Int] = EitherT(\n//   value = Bind(\n//     source = Bind(\n// ...\n\nfa.value.unsafeRunSync()\n// res89: Either[Throwable, Int] = Left(\n//   value = MyException(cause = java.lang.RuntimeException: Something's wrong!)\n// )\n"))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats.data.EitherT\n\nimport effectie.syntax.all._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@7d527f49[Running, parallelism = 4, size = 3, active = 0, running = 0, steals = 2, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@21a2421b\n\nfinal case class MyException(cause: Throwable) extends RuntimeException\n\nimport effectie.instances.future.fx._\n\nval fa = \n  EitherT(Future((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]))\n    .catchNonFatalEitherT {\n      case ex => MyException(ex)\n    }\n// fa: EitherT[[T]Future[T], Throwable, Int] = EitherT(\n//   value = Future(Success(Left(repl.MdocSession$App90$MyException)))\n// )\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa.value, Duration.Inf)\n// res91: Either[Throwable, Int] = Left(\n//   value = MyException(cause = java.lang.RuntimeException: Something's wrong!)\n// )\n"))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import cats._\nimport cats.data.EitherT\n\nimport effectie.syntax.all._\n\nfinal case class MyException(cause: Throwable) extends RuntimeException\n\nimport effectie.instances.id.fx._\n\nval fa =\n  EitherT((throw new RuntimeException(\"Something's wrong!\")): Id[Either[Throwable, Int]])\n    .catchNonFatalEitherT {\n      case ex => MyException(ex)\n    }\n// fa: EitherT[[A]Id[A], Throwable, Int] = EitherT(\n//   value = Left(\n//     value = MyException(cause = java.lang.RuntimeException: Something's wrong!)\n// ...\n\nfa.value\n// res93: Id[Either[Throwable, Int]] = Left(\n//   value = MyException(cause = java.lang.RuntimeException: Something's wrong!)\n// )\n")))),(0,r.kt)("h3",{id:"happy-path-example-5"},"Happy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.data.EitherT\nimport cats.effect._\n\nimport effectie.core._\nimport effectie.syntax.all._\nimport extras.cats.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  (for {\n    b <- EitherT(pureOf(divide100By(n)))\n    c <- doSomethingBad(b).rightTF[F, MyError]\n  } yield c)\n    .catchNonFatalEitherT {\n      case ex => MyError.nonFatalThrowable(ex)\n    }.value\n    \nimport effectie.instances.ce2.fx._\n\nval fa = doSomething[IO](1)\n// fa: IO[Either[MyError, Int]] = Bind(\n//   source = Bind(\n//     source = Bind(\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Right(value = 200)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\nimport extras.cats.syntax.all._\nimport extras.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    (for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- doSomethingBad(b).rightTF[F, MyError]\n    } yield c)\n      .catchNonFatalEitherT {\n        case ex => MyError.nonFatalThrowable(ex)\n      }.value\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      import effectie.instances.future.fx._\n      \n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(200)\n// Result is 200\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\nimport extras.cats.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  (for {\n    b <- EitherT(pureOf(divide100By(n)))\n    c <- doSomethingBad(b).rightTF[F, MyError]\n  } yield c)\n    .catchNonFatalEitherT {\n      case ex => MyError.nonFatalThrowable(ex)\n    }.value\n\nimport effectie.instances.id.fx._\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 200)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),(0,r.kt)("h3",{id:"unhappy-path-example-5"},"Unhappy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.core._\nimport effectie.syntax.all._\nimport extras.cats.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  (for {\n    b <- EitherT(pureOf(divide100By(n)))\n    c <- doSomethingBad(b).rightTF[F, MyError]\n  } yield c)\n    .catchNonFatalEitherT {\n      case ex => MyError.nonFatalThrowable(ex)\n    }.value\n    \nimport effectie.instances.ce2.fx._\n\nval fa = doSomething[IO](-1)\n// fa: IO[Either[MyError, Int]] = Bind(\n//   source = Bind(\n//     source = Bind(\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative numbe...\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\nimport extras.cats.syntax.all._\nimport extras.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    (for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- doSomethingBad(b).rightTF[F, MyError]\n    } yield c)\n      .catchNonFatalEitherT {\n        case ex => MyError.nonFatalThrowable(ex)\n      }.value\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      import effectie.instances.future.fx._\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.core._\nimport effectie.syntax.all._\nimport extras.cats.syntax.all._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  (for {\n    b <- EitherT(pureOf(divide100By(n)))\n    c <- doSomethingBad(b).rightTF[F, MyError]\n  } yield c)\n    .catchNonFatalEitherT {\n      case ex => MyError.nonFatalThrowable(ex)\n    }.value\n    \nimport effectie.instances.id.fx._\n\nval fa = doSomething[Id](-1)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative numbe...\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))))}m.isMDXComponent=!0}}]);