"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[352],{3905:(n,a,e)=>{e.d(a,{Zo:()=>h,kt:()=>u});var t=e(7294);function c(n,a,e){return a in n?Object.defineProperty(n,a,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[a]=e,n}function r(n,a){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(n,a).enumerable}))),e.push.apply(e,t)}return e}function o(n){for(var a=1;a<arguments.length;a++){var e=null!=arguments[a]?arguments[a]:{};a%2?r(Object(e),!0).forEach((function(a){c(n,a,e[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):r(Object(e)).forEach((function(a){Object.defineProperty(n,a,Object.getOwnPropertyDescriptor(e,a))}))}return n}function i(n,a){if(null==n)return{};var e,t,c=function(n,a){if(null==n)return{};var e,t,c={},r=Object.keys(n);for(t=0;t<r.length;t++)e=r[t],a.indexOf(e)>=0||(c[e]=n[e]);return c}(n,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(t=0;t<r.length;t++)e=r[t],a.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(c[e]=n[e])}return c}var l=t.createContext({}),s=function(n){var a=t.useContext(l),e=a;return n&&(e="function"==typeof n?n(a):o(o({},a),n)),e},h=function(n){var a=s(n.components);return t.createElement(l.Provider,{value:a},n.children)},p={inlineCode:"code",wrapper:function(n){var a=n.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(n,a){var e=n.components,c=n.mdxType,r=n.originalType,l=n.parentName,h=i(n,["components","mdxType","originalType","parentName"]),d=s(e),u=c,f=d["".concat(l,".").concat(u)]||d[u]||p[u]||r;return e?t.createElement(f,o(o({ref:a},h),{},{components:e})):t.createElement(f,o({ref:a},h))}));function u(n,a){var e=arguments,c=a&&a.mdxType;if("string"==typeof n||c){var r=e.length,o=new Array(r);o[0]=d;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=n,i.mdxType="string"==typeof n?n:c,o[1]=i;for(var s=2;s<r;s++)o[s]=e[s];return t.createElement.apply(null,o)}return t.createElement.apply(null,e)}d.displayName="MDXCreateElement"},5162:(n,a,e)=>{e.d(a,{Z:()=>o});var t=e(7294),c=e(6010);const r="tabItem_Ymn6";function o(n){let{children:a,hidden:e,className:o}=n;return t.createElement("div",{role:"tabpanel",className:(0,c.Z)(r,o),hidden:e},a)}},5488:(n,a,e)=>{e.d(a,{Z:()=>u});var t=e(7462),c=e(7294),r=e(6010),o=e(2389),i=e(7392),l=e(7094),s=e(2466);const h="tabList__CuJ",p="tabItem_LNqP";function d(n){var a,e;const{lazy:o,block:d,defaultValue:u,values:f,groupId:m,className:$}=n,b=c.Children.map(n.children,(n=>{if((0,c.isValidElement)(n)&&"value"in n.props)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),E=null!=f?f:b.map((n=>{let{props:{value:a,label:e,attributes:t}}=n;return{value:a,label:e,attributes:t}})),C=(0,i.l)(E,((n,a)=>n.value===a.value));if(C.length>0)throw new Error('Docusaurus error: Duplicate values "'+C.map((n=>n.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const g=null===u?u:null!=(a=null!=u?u:null==(e=b.find((n=>n.props.default)))?void 0:e.props.value)?a:b[0].props.value;if(null!==g&&!E.some((n=>n.value===g)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+E.map((n=>n.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:y,setTabGroupChoices:I}=(0,l.U)(),[v,w]=(0,c.useState)(g),M=[],{blockElementScrollPositionUntilNextRender:T}=(0,s.o5)();if(null!=m){const n=y[m];null!=n&&n!==v&&E.some((a=>a.value===n))&&w(n)}const F=n=>{const a=n.currentTarget,e=M.indexOf(a),t=E[e].value;t!==v&&(T(a),w(t),null!=m&&I(m,String(t)))},x=n=>{var a;let e=null;switch(n.key){case"ArrowRight":{var t;const a=M.indexOf(n.currentTarget)+1;e=null!=(t=M[a])?t:M[0];break}case"ArrowLeft":{var c;const a=M.indexOf(n.currentTarget)-1;e=null!=(c=M[a])?c:M[M.length-1];break}}null==(a=e)||a.focus()};return c.createElement("div",{className:(0,r.Z)("tabs-container",h)},c.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":d},$)},E.map((n=>{let{value:a,label:e,attributes:o}=n;return c.createElement("li",(0,t.Z)({role:"tab",tabIndex:v===a?0:-1,"aria-selected":v===a,key:a,ref:n=>M.push(n),onKeyDown:x,onFocus:F,onClick:F},o,{className:(0,r.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":v===a})}),null!=e?e:a)}))),o?(0,c.cloneElement)(b.filter((n=>n.props.value===v))[0],{className:"margin-top--md"}):c.createElement("div",{className:"margin-top--md"},b.map(((n,a)=>(0,c.cloneElement)(n,{key:a,hidden:n.props.value!==v})))))}function u(n){const a=(0,o.Z)();return c.createElement(d,(0,t.Z)({key:String(a)},n))}},9399:(n,a,e)=>{e.r(a),e.d(a,{assets:()=>h,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var t=e(7462),c=(e(7294),e(3905)),r=e(5488),o=e(5162);const i={id:"can-catch",title:"CanCatch"},l=void 0,s={unversionedId:"cats-effect/can-catch",id:"cats-effect/can-catch",title:"CanCatch",description:"CanCatch",source:"@site/../generated-docs/target/mdoc/cats-effect/can-catch.md",sourceDirName:"cats-effect",slug:"/cats-effect/can-catch",permalink:"/docs/cats-effect/can-catch",draft:!1,tags:[],version:"current",frontMatter:{id:"can-catch",title:"CanCatch"},sidebar:"someSidebar",previous:{title:"Fx",permalink:"/docs/cats-effect/fx"},next:{title:"CanHandleError",permalink:"/docs/cats-effect/can-handle-error"}},h={},p=[{value:"CanCatch",id:"cancatch",level:2},{value:"CanCatch.catchNonFatal",id:"cancatchcatchnonfatal",level:2},{value:"How to Use",id:"how-to-use",level:3},{value:"Happy Path Example",id:"happy-path-example",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example",level:3},{value:"CanCatch.catchNonFatalEither",id:"cancatchcatchnonfataleither",level:2},{value:"How to Use",id:"how-to-use-1",level:3},{value:"Happy Path Example",id:"happy-path-example-1",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-1",level:3},{value:"CanCatch.catchNonFatalEitherT",id:"cancatchcatchnonfataleithert",level:2},{value:"How to Use",id:"how-to-use-2",level:3},{value:"Happy Path Example",id:"happy-path-example-2",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-2",level:3},{value:"Catching",id:"catching",level:2},{value:"Catching.catchNonFatal",id:"catchingcatchnonfatal",level:2},{value:"How to Use",id:"how-to-use-3",level:3},{value:"Happy Path Example",id:"happy-path-example-3",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-3",level:3},{value:"Catching.catchNonFatalEither",id:"catchingcatchnonfataleither",level:2},{value:"How to Use",id:"how-to-use-4",level:3},{value:"Happy Path Example",id:"happy-path-example-4",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-4",level:3},{value:"Catching.catchNonFatalEitherT",id:"catchingcatchnonfataleithert",level:2},{value:"How to Use",id:"how-to-use-5",level:3},{value:"Happy Path Example",id:"happy-path-example-5",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-5",level:3}],d={toc:p};function u(n){let{components:a,...e}=n;return(0,c.kt)("wrapper",(0,t.Z)({},d,e,{components:a,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"cancatch"},"CanCatch"),(0,c.kt)("p",null,(0,c.kt)("inlineCode",{parentName:"p"},"CanCatch")," lets you catch ",(0,c.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,c.kt)("inlineCode",{parentName:"p"},"Throwable")," in the ",(0,c.kt)("inlineCode",{parentName:"p"},"F[A]"),"\nand turned it into ",(0,c.kt)("inlineCode",{parentName:"p"},"F[Either[Throwable, A]]"),". It takes a function from ",(0,c.kt)("inlineCode",{parentName:"p"},"Throwable"),"\nto your own error type, yet it can handle only ",(0,c.kt)("inlineCode",{parentName:"p"},"NonFatal")," ones as already mentioned."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"trait CanCatch[F[_]] {\n  def catchNonFatal[A, B](fb: => F[B])(f: Throwable => A): F[Either[A, B]]\n\n  def catchNonFatalEither[A, B](fab: => F[Either[A, B]])(f: Throwable => A): F[Either[A, B]]\n\n  def catchNonFatalEitherT[A, B](fab: => EitherT[F, A, B])(f: Throwable => A): EitherT[F, A, B]\n}\n")),(0,c.kt)("h2",{id:"cancatchcatchnonfatal"},"CanCatch.catchNonFatal"),(0,c.kt)("p",null,(0,c.kt)("inlineCode",{parentName:"p"},"CanCatch[F].catchNonFatal[A, B]")," lets you catch ",(0,c.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,c.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,c.kt)("inlineCode",{parentName:"p"},"F[B]"),"\nand returns ",(0,c.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]"),"."),(0,c.kt)("h3",{id:"how-to-use"},"How to Use"),(0,c.kt)(r.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,c.kt)(o.Z,{value:"io",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.effect._\n\nimport effectie.cats._\n\nval fa = CanCatch[IO].catchNonFatal(\n    IO(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: IO[Either[Throwable, Nothing]] = Map(\n//   source = Bind(\n//     source = Delay(thunk = <function0>),\n//     f = <function1>,\n//     trace = null\n//   ),\n//   f = effectie.CanCatch$$Lambda$9867/0x0000000102c43840@3c4992ee,\n//   trace = StackTrace(\n//     stackTrace = List(\n//       cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//       cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//       cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//       cats.effect.IO.map(IO.scala:106),\n//       effectie.cats.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n//       effectie.cats.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:26),\n//       effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//       effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//       effectie.cats.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//       repl.MdocSession$App0$.<clinit>(can-catch.md:19),\n//       repl.MdocSession$App.<init>(can-catch.md:5),\n//       repl.MdocSession$.app(can-catch.md:3),\n//       mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//       scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//       scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//       scala.Console$.withErr(Console.scala:193),\n//       mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//       scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//       scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//       scala.Console$.withOut(Console.scala:164),\n//       mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//       mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//       mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:104)\n//     )\n//   )\n// )\n\nfa.unsafeRunSync()\n// res1: Either[Throwable, Nothing] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,c.kt)(o.Z,{value:"future",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.cats._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@4f844a17[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@51c85b20\n\nval fa = CanCatch[Future].catchNonFatal(\n    Future(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: Future[Either[Throwable, Nothing]] = Future(Success(Left(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res3: Either[Throwable, Nothing] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,c.kt)(o.Z,{value:"id",mdxType:"TabItem"},(0,c.kt)("admonition",{title:"NOTE",type:"caution"},(0,c.kt)("p",{parentName:"admonition"},"Use of ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,c.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"import cats._\n\nimport effectie.cats._\n\nCanCatch[Id].catchNonFatal(\n    throw new RuntimeException(\"Something's wrong!\")\n  )(identity)\n// res5: Either[Throwable, Nothing] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,c.kt)("h3",{id:"happy-path-example"},"Happy Path Example"),(0,c.kt)(r.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,c.kt)(o.Z,{value:"io",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](1)\n// fa: IO[Either[MyError, Int]] = Map(\n//   source = Bind(\n//     source = Bind(\n//       source = Pure(a = 101),\n//       f = <function1>,\n//       trace = StackTrace(\n//         stackTrace = List(\n//           cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//           cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//           cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//           cats.effect.IO.flatMap(IO.scala:133),\n//           cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:886),\n//           cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:863),\n//           cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//           cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//           cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//           repl.MdocSession$App6$$anonfun$doSomething$1.apply(can-catch.md:117),\n//           effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//           effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//           effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//           effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//           effectie.cats.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//           repl.MdocSession$App6$.doSomething(can-catch.md:120),\n//           repl.MdocSession$App6$.<clinit>(can-catch.md:123),\n//           repl.MdocSession$App4$.<clinit>(can-catch.md:74),\n//           repl.MdocSession$App2$.<clinit>(can-catch.md:57),\n//           repl.MdocSession$App0$.<clinit>(can-catch.md:25),\n//           repl.MdocSession$App.<init>(can-catch.md:5),\n//           repl.MdocSession$.app(can-catch.md:3),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withErr(Console.scala:193),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withOut(Console.scala:164),\n//           mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//           mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//           mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:104)\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Right(value = 202)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n'))),(0,c.kt)(o.Z,{value:"future",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(arg: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(202)\n// Result is 202\n'))),(0,c.kt)(o.Z,{value:"id",mdxType:"TabItem"},(0,c.kt)("admonition",{title:"NOTE",type:"caution"},(0,c.kt)("p",{parentName:"admonition"},"Use of ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,c.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 202)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n')))),(0,c.kt)("h3",{id:"unhappy-path-example"},"Unhappy Path Example"),(0,c.kt)(r.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,c.kt)(o.Z,{value:"io",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](-101)\n// fa: IO[Either[MyError, Int]] = Map(\n//   source = Bind(\n//     source = Bind(\n//       source = Pure(a = -1),\n//       f = <function1>,\n//       trace = StackTrace(\n//         stackTrace = List(\n//           cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//           cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//           cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//           cats.effect.IO.flatMap(IO.scala:133),\n//           cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:886),\n//           cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:863),\n//           cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//           cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//           cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//           repl.MdocSession$App12$$anonfun$doSomething$7.apply(can-catch.md:317),\n//           effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//           effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//           effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//           effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//           effectie.cats.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//           repl.MdocSession$App12$.doSomething(can-catch.md:320),\n//           repl.MdocSession$App12$.<clinit>(can-catch.md:323),\n//           repl.MdocSession$App10$.<clinit>(can-catch.md:274),\n//           repl.MdocSession$App8$.<clinit>(can-catch.md:217),\n//           repl.MdocSession$App6$.<clinit>(can-catch.md:137),\n//           repl.MdocSession$App4$.<clinit>(can-catch.md:74),\n//           repl.MdocSession$App2$.<clinit>(can-catch.md:57),\n//           repl.MdocSession$App0$.<clinit>(can-catch.md:25),\n//           repl.MdocSession$App.<init>(can-catch.md:5),\n//           repl.MdocSession$.app(can-catch.md:3),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withErr(Console.scala:193),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withOut(Console.scala:164),\n//           mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//           mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(Markd...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n'))),(0,c.kt)(o.Z,{value:"future",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](-101)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1])\n'))),(0,c.kt)(o.Z,{value:"id",mdxType:"TabItem"},(0,c.kt)("admonition",{title:"NOTE",type:"caution"},(0,c.kt)("p",{parentName:"admonition"},"Use of ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,c.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-101)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n')))),(0,c.kt)("h2",{id:"cancatchcatchnonfataleither"},"CanCatch.catchNonFatalEither"),(0,c.kt)("p",null,(0,c.kt)("inlineCode",{parentName:"p"},"CanCatch[F].catchNonFatalEither[A, B]")," lets you catch ",(0,c.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,c.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,c.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]"),"\nand returns ",(0,c.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]"),"."),(0,c.kt)("h3",{id:"how-to-use-1"},"How to Use"),(0,c.kt)(r.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,c.kt)(o.Z,{value:"io",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.effect._\n\nimport effectie.cats._\n\nval fa = CanCatch[IO].catchNonFatalEither(\n    IO((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int])\n  )(identity)\n// fa: IO[Either[Throwable, Int]] = Map(\n//   source = Map(\n//     source = Bind(\n//       source = Delay(thunk = <function0>),\n//       f = <function1>,\n//       trace = null\n//     ),\n//     f = effectie.CanCatch$$Lambda$9867/0x0000000102c43840@2cec8a1d,\n//     trace = StackTrace(\n//       stackTrace = List(\n//         cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//         cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//         cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//         cats.effect.IO.map(IO.scala:106),\n//         effectie.cats.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n//         effectie.cats.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:26),\n//         effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//         effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//         effectie.cats.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//         repl.MdocSession$App0$.<clinit>(can-catch.md:19),\n//         repl.MdocSession$App.<init>(can-catch.md:5),\n//         repl.MdocSession$.app(can-catch.md:3),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withErr(Console.scala:193),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withOut(Console.scala:164),\n//         mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//         mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//         mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:104)\n//       )\n//     )\n//   ),\n//   f = effectie.CanCatch$$Lambda$9886/0x0000000102c4d840@14e09a8,\n//   trace = StackTrace(\n//     stackTrace = List(\n//       cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//       cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//       cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//       cats.effect.IO.map(IO.scala:106),\n//       effectie.cats.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n// ...\n\nfa.unsafeRunSync()\n// res19: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,c.kt)(o.Z,{value:"future",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.cats._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@2da15273[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@2a4493ac\n\nval fa = CanCatch[Future].catchNonFatalEither(\n    Future((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int])\n  )(identity)\n// fa: Future[Either[Throwable, Int]] = Future(Success(Left(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res21: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,c.kt)(o.Z,{value:"id",mdxType:"TabItem"},(0,c.kt)("admonition",{title:"NOTE",type:"caution"},(0,c.kt)("p",{parentName:"admonition"},"Use of ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,c.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"import cats._\n\nimport effectie.cats._\n\nCanCatch[Id].catchNonFatalEither(\n    (throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]\n  )(identity)\n// res23: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,c.kt)("h3",{id:"happy-path-example-1"},"Happy Path Example"),(0,c.kt)(r.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,c.kt)(o.Z,{value:"io",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](1)\n// fa: IO[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = Bind(\n//       source = Bind(\n//         source = Pure(a = Right(value = 100)),\n//         f = <function1>,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//             cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//             cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//             cats.effect.IO.flatMap(IO.scala:133),\n//             cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:886),\n//             cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:863),\n//             cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//             cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//             cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//             repl.MdocSession$App24$$anonfun$doSomething$13.apply(can-catch.md:597),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             repl.MdocSession$App24$.doSomething(can-catch.md:600),\n//             repl.MdocSession$App24$.<clinit>(can-catch.md:603),\n//             repl.MdocSession$App22$.<clinit>(can-catch.md:543),\n//             repl.MdocSession$App20$.<clinit>(can-catch.md:526),\n//             repl.MdocSession$App18$.<clinit>(can-catch.md:494),\n//             repl.MdocSession$App16$.<clinit>(can-catch.md:474),\n//             repl.MdocSession$App14$.<clinit>(can-catch.md:417),\n//             repl.MdocSession$App12$.<clinit>(can-catch.md:337),\n//             repl.MdocSession$App10$.<clinit>(can-catch.md:274),\n//             repl.MdocSession$App8$.<clinit>(can-catch.md:217),\n//             repl.MdocSession$App6$.<clinit>(can-catch.md:137),\n//             repl.MdocSession$App4$.<clinit>(can-catch.md:74),\n//             repl.MdocSession$App2$.<clinit>(can-catch.md:57),\n//             repl.MdocSession$App0$.<clinit>(can-catch.md:25),\n//             repl.MdocSession$App.<init>(can-catch.md:5),\n//             repl.MdocSession$.app(can-catch.md:3),\n//             mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Right(value = 200)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),(0,c.kt)(o.Z,{value:"future",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n  \n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(200)\n// Result is 200\n'))),(0,c.kt)(o.Z,{value:"id",mdxType:"TabItem"},(0,c.kt)("admonition",{title:"NOTE",type:"caution"},(0,c.kt)("p",{parentName:"admonition"},"Use of ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,c.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 200)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),(0,c.kt)("h3",{id:"unhappy-path-example-1"},"Unhappy Path Example"),(0,c.kt)(r.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,c.kt)(o.Z,{value:"io",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](-1)\n// fa: IO[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = Bind(\n//       source = Bind(\n//         source = Pure(a = Right(value = -100)),\n//         f = <function1>,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//             cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//             cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//             cats.effect.IO.flatMap(IO.scala:133),\n//             cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:886),\n//             cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:863),\n//             cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//             cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//             cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//             repl.MdocSession$App30$$anonfun$doSomething$19.apply(can-catch.md:829),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             repl.MdocSession$App30$.doSomething(can-catch.md:832),\n//             repl.MdocSession$App30$.<clinit>(can-catch.md:835),\n//             repl.MdocSession$App28$.<clinit>(can-catch.md:775),\n//             repl.MdocSession$App26$.<clinit>(can-catch.md:707),\n//             repl.MdocSession$App24$.<clinit>(can-catch.md:617),\n//             repl.MdocSession$App22$.<clinit>(can-catch.md:543),\n//             repl.MdocSession$App20$.<clinit>(can-catch.md:526),\n//             repl.MdocSession$App18$.<clinit>(can-catch.md:494),\n//             repl.MdocSession$App16$.<clinit>(can-catch.md:474),\n//             repl.MdocSession$App14$.<clinit>(can-catch.md:417),\n//             repl.MdocSession$App12$.<clinit>(can-catch.md:337),\n//             repl.MdocSession$App10$.<clinit>(can-catch.md:274),\n//             repl.MdocSession$App8$.<clinit>(can-catch.md:217),\n//             repl.MdocSession$App6$.<clinit>(can-catch.md:137),\n//             repl.MdocSession$App4$.<clinit>(can-catch.md:74),\n//             repl.MdocSession$App2$.<clinit>(can-catch.md:57),\n//             repl.MdocSession$App0$.<clinit>(can-catch.md:25),\n//             repl.MdocSession$App.<init>(can-catch.md:5),\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,c.kt)(o.Z,{value:"future",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,c.kt)(o.Z,{value:"id",mdxType:"TabItem"},(0,c.kt)("admonition",{title:"NOTE",type:"caution"},(0,c.kt)("p",{parentName:"admonition"},"Use of ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,c.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-1)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))),(0,c.kt)("h2",{id:"cancatchcatchnonfataleithert"},"CanCatch.catchNonFatalEitherT"),(0,c.kt)("p",null,(0,c.kt)("inlineCode",{parentName:"p"},"CanCatch[F].catchNonFatalEitherT[A, B]")," lets you catch ",(0,c.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,c.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,c.kt)("inlineCode",{parentName:"p"},"EitherT[F, A, B]"),"\nand returns ",(0,c.kt)("inlineCode",{parentName:"p"},"EitherT[F, A, B]"),"."),(0,c.kt)("h3",{id:"how-to-use-2"},"How to Use"),(0,c.kt)(r.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,c.kt)(o.Z,{value:"io",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.data.EitherT\nimport cats.effect._\n\nimport effectie.cats._\n\nval fa = CanCatch[IO].catchNonFatalEitherT(\n    EitherT(IO((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]))\n  )(identity)\n// fa: EitherT[IO, Throwable, Int] = EitherT(\n//   value = Map(\n//     source = Map(\n//       source = Bind(\n//         source = Delay(thunk = <function0>),\n//         f = <function1>,\n//         trace = null\n//       ),\n//       f = effectie.CanCatch$$Lambda$9867/0x0000000102c43840@62b0489b,\n//       trace = StackTrace(\n//         stackTrace = List(\n//           cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//           cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//           cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//           cats.effect.IO.map(IO.scala:106),\n//           effectie.cats.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n//           effectie.cats.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:26),\n//           effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//           effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//           effectie.cats.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//           repl.MdocSession$App0$.<clinit>(can-catch.md:19),\n//           repl.MdocSession$App.<init>(can-catch.md:5),\n//           repl.MdocSession$.app(can-catch.md:3),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withErr(Console.scala:193),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withOut(Console.scala:164),\n//           mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//           mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//           mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:104)\n//         )\n//       )\n//     ),\n//     f = effectie.CanCatch$$Lambda$9886/0x0000000102c4d840@13c20e2c,\n//     trace = StackTrace(\n//       stackTrace = List(\n//         cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//         cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n// ...\n\nfa.value.unsafeRunSync()\n// res37: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,c.kt)(o.Z,{value:"future",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats.data.EitherT\nimport effectie.cats._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@3457f4ed[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@3a80c838\n\nval fa = CanCatch[Future].catchNonFatalEitherT(\n    EitherT(Future((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]))\n  )(identity)\n// fa: EitherT[Future, Throwable, Int] = EitherT(\n//   value = Future(Success(Left(java.lang.RuntimeException: Something's wrong!)))\n// )\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa.value, Duration.Inf)\n// res39: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,c.kt)(o.Z,{value:"id",mdxType:"TabItem"},(0,c.kt)("admonition",{title:"NOTE",type:"caution"},(0,c.kt)("p",{parentName:"admonition"},"Use of ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,c.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"import cats._\nimport cats.data.EitherT\n\nimport effectie.cats._\n\nval fa = CanCatch[Id].catchNonFatalEitherT(\n    EitherT((throw new RuntimeException(\"Something's wrong!\")): Id[Either[Throwable, Int]])\n  )(identity)\n// fa: EitherT[Id, Throwable, Int] = EitherT(\n//   value = Left(value = java.lang.RuntimeException: Something's wrong!)\n// )\n\nfa.value\n// res41: Id[Either[Throwable, Int]] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,c.kt)("h3",{id:"happy-path-example-2"},"Happy Path Example"),(0,c.kt)(r.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,c.kt)(o.Z,{value:"io",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.data.EitherT\nimport cats.effect._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[IO](1)\n// fa: IO[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = Bind(\n//       source = Bind(\n//         source = Pure(a = Right(value = 100)),\n//         f = cats.data.EitherT$$Lambda$9888/0x0000000102ca8040@5a94bb63,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//             cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//             cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//             cats.effect.IO.flatMap(IO.scala:133),\n//             cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:886),\n//             cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:863),\n//             cats.data.EitherT.flatMap(EitherT.scala:403),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1148),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1148),\n//             effectie.CanCatch.$anonfun$catchNonFatalEitherT$1(CanCatch.scala:28),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEitherT(CanCatch.scala:28),\n//             effectie.CanCatch.catchNonFatalEitherT$(CanCatch.scala:27),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalEitherT(CanCatch.scala:26),\n//             repl.MdocSession$App42$.doSomething(can-catch.md:1151),\n//             repl.MdocSession$App42$.<clinit>(can-catch.md:1154),\n//             repl.MdocSession$App40$.<clinit>(can-catch.md:1088),\n//             repl.MdocSession$App38$.<clinit>(can-catch.md:1065),\n//             repl.MdocSession$App36$.<clinit>(can-catch.md:1030),\n//             repl.MdocSession$App34$.<clinit>(can-catch.md:1007),\n//             repl.MdocSession$App32$.<clinit>(can-catch.md:939),\n//             repl.MdocSession$App30$.<clinit>(can-catch.md:849),\n//             repl.MdocSession$App28$.<clinit>(can-catch.md:775),\n//             repl.MdocSession$App26$.<clinit>(can-catch.md:707),\n//             repl.MdocSession$App24$.<clinit>(can-catch.md:617),\n//             repl.MdocSession$App22$.<clinit>(can-catch.md:543),\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Right(value = 200)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),(0,c.kt)(o.Z,{value:"future",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).value\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(200)\n// Result is 200\n'))),(0,c.kt)(o.Z,{value:"id",mdxType:"TabItem"},(0,c.kt)("admonition",{title:"NOTE",type:"caution"},(0,c.kt)("p",{parentName:"admonition"},"Use of ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,c.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 200)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),(0,c.kt)("h3",{id:"unhappy-path-example-2"},"Unhappy Path Example"),(0,c.kt)(r.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,c.kt)(o.Z,{value:"io",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.cats._\nimport effectie.cats.EitherTSupport._\nimport effectie.cats.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[IO](-1)\n// fa: IO[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = Bind(\n//       source = Bind(\n//         source = Pure(a = Right(value = -100)),\n//         f = cats.data.EitherT$$Lambda$9888/0x0000000102ca8040@59246d73,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//             cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//             cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//             cats.effect.IO.flatMap(IO.scala:133),\n//             cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:886),\n//             cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:863),\n//             cats.data.EitherT.flatMap(EitherT.scala:403),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1148),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1148),\n//             effectie.CanCatch.$anonfun$catchNonFatalEitherT$1(CanCatch.scala:28),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEitherT(CanCatch.scala:28),\n//             effectie.CanCatch.catchNonFatalEitherT$(CanCatch.scala:27),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalEitherT(CanCatch.scala:26),\n//             repl.MdocSession$App42$.doSomething(can-catch.md:1151),\n//             repl.MdocSession$App42$.<clinit>(can-catch.md:1154),\n//             repl.MdocSession$App40$.<clinit>(can-catch.md:1088),\n//             repl.MdocSession$App38$.<clinit>(can-catch.md:1065),\n//             repl.MdocSession$App36$.<clinit>(can-catch.md:1030),\n//             repl.MdocSession$App34$.<clinit>(can-catch.md:1007),\n//             repl.MdocSession$App32$.<clinit>(can-catch.md:939),\n//             repl.MdocSession$App30$.<clinit>(can-catch.md:849),\n//             repl.MdocSession$App28$.<clinit>(can-catch.md:775),\n//             repl.MdocSession$App26$.<clinit>(can-catch.md:707),\n//             repl.MdocSession$App24$.<clinit>(can-catch.md:617),\n//             repl.MdocSession$App22$.<clinit>(can-catch.md:543),\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,c.kt)(o.Z,{value:"future",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).value\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,c.kt)(o.Z,{value:"id",mdxType:"TabItem"},(0,c.kt)("admonition",{title:"NOTE",type:"caution"},(0,c.kt)("p",{parentName:"admonition"},"Use of ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,c.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[Id](-1)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))),(0,c.kt)("h2",{id:"catching"},"Catching"),(0,c.kt)("p",null,(0,c.kt)("inlineCode",{parentName:"p"},"Catching.catchNonFatal")," provides a convenient way to use ",(0,c.kt)("inlineCode",{parentName:"p"},"CanCatch")," to catch ",(0,c.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,c.kt)("inlineCode",{parentName:"p"},"Throwable")," in the ",(0,c.kt)("inlineCode",{parentName:"p"},"F[A]"),"\nand turned it into ",(0,c.kt)("inlineCode",{parentName:"p"},"F[Either[Throwable, A]]"),". Just like ",(0,c.kt)("inlineCode",{parentName:"p"},"CanCatch"),", it takes a function from ",(0,c.kt)("inlineCode",{parentName:"p"},"Throwable"),"\nto your own error type, yet it can handle only ",(0,c.kt)("inlineCode",{parentName:"p"},"NonFatal")," ones as already mentioned."),(0,c.kt)("h2",{id:"catchingcatchnonfatal"},"Catching.catchNonFatal"),(0,c.kt)("p",null,(0,c.kt)("inlineCode",{parentName:"p"},"catchNonFatal")," lets you catch ",(0,c.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,c.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,c.kt)("inlineCode",{parentName:"p"},"F[B]"),"\nand returns ",(0,c.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]"),"."),(0,c.kt)("h3",{id:"how-to-use-3"},"How to Use"),(0,c.kt)(r.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,c.kt)(o.Z,{value:"io",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.effect._\n\nimport effectie.cats.Catching._\n\nval fa = catchNonFatal(\n    IO(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: IO[Either[Throwable, Nothing]] = Map(\n//   source = Bind(\n//     source = Delay(thunk = <function0>),\n//     f = <function1>,\n//     trace = null\n//   ),\n//   f = effectie.CanCatch$$Lambda$9867/0x0000000102c43840@52df0a26,\n//   trace = StackTrace(\n//     stackTrace = List(\n//       cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//       cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//       cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//       cats.effect.IO.map(IO.scala:106),\n//       effectie.cats.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n//       effectie.cats.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:26),\n//       effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//       effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//       effectie.cats.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//       repl.MdocSession$App0$.<clinit>(can-catch.md:19),\n//       repl.MdocSession$App.<init>(can-catch.md:5),\n//       repl.MdocSession$.app(can-catch.md:3),\n//       mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//       scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//       scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//       scala.Console$.withErr(Console.scala:193),\n//       mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//       scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//       scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//       scala.Console$.withOut(Console.scala:164),\n//       mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//       mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//       mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:104)\n//     )\n//   )\n// )\n\nfa.unsafeRunSync()\n// res55: Either[Throwable, Nothing] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,c.kt)(o.Z,{value:"future",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.cats.Catching._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@6ea2c94d[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@11123859\n\nval fa = catchNonFatal(\n    Future(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: Future[Either[Throwable, Nothing]] = Future(Success(Left(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res57: Either[Throwable, Nothing] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,c.kt)(o.Z,{value:"id",mdxType:"TabItem"},(0,c.kt)("admonition",{title:"NOTE",type:"caution"},(0,c.kt)("p",{parentName:"admonition"},"Use of ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,c.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"import cats._\n\nimport effectie.cats.Catching._\n\ncatchNonFatal[Id](\n    throw new RuntimeException(\"Something's wrong!\")\n  )(identity)\n// res59: Id[Either[Throwable, Nothing]] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,c.kt)("h3",{id:"happy-path-example-3"},"Happy Path Example"),(0,c.kt)(r.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,c.kt)(o.Z,{value:"io",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](1)\n// fa: IO[Either[MyError, Int]] = Map(\n//   source = Bind(\n//     source = Bind(\n//       source = Pure(a = 101),\n//       f = <function1>,\n//       trace = StackTrace(\n//         stackTrace = List(\n//           cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//           cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//           cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//           cats.effect.IO.flatMap(IO.scala:133),\n//           cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:886),\n//           cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:863),\n//           cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//           cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//           cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//           repl.MdocSession$App60$$anonfun$doSomething$37.apply(can-catch.md:1703),\n//           effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//           effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//           effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//           effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//           effectie.cats.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//           effectie.cats.Catching$CurriedCanCatch2$.apply$extension(Catching.scala:45),\n//           repl.MdocSession$App60$.doSomething(can-catch.md:1706),\n//           repl.MdocSession$App60$.<clinit>(can-catch.md:1709),\n//           repl.MdocSession$App58$.<clinit>(can-catch.md:1657),\n//           repl.MdocSession$App56$.<clinit>(can-catch.md:1640),\n//           repl.MdocSession$App54$.<clinit>(can-catch.md:1608),\n//           repl.MdocSession$App52$.<clinit>(can-catch.md:1588),\n//           repl.MdocSession$App50$.<clinit>(can-catch.md:1514),\n//           repl.MdocSession$App48$.<clinit>(can-catch.md:1418),\n//           repl.MdocSession$App46$.<clinit>(can-catch.md:1338),\n//           repl.MdocSession$App44$.<clinit>(can-catch.md:1264),\n//           repl.MdocSession$App42$.<clinit>(can-catch.md:1168),\n//           repl.MdocSession$App40$.<clinit>(can-catch.md:1088),\n//           repl.MdocSession$App38$.<clinit>(can-catch.md:1065),\n//           repl.MdocSession$App36$.<clinit>(can-catch.md:1030),\n//           repl.MdocSession$App34$.<clinit>(can-catch.md:1007),\n//           repl.MdocSession$App32$.<clinit>(can-catch.md:939),\n//           repl.MdocSession$App30$.<clinit>(can-catch.md:849),\n//           repl.MdocSession$App28$.<clinit>(can-catch.md:775),\n//           repl.MdocSession$App26$.<clinit>(can-catch.md:707),\n//           repl.MdocSession$App24$.<clinit>(can-catch.md:617),\n//           repl.MdocSession$App22$.<clinit>(can-catch.md:543),\n//           repl.MdocSession$App20$.<clinit>(can-catch.md:526),\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Right(value = 202)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n'))),(0,c.kt)(o.Z,{value:"future",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(arg: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(202)\n// Result is 202\n'))),(0,c.kt)(o.Z,{value:"id",mdxType:"TabItem"},(0,c.kt)("admonition",{title:"NOTE",type:"caution"},(0,c.kt)("p",{parentName:"admonition"},"Use of ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,c.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 202)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n')))),(0,c.kt)("h3",{id:"unhappy-path-example-3"},"Unhappy Path Example"),(0,c.kt)(r.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,c.kt)(o.Z,{value:"io",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](-101)\n// fa: IO[Either[MyError, Int]] = Map(\n//   source = Bind(\n//     source = Bind(\n//       source = Pure(a = -1),\n//       f = <function1>,\n//       trace = StackTrace(\n//         stackTrace = List(\n//           cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//           cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//           cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//           cats.effect.IO.flatMap(IO.scala:133),\n//           cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:886),\n//           cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:863),\n//           cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//           cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//           cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//           repl.MdocSession$App66$$anonfun$doSomething$43.apply(can-catch.md:1913),\n//           effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//           effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//           effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//           effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//           effectie.cats.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//           effectie.cats.Catching$CurriedCanCatch2$.apply$extension(Catching.scala:45),\n//           repl.MdocSession$App66$.doSomething(can-catch.md:1916),\n//           repl.MdocSession$App66$.<clinit>(can-catch.md:1919),\n//           repl.MdocSession$App64$.<clinit>(can-catch.md:1867),\n//           repl.MdocSession$App62$.<clinit>(can-catch.md:1807),\n//           repl.MdocSession$App60$.<clinit>(can-catch.md:1723),\n//           repl.MdocSession$App58$.<clinit>(can-catch.md:1657),\n//           repl.MdocSession$App56$.<clinit>(can-catch.md:1640),\n//           repl.MdocSession$App54$.<clinit>(can-catch.md:1608),\n//           repl.MdocSession$App52$.<clinit>(can-catch.md:1588),\n//           repl.MdocSession$App50$.<clinit>(can-catch.md:1514),\n//           repl.MdocSession$App48$.<clinit>(can-catch.md:1418),\n//           repl.MdocSession$App46$.<clinit>(can-catch.md:1338),\n//           repl.MdocSession$App44$.<clinit>(can-catch.md:1264),\n//           repl.MdocSession$App42$.<clinit>(can-catch.md:1168),\n//           repl.MdocSession$App40$.<clinit>(can-catch.md:1088),\n//           repl.MdocSession$App38$.<clinit>(can-catch.md:1065),\n//           repl.MdocSession$App36$.<clinit>(can-catch.md:1030),\n//           repl.MdocSession$App34$.<clinit>(can-catch.md:1007),\n//           repl.MdocSession$App32$.<clinit>(can-catch.md:939),\n//           repl.MdocSession$App30$.<clinit>(can-catch.md:849),\n//           repl.MdocSession$App28$.<clinit>(can-catch.md:775),\n//           repl.MdocSession$App26$.<clinit>(can-catch.md:707),\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n'))),(0,c.kt)(o.Z,{value:"future",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](-101)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1])\n'))),(0,c.kt)(o.Z,{value:"id",mdxType:"TabItem"},(0,c.kt)("admonition",{title:"NOTE",type:"caution"},(0,c.kt)("p",{parentName:"admonition"},"Use of ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,c.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-101)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n')))),(0,c.kt)("h2",{id:"catchingcatchnonfataleither"},"Catching.catchNonFatalEither"),(0,c.kt)("p",null,(0,c.kt)("inlineCode",{parentName:"p"},"Catching.catchNonFatalEither")," provides a convenient way to use ",(0,c.kt)("inlineCode",{parentName:"p"},"CanCatch"),"\nto catch ",(0,c.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,c.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,c.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]")," and returns ",(0,c.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]"),"."),(0,c.kt)("h3",{id:"how-to-use-4"},"How to Use"),(0,c.kt)(r.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,c.kt)(o.Z,{value:"io",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.effect._\n\nimport effectie.cats.Catching._\n\nval fa = catchNonFatalEither(\n    IO((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int])\n  )(identity)\n// fa: IO[Either[Throwable, Int]] = Map(\n//   source = Map(\n//     source = Bind(\n//       source = Delay(thunk = <function0>),\n//       f = <function1>,\n//       trace = null\n//     ),\n//     f = effectie.CanCatch$$Lambda$9867/0x0000000102c43840@6b2780fd,\n//     trace = StackTrace(\n//       stackTrace = List(\n//         cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//         cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//         cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//         cats.effect.IO.map(IO.scala:106),\n//         effectie.cats.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n//         effectie.cats.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:26),\n//         effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//         effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//         effectie.cats.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//         repl.MdocSession$App0$.<clinit>(can-catch.md:19),\n//         repl.MdocSession$App.<init>(can-catch.md:5),\n//         repl.MdocSession$.app(can-catch.md:3),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withErr(Console.scala:193),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withOut(Console.scala:164),\n//         mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//         mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//         mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:104)\n//       )\n//     )\n//   ),\n//   f = effectie.CanCatch$$Lambda$9886/0x0000000102c4d840@41033985,\n//   trace = StackTrace(\n//     stackTrace = List(\n//       cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//       cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//       cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//       cats.effect.IO.map(IO.scala:106),\n//       effectie.cats.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n// ...\n\nfa.unsafeRunSync()\n// res73: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,c.kt)(o.Z,{value:"future",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.cats.Catching._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@6e34107f[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@3623d32d\n\nval fa = catchNonFatalEither(\n    Future((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int])\n  )(identity)\n// fa: Future[Either[Throwable, Int]] = Future(Success(Left(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res75: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,c.kt)(o.Z,{value:"id",mdxType:"TabItem"},(0,c.kt)("admonition",{title:"NOTE",type:"caution"},(0,c.kt)("p",{parentName:"admonition"},"Use of ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,c.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"import cats._\n\nimport effectie.cats.Catching._\n\ncatchNonFatalEither[Id](\n    (throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]\n  )(identity)\n// res77: Id[Either[Throwable, Int]] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,c.kt)("h3",{id:"happy-path-example-4"},"Happy Path Example"),(0,c.kt)(r.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,c.kt)(o.Z,{value:"io",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](1)\n// fa: IO[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = Bind(\n//       source = Bind(\n//         source = Pure(a = Right(value = 100)),\n//         f = <function1>,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//             cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//             cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//             cats.effect.IO.flatMap(IO.scala:133),\n//             cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:886),\n//             cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:863),\n//             cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//             cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//             cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//             repl.MdocSession$App78$$anonfun$doSomething$49.apply(can-catch.md:2202),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             effectie.cats.Catching$CurriedCanCatchEither2$.apply$extension(Catching.scala:74),\n//             repl.MdocSession$App78$.doSomething(can-catch.md:2205),\n//             repl.MdocSession$App78$.<clinit>(can-catch.md:2208),\n//             repl.MdocSession$App76$.<clinit>(can-catch.md:2145),\n//             repl.MdocSession$App74$.<clinit>(can-catch.md:2128),\n//             repl.MdocSession$App72$.<clinit>(can-catch.md:2096),\n//             repl.MdocSession$App70$.<clinit>(can-catch.md:2076),\n//             repl.MdocSession$App68$.<clinit>(can-catch.md:2016),\n//             repl.MdocSession$App66$.<clinit>(can-catch.md:1933),\n//             repl.MdocSession$App64$.<clinit>(can-catch.md:1867),\n//             repl.MdocSession$App62$.<clinit>(can-catch.md:1807),\n//             repl.MdocSession$App60$.<clinit>(can-catch.md:1723),\n//             repl.MdocSession$App58$.<clinit>(can-catch.md:1657),\n//             repl.MdocSession$App56$.<clinit>(can-catch.md:1640),\n//             repl.MdocSession$App54$.<clinit>(can-catch.md:1608),\n//             repl.MdocSession$App52$.<clinit>(can-catch.md:1588),\n//             repl.MdocSession$App50$.<clinit>(can-catch.md:1514),\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Right(value = 200)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),(0,c.kt)(o.Z,{value:"future",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n  \n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(200)\n// Result is 200\n'))),(0,c.kt)(o.Z,{value:"id",mdxType:"TabItem"},(0,c.kt)("admonition",{title:"NOTE",type:"caution"},(0,c.kt)("p",{parentName:"admonition"},"Use of ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,c.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 200)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),(0,c.kt)("h3",{id:"unhappy-path-example-4"},"Unhappy Path Example"),(0,c.kt)(r.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,c.kt)(o.Z,{value:"io",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](-1)\n// fa: IO[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = Bind(\n//       source = Bind(\n//         source = Pure(a = Right(value = -100)),\n//         f = <function1>,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//             cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//             cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//             cats.effect.IO.flatMap(IO.scala:133),\n//             cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:886),\n//             cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:863),\n//             cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//             cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//             cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//             repl.MdocSession$App84$$anonfun$doSomething$55.apply(can-catch.md:2443),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             effectie.cats.Catching$CurriedCanCatchEither2$.apply$extension(Catching.scala:74),\n//             repl.MdocSession$App84$.doSomething(can-catch.md:2446),\n//             repl.MdocSession$App84$.<clinit>(can-catch.md:2449),\n//             repl.MdocSession$App82$.<clinit>(can-catch.md:2386),\n//             repl.MdocSession$App80$.<clinit>(can-catch.md:2315),\n//             repl.MdocSession$App78$.<clinit>(can-catch.md:2222),\n//             repl.MdocSession$App76$.<clinit>(can-catch.md:2145),\n//             repl.MdocSession$App74$.<clinit>(can-catch.md:2128),\n//             repl.MdocSession$App72$.<clinit>(can-catch.md:2096),\n//             repl.MdocSession$App70$.<clinit>(can-catch.md:2076),\n//             repl.MdocSession$App68$.<clinit>(can-catch.md:2016),\n//             repl.MdocSession$App66$.<clinit>(can-catch.md:1933),\n//             repl.MdocSession$App64$.<clinit>(can-catch.md:1867),\n//             repl.MdocSession$App62$.<clinit>(can-catch.md:1807),\n//             repl.MdocSession$App60$.<clinit>(can-catch.md:1723),\n//             repl.MdocSession$App58$.<clinit>(can-catch.md:1657),\n//             repl.MdocSession$App56$.<clinit>(can-catch.md:1640),\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,c.kt)(o.Z,{value:"future",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,c.kt)(o.Z,{value:"id",mdxType:"TabItem"},(0,c.kt)("admonition",{title:"NOTE",type:"caution"},(0,c.kt)("p",{parentName:"admonition"},"Use of ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,c.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-1)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))),(0,c.kt)("h2",{id:"catchingcatchnonfataleithert"},"Catching.catchNonFatalEitherT"),(0,c.kt)("p",null,(0,c.kt)("inlineCode",{parentName:"p"},"Catching.catchNonFatalEitherT")," provides a convenient way to use ",(0,c.kt)("inlineCode",{parentName:"p"},"CanCatch"),"\nto catch ",(0,c.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,c.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,c.kt)("inlineCode",{parentName:"p"},"EitherT[F, A, B]")," and returns ",(0,c.kt)("inlineCode",{parentName:"p"},"EitherT[F, A, B]"),"."),(0,c.kt)("h3",{id:"how-to-use-5"},"How to Use"),(0,c.kt)(r.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,c.kt)(o.Z,{value:"io",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.data.EitherT\nimport cats.effect._\n\nimport effectie.cats.Catching._\n\nval fa = catchNonFatalEitherT[IO](\n    EitherT(IO((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]))\n  )(identity)\n// fa: EitherT[IO, Throwable, Int] = EitherT(\n//   value = Map(\n//     source = Map(\n//       source = Bind(\n//         source = Delay(thunk = <function0>),\n//         f = <function1>,\n//         trace = null\n//       ),\n//       f = effectie.CanCatch$$Lambda$9867/0x0000000102c43840@14d0a480,\n//       trace = StackTrace(\n//         stackTrace = List(\n//           cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//           cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//           cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//           cats.effect.IO.map(IO.scala:106),\n//           effectie.cats.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n//           effectie.cats.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:26),\n//           effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//           effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//           effectie.cats.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//           repl.MdocSession$App0$.<clinit>(can-catch.md:19),\n//           repl.MdocSession$App.<init>(can-catch.md:5),\n//           repl.MdocSession$.app(can-catch.md:3),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withErr(Console.scala:193),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withOut(Console.scala:164),\n//           mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//           mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//           mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:104)\n//         )\n//       )\n//     ),\n//     f = effectie.CanCatch$$Lambda$9886/0x0000000102c4d840@374ed487,\n//     trace = StackTrace(\n//       stackTrace = List(\n//         cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//         cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n// ...\n\nfa.value.unsafeRunSync()\n// res91: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,c.kt)(o.Z,{value:"future",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats.data.EitherT\n\nimport effectie.cats.Catching._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@79b78df9[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@51258359\n\nval fa = catchNonFatalEitherT[Future](\n    EitherT(Future((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]))\n  )(identity)\n// fa: EitherT[Future, Throwable, Int] = EitherT(\n//   value = Future(Success(Left(java.lang.RuntimeException: Something's wrong!)))\n// )\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa.value, Duration.Inf)\n// res93: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,c.kt)(o.Z,{value:"id",mdxType:"TabItem"},(0,c.kt)("admonition",{title:"NOTE",type:"caution"},(0,c.kt)("p",{parentName:"admonition"},"Use of ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,c.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"import cats._\nimport cats.data.EitherT\n\nimport effectie.cats.Catching._\n\nval fa = catchNonFatalEitherT[Id](\n    EitherT((throw new RuntimeException(\"Something's wrong!\")): Id[Either[Throwable, Int]])\n  )(identity)\n// fa: EitherT[Id, Throwable, Int] = EitherT(\n//   value = Left(value = java.lang.RuntimeException: Something's wrong!)\n// )\n\nfa.value\n// res95: Id[Either[Throwable, Int]] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,c.kt)("h3",{id:"happy-path-example-5"},"Happy Path Example"),(0,c.kt)(r.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,c.kt)(o.Z,{value:"io",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.data.EitherT\nimport cats.effect._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.Catching._\nimport effectie.cats.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[IO](1)\n// fa: IO[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = Bind(\n//       source = Bind(\n//         source = Pure(a = Right(value = 100)),\n//         f = cats.data.EitherT$$Lambda$9888/0x0000000102ca8040@40c0d959,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//             cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//             cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//             cats.effect.IO.flatMap(IO.scala:133),\n//             cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:886),\n//             cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:863),\n//             cats.data.EitherT.flatMap(EitherT.scala:403),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1148),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1148),\n//             effectie.CanCatch.$anonfun$catchNonFatalEitherT$1(CanCatch.scala:28),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEitherT(CanCatch.scala:28),\n//             effectie.CanCatch.catchNonFatalEitherT$(CanCatch.scala:27),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalEitherT(CanCatch.scala:26),\n//             repl.MdocSession$App42$.doSomething(can-catch.md:1151),\n//             repl.MdocSession$App42$.<clinit>(can-catch.md:1154),\n//             repl.MdocSession$App40$.<clinit>(can-catch.md:1088),\n//             repl.MdocSession$App38$.<clinit>(can-catch.md:1065),\n//             repl.MdocSession$App36$.<clinit>(can-catch.md:1030),\n//             repl.MdocSession$App34$.<clinit>(can-catch.md:1007),\n//             repl.MdocSession$App32$.<clinit>(can-catch.md:939),\n//             repl.MdocSession$App30$.<clinit>(can-catch.md:849),\n//             repl.MdocSession$App28$.<clinit>(can-catch.md:775),\n//             repl.MdocSession$App26$.<clinit>(can-catch.md:707),\n//             repl.MdocSession$App24$.<clinit>(can-catch.md:617),\n//             repl.MdocSession$App22$.<clinit>(can-catch.md:543),\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Right(value = 200)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),(0,c.kt)(o.Z,{value:"future",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.Catching._\nimport effectie.cats.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).value\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(200)\n// Result is 200\n'))),(0,c.kt)(o.Z,{value:"id",mdxType:"TabItem"},(0,c.kt)("admonition",{title:"NOTE",type:"caution"},(0,c.kt)("p",{parentName:"admonition"},"Use of ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,c.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.Catching._\nimport effectie.cats.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 200)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),(0,c.kt)("h3",{id:"unhappy-path-example-5"},"Unhappy Path Example"),(0,c.kt)(r.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,c.kt)(o.Z,{value:"io",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\nimport cats.effect._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.Catching._\nimport effectie.cats.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[IO](-1)\n// fa: IO[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = Bind(\n//       source = Bind(\n//         source = Pure(a = Right(value = -100)),\n//         f = cats.data.EitherT$$Lambda$9888/0x0000000102ca8040@16bd72a,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//             cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//             cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//             cats.effect.IO.flatMap(IO.scala:133),\n//             cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:886),\n//             cats.effect.IOLowPriorityInstances$IOEffect.flatMap(IO.scala:863),\n//             cats.data.EitherT.flatMap(EitherT.scala:403),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1148),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1148),\n//             effectie.CanCatch.$anonfun$catchNonFatalEitherT$1(CanCatch.scala:28),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEitherT(CanCatch.scala:28),\n//             effectie.CanCatch.catchNonFatalEitherT$(CanCatch.scala:27),\n//             effectie.cats.CanCatch$CanCatchIo$.catchNonFatalEitherT(CanCatch.scala:26),\n//             repl.MdocSession$App42$.doSomething(can-catch.md:1151),\n//             repl.MdocSession$App42$.<clinit>(can-catch.md:1154),\n//             repl.MdocSession$App40$.<clinit>(can-catch.md:1088),\n//             repl.MdocSession$App38$.<clinit>(can-catch.md:1065),\n//             repl.MdocSession$App36$.<clinit>(can-catch.md:1030),\n//             repl.MdocSession$App34$.<clinit>(can-catch.md:1007),\n//             repl.MdocSession$App32$.<clinit>(can-catch.md:939),\n//             repl.MdocSession$App30$.<clinit>(can-catch.md:849),\n//             repl.MdocSession$App28$.<clinit>(can-catch.md:775),\n//             repl.MdocSession$App26$.<clinit>(can-catch.md:707),\n//             repl.MdocSession$App24$.<clinit>(can-catch.md:617),\n//             repl.MdocSession$App22$.<clinit>(can-catch.md:543),\n// ...\nval result = fa.unsafeRunSync()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,c.kt)(o.Z,{value:"future",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.Catching._\nimport effectie.cats.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).value\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,c.kt)(o.Z,{value:"id",mdxType:"TabItem"},(0,c.kt)("admonition",{title:"NOTE",type:"caution"},(0,c.kt)("p",{parentName:"admonition"},"Use of ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,c.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,c.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.cats._\nimport effectie.cats.Effectful._\nimport effectie.cats.Catching._\nimport effectie.cats.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[Id](-1)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))))}u.isMDXComponent=!0}}]);