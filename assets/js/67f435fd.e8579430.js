"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[2],{8277:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>c,metadata:()=>t,toc:()=>s});const t=JSON.parse('{"id":"cats-effect2/fx/error-handling/can-handle-error","title":"CanHandleError","description":"CanHandleError","source":"@site/../generated-docs/docs/cats-effect2/fx/error-handling/can-handle-error.md","sourceDirName":"cats-effect2/fx/error-handling","slug":"/cats-effect2/fx/error-handling/can-handle-error","permalink":"/docs/cats-effect2/fx/error-handling/can-handle-error","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"id":"can-handle-error","title":"CanHandleError"},"sidebar":"latestSidebar","previous":{"title":"CanCatch","permalink":"/docs/cats-effect2/fx/error-handling/can-catch"},"next":{"title":"Fx Cheat sheet","permalink":"/docs/cats-effect2/fx/fx-cheat-sheet"}}');var a=r(4848),o=r(8453);const c={sidebar_position:2,id:"can-handle-error",title:"CanHandleError"},i=void 0,l={},s=[{value:"CanHandleError",id:"canhandleerror",level:2},{value:"CanHandleError.handleNonFatal",id:"canhandleerrorhandlenonfatal",level:2}];function d(n){const e={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{id:"canhandleerror",children:"CanHandleError"}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.code,{children:"CanHandleError"})," is a typeclass to handle ",(0,a.jsx)(e.code,{children:"NonFatal"})," ",(0,a.jsx)(e.code,{children:"Throwable"})," and to recover from it.\nIt looks like this."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"trait CanHandleError[F[_]] {\n\n  def handleNonFatalWith[A, AA >: A](\n      fa: => F[A]\n    )(\n      handleError: Throwable => F[AA]\n    ): F[AA]\n\n  def handleEitherTNonFatalWith[A, AA >: A, B, BB >: B](\n      efab: => EitherT[F, A, B]\n    )(\n      handleError: Throwable => F[Either[AA, BB]]\n    ): EitherT[F, AA, BB]\n\n  def handleNonFatal[A, AA >: A](\n      fa: => F[A]\n    )(\n      handleError: Throwable => AA\n    ): F[AA]\n\n  def handleEitherTNonFatal[A, AA >: A, B, BB >: B](\n      efab: => EitherT[F, A, B]\n    )(\n      handleError: Throwable => Either[AA, BB]\n    ): EitherT[F, AA, BB]\n\n}\n"})}),"\n",(0,a.jsxs)(e.p,{children:["There are instances available for ",(0,a.jsx)(e.code,{children:"cats.effect.IO"}),", ",(0,a.jsx)(e.code,{children:"scala.concurrent.Future"})," and ",(0,a.jsx)(e.code,{children:"cats.Id"}),"."]}),"\n",(0,a.jsx)(e.h2,{id:"canhandleerrorhandlenonfatal",children:"CanHandleError.handleNonFatal"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'import cats._\nimport cats.effect._\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nimport scala.util.control.NonFatal\n\nclass InvalidNumberException(n: Int, message: String) extends RuntimeException(message)\n\ndef foo(n: Int): Int = \n  if (n < 0)\n    throw new InvalidNumberException(n, s"n cannot be a negative Int. n: $n") \n  else\n     n\n\ndef bar[F[_]: Fx: CanHandleError](n: Int): F[Int] =\n  CanHandleError[F].handleNonFatalWith(effectOf(foo(n))) {\n    case NonFatal(err) =>\n      pureOf(0)\n  }\n  \nimport effectie.instances.ce2.fx._\n  \nprintln(bar[IO](1).unsafeRunSync())\n// 1\nprintln(bar[IO](-1).unsafeRunSync())\n// 0\n \nimport effectie.instances.id.fx._\n\nprintln(bar[Id](1))\n// 1\nprintln(bar[Id](-1))\n// 0\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'import effectie.core._\nimport effectie.syntax.all._\n\nimport scala.util.control.NonFatal\n\nimport extras.concurrent.ExecutorServiceOps\nimport java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nobject MyApp {\n    \n  class InvalidNumberException(n: Int, message: String) extends RuntimeException(message)\n  \n  def foo(n: Int): Int = \n    if (n < 0)\n      throw new InvalidNumberException(n, s"n cannot be a negative Int. n: $n") \n    else\n       n\n  \n  def bar[F[_]: Fx: CanHandleError](n: Int): F[Int] =\n    CanHandleError[F].handleNonFatalWith(effectOf(foo(n))) {\n      case NonFatal(err) =>\n        pureOf(0)\n    }\n\n  def main(args: Array[String]): Unit = {\n    \n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors() >> 1)\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      import effectie.instances.future.fx._\n      \n      println(Await.result(bar[Future](1), 1.second))\n      println(Await.result(bar[Future](-1), 1.second))\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\n\nMyApp.main(Array.empty)\n// 1\n// 0\n'})})]})}function f(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>c,x:()=>i});var t=r(6540);const a={},o=t.createContext(a);function c(n){const e=t.useContext(o);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:c(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);