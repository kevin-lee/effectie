(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[809],{3905:function(n,e,a){"use strict";a.d(e,{Zo:function(){return d},kt:function(){return p}});var t=a(7294);function r(n,e,a){return e in n?Object.defineProperty(n,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[e]=a,n}function o(n,e){var a=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),a.push.apply(a,t)}return a}function i(n){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){r(n,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(a,e))}))}return n}function l(n,e){if(null==n)return{};var a,t,r=function(n,e){if(null==n)return{};var a,t,r={},o=Object.keys(n);for(t=0;t<o.length;t++)a=o[t],e.indexOf(a)>=0||(r[a]=n[a]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(t=0;t<o.length;t++)a=o[t],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(r[a]=n[a])}return r}var c=t.createContext({}),s=function(n){var e=t.useContext(c),a=e;return n&&(a="function"==typeof n?n(e):i(i({},e),n)),a},d=function(n){var e=s(n.components);return t.createElement(c.Provider,{value:e},n.children)},m={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},u=t.forwardRef((function(n,e){var a=n.components,r=n.mdxType,o=n.originalType,c=n.parentName,d=l(n,["components","mdxType","originalType","parentName"]),u=s(a),p=r,h=u["".concat(c,".").concat(p)]||u[p]||m[p]||o;return a?t.createElement(h,i(i({ref:e},d),{},{components:a})):t.createElement(h,i({ref:e},d))}));function p(n,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=n,l.mdxType="string"==typeof n?n:r,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8215:function(n,e,a){"use strict";var t=a(7294);e.Z=function(n){var e=n.children,a=n.hidden,r=n.className;return t.createElement("div",{role:"tabpanel",hidden:a,className:r},e)}},5064:function(n,e,a){"use strict";a.d(e,{Z:function(){return m}});var t=a(7294),r=a(9443);var o=function(){var n=(0,t.useContext)(r.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n},i=a(6010),l="tabItem_1uMI",c="tabItemActive_2DSg";var s=37,d=39;var m=function(n){var e=n.lazy,a=n.block,r=n.defaultValue,m=n.values,u=n.groupId,p=n.className,h=o(),f=h.tabGroupChoices,v=h.setTabGroupChoices,b=(0,t.useState)(r),g=b[0],w=b[1],E=t.Children.toArray(n.children),y=[];if(null!=u){var x=f[u];null!=x&&x!==g&&m.some((function(n){return n.value===x}))&&w(x)}var N=function(n){var e=n.currentTarget,a=y.indexOf(e),t=m[a].value;w(t),null!=u&&(v(u,t),setTimeout((function(){var n,a,t,r,o,i,l,s;(n=e.getBoundingClientRect(),a=n.top,t=n.left,r=n.bottom,o=n.right,i=window,l=i.innerHeight,s=i.innerWidth,a>=0&&o<=s&&r<=l&&t>=0)||(e.scrollIntoView({block:"center",behavior:"smooth"}),e.classList.add(c),setTimeout((function(){return e.classList.remove(c)}),2e3))}),150))},I=function(n){var e,a;switch(n.keyCode){case d:var t=y.indexOf(n.target)+1;a=y[t]||y[0];break;case s:var r=y.indexOf(n.target)-1;a=y[r]||y[y.length-1]}null==(e=a)||e.focus()};return t.createElement("div",{className:"tabs-container"},t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":a},p)},m.map((function(n){var e=n.value,a=n.label;return t.createElement("li",{role:"tab",tabIndex:g===e?0:-1,"aria-selected":g===e,className:(0,i.Z)("tabs__item",l,{"tabs__item--active":g===e}),key:e,ref:function(n){return y.push(n)},onKeyDown:I,onFocus:N,onClick:N},a)}))),e?(0,t.cloneElement)(E.filter((function(n){return n.props.value===g}))[0],{className:"margin-vert--md"}):t.createElement("div",{className:"margin-vert--md"},E.map((function(n,e){return(0,t.cloneElement)(n,{key:e,hidden:n.props.value!==g})}))))}},9443:function(n,e,a){"use strict";var t=(0,a(7294).createContext)(void 0);e.Z=t},7527:function(n,e,a){"use strict";a.r(e),a.d(e,{frontMatter:function(){return s},contentTitle:function(){return d},metadata:function(){return m},toc:function(){return u},default:function(){return h}});var t=a(2122),r=a(9756),o=(a(7294),a(3905)),i=a(5064),l=a(8215),c=["components"],s={id:"can-catch",title:"CanCatch"},d=void 0,m={unversionedId:"scalaz-effect/can-catch",id:"scalaz-effect/can-catch",isDocsHomePage:!1,title:"CanCatch",description:"CanCatch",source:"@site/../generated-docs/target/mdoc/scalaz-effect/can-catch.md",sourceDirName:"scalaz-effect",slug:"/scalaz-effect/can-catch",permalink:"/docs/scalaz-effect/can-catch",version:"current",frontMatter:{id:"can-catch",title:"CanCatch"},sidebar:"someSidebar",previous:{title:"Fx",permalink:"/docs/scalaz-effect/fx"},next:{title:"OptionTSupport",permalink:"/docs/scalaz-effect/optiont-support"}},u=[{value:"CanCatch",id:"cancatch",children:[]},{value:"CanCatch.catchNonFatal",id:"cancatchcatchnonfatal",children:[{value:"How to Use",id:"how-to-use",children:[]},{value:"Happy Path Example",id:"happy-path-example",children:[]},{value:"Unhappy Path Example",id:"unhappy-path-example",children:[]}]},{value:"CanCatch.catchNonFatalEither",id:"cancatchcatchnonfataleither",children:[{value:"How to Use",id:"how-to-use-1",children:[]},{value:"Happy Path Example",id:"happy-path-example-1",children:[]},{value:"Unhappy Path Example",id:"unhappy-path-example-1",children:[]}]},{value:"CanCatch.catchNonFatalEitherT",id:"cancatchcatchnonfataleithert",children:[{value:"How to Use",id:"how-to-use-2",children:[]},{value:"Happy Path Example",id:"happy-path-example-2",children:[]},{value:"Unhappy Path Example",id:"unhappy-path-example-2",children:[]}]},{value:"Catching",id:"catching",children:[]},{value:"Catching.catchNonFatal",id:"catchingcatchnonfatal",children:[{value:"How to Use",id:"how-to-use-3",children:[]},{value:"Happy Path Example",id:"happy-path-example-3",children:[]},{value:"Unhappy Path Example",id:"unhappy-path-example-3",children:[]}]},{value:"Catching.catchNonFatalEither",id:"catchingcatchnonfataleither",children:[{value:"How to Use",id:"how-to-use-4",children:[]},{value:"Happy Path Example",id:"happy-path-example-4",children:[]},{value:"Unhappy Path Example",id:"unhappy-path-example-4",children:[]}]},{value:"Catching.catchNonFatalEitherT",id:"catchingcatchnonfataleithert",children:[{value:"How to Use",id:"how-to-use-5",children:[]},{value:"Happy Path Example",id:"happy-path-example-5",children:[]},{value:"Unhappy Path Example",id:"unhappy-path-example-5",children:[]}]}],p={toc:u};function h(n){var e=n.components,a=(0,r.Z)(n,c);return(0,o.kt)("wrapper",(0,t.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"cancatch"},"CanCatch"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"CanCatch")," lets you catch ",(0,o.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,o.kt)("inlineCode",{parentName:"p"},"Throwable")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"F[A]"),"\nand turned it into ",(0,o.kt)("inlineCode",{parentName:"p"},"F[Either[Throwable, A]]"),". It takes a function from ",(0,o.kt)("inlineCode",{parentName:"p"},"Throwable"),"\nto your own error type, yet it can handle only ",(0,o.kt)("inlineCode",{parentName:"p"},"NonFatal")," ones as already mentioned."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"trait CanCatch[F[_]] {\n  def catchNonFatal[A, B](fb: => F[B])(f: Throwable => A): F[A \\/ B]\n\n  def catchNonFatalEither[A, B](fab: => F[A \\/ B])(f: Throwable => A): F[A \\/ B]\n\n  def catchNonFatalEitherT[A, B](fab: => EitherT[F, A, B])(f: Throwable => A): EitherT[F, A, B]\n}\n")),(0,o.kt)("h2",{id:"cancatchcatchnonfatal"},"CanCatch.catchNonFatal"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"CanCatch[F].catchNonFatal[A, B]")," lets you catch ",(0,o.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,o.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"F[B]"),"\nand returns ",(0,o.kt)("inlineCode",{parentName:"p"},"F[A \\/ B]"),"."),(0,o.kt)("h3",{id:"how-to-use"},"How to Use"),(0,o.kt)(i.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz.effect._\n\nimport effectie.scalaz._\n\nval fa = CanCatch[IO].catchNonFatal(\n    IO(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: IO[scalaz.\\/[Throwable, Nothing]] = scalaz.effect.IO$$anon$7@8bfe77d\n\nfa.unsafePerformIO()\n// res1: scalaz.\\/[Throwable, Nothing] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,o.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.scalaz._\n\nval executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@7f75f07[Running, parallelism = 2, size = 1, active = 0, running = 0, steals = 2, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@6316a3bc\n\nval fa = CanCatch[Future].catchNonFatal(\n    Future(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: Future[scalaz.\\/[Throwable, Nothing]] = Future(Success(-\\/(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res3: scalaz.\\/[Throwable, Nothing] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,o.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use of ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,o.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\n\nCanCatch[Id].catchNonFatal(\n    throw new RuntimeException(\"Something's wrong!\")\n  )(identity)\n// res5: Throwable \\/ Nothing = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,o.kt)("h3",{id:"happy-path-example"},"Happy Path Example"),(0,o.kt)(i.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@2bef0555\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = \\/-(b = 202)\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n'))),(0,o.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    CanCatch[F].catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(arg: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// \\/-(202)\n// Result is 202\n'))),(0,o.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use of ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,o.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[MyError \\/ Int] = \\/-(b = 202)\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n')))),(0,o.kt)("h3",{id:"unhappy-path-example"},"Unhappy Path Example"),(0,o.kt)(i.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](-101)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@4b400018\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n'))),(0,o.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    CanCatch[F].catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](-101)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// -\\/(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1])\n'))),(0,o.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use of ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,o.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-101)\n// fa: Id[MyError \\/ Int] = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n')))),(0,o.kt)("h2",{id:"cancatchcatchnonfataleither"},"CanCatch.catchNonFatalEither"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"CanCatch[F].catchNonFatalEither[A, B]")," lets you catch ",(0,o.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,o.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"F[A \\/ B]"),"\nand returns ",(0,o.kt)("inlineCode",{parentName:"p"},"F[A \\/ B]"),"."),(0,o.kt)("h3",{id:"how-to-use-1"},"How to Use"),(0,o.kt)(i.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\n\nval fa = CanCatch[IO].catchNonFatalEither(\n    IO((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int)\n  )(identity)\n// fa: IO[Throwable \\/ Int] = scalaz.effect.IO$$anon$7@6d562b8f\n\nfa.unsafePerformIO()\n// res19: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,o.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\n\nimport effectie.scalaz._\n\nval executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@612855e8[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@3d7e1011\n\nval fa = CanCatch[Future].catchNonFatalEither(\n    Future((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int)\n  )(identity)\n// fa: Future[Throwable \\/ Int] = Future(Success(-\\/(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res21: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,o.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use of ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,o.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\n\nCanCatch[Id].catchNonFatalEither(\n    (throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int\n  )(identity)\n// res23: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,o.kt)("h3",{id:"happy-path-example-1"},"Happy Path Example"),(0,o.kt)(i.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@7ce8d47\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = \\/-(b = 200)\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),(0,o.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n  \n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    CanCatch[F].catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// \\/-(200)\n// Result is 200\n'))),(0,o.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use of ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,o.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[MyError \\/ Int] = \\/-(b = 200)\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),(0,o.kt)("h3",{id:"unhappy-path-example-1"},"Unhappy Path Example"),(0,o.kt)(i.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](-1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@400e451e\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,o.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    CanCatch[F].catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// -\\/(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,o.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use of ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,o.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-1)\n// fa: Id[MyError \\/ Int] = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))),(0,o.kt)("h2",{id:"cancatchcatchnonfataleithert"},"CanCatch.catchNonFatalEitherT"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"CanCatch[F].catchNonFatalEitherT[A, B]")," lets you catch ",(0,o.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,o.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"EitherT[F, A, B]"),"\nand returns ",(0,o.kt)("inlineCode",{parentName:"p"},"EitherT[F, A, B]"),"."),(0,o.kt)("h3",{id:"how-to-use-2"},"How to Use"),(0,o.kt)(i.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\n\nval fa = CanCatch[IO].catchNonFatalEitherT(\n    EitherT(IO((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int))\n  )(identity)\n// fa: EitherT[IO, Throwable, Int] = EitherT(\n//   run = scalaz.effect.IO$$anon$7@5b07e3dc\n// )\n\nfa.run.unsafePerformIO()\n// res37: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,o.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport effectie.scalaz._\n\nval executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@5019c694[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@34e4d648\n\nval fa = CanCatch[Future].catchNonFatalEitherT(\n    EitherT(Future((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int))\n  )(identity)\n// fa: EitherT[Future, Throwable, Int] = EitherT(\n//   run = Future(Success(-\\/(java.lang.RuntimeException: Something's wrong!)))\n// )\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa.run, Duration.Inf)\n// res39: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,o.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use of ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,o.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\n\nval fa = CanCatch[Id].catchNonFatalEitherT(\n    EitherT((throw new RuntimeException(\"Something's wrong!\")): Id[Throwable \\/ Int])\n  )(identity)\n// fa: EitherT[Id, Throwable, Int] = EitherT(\n//   run = -\\/(a = java.lang.RuntimeException: Something's wrong!)\n// )\n\nfa.run\n// res41: Id[Throwable \\/ Int] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,o.kt)("h3",{id:"happy-path-example-2"},"Happy Path Example"),(0,o.kt)(i.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[IO](1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@2fb67ade\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = \\/-(b = 200)\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),(0,o.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    CanCatch[F].catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).run\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// \\/-(200)\n// Result is 200\n'))),(0,o.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use of ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,o.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[Id](1)\n// fa: Id[MyError \\/ Int] = \\/-(b = 200)\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),(0,o.kt)("h3",{id:"unhappy-path-example-2"},"Unhappy Path Example"),(0,o.kt)(i.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.EitherTSupport._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[IO](-1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@54a2e6fb\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,o.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    CanCatch[F].catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).run\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// -\\/(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,o.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use of ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,o.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[Id](-1)\n// fa: Id[MyError \\/ Int] = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))),(0,o.kt)("h2",{id:"catching"},"Catching"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Catching.catchNonFatal")," provides a convenient way to use ",(0,o.kt)("inlineCode",{parentName:"p"},"CanCatch")," to catch ",(0,o.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,o.kt)("inlineCode",{parentName:"p"},"Throwable")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"F[A]"),"\nand turned it into ",(0,o.kt)("inlineCode",{parentName:"p"},"F[Either[Throwable, A]]"),". Just like ",(0,o.kt)("inlineCode",{parentName:"p"},"CanCatch"),", it takes a function from ",(0,o.kt)("inlineCode",{parentName:"p"},"Throwable"),"\nto your own error type, yet it can handle only ",(0,o.kt)("inlineCode",{parentName:"p"},"NonFatal")," ones as already mentioned."),(0,o.kt)("h2",{id:"catchingcatchnonfatal"},"Catching.catchNonFatal"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"catchNonFatal")," lets you catch ",(0,o.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,o.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"F[B]"),"\nand returns ",(0,o.kt)("inlineCode",{parentName:"p"},"F[A \\/ B]"),"."),(0,o.kt)("h3",{id:"how-to-use-3"},"How to Use"),(0,o.kt)(i.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz.effect._\n\nimport effectie.scalaz.Catching._\n\nval fa = catchNonFatal(\n    IO((throw new RuntimeException(\"Something's wrong!\")): Int)\n  )(identity)\n// fa: IO[scalaz.\\/[Throwable, Int]] = scalaz.effect.IO$$anon$7@2231ad92\n\nfa.unsafePerformIO()\n// res55: scalaz.\\/[Throwable, Int] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,o.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.scalaz.Catching._\n\nval executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@1ffcea29[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@308e9979\n\nval fa = catchNonFatal(\n    Future(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: Future[scalaz.\\/[Throwable, Nothing]] = Future(Success(-\\/(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res57: scalaz.\\/[Throwable, Nothing] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,o.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use of ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,o.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz.Catching._\n\ncatchNonFatal[Id](\n    throw new RuntimeException(\"Something's wrong!\")\n  )(identity)\n// res59: Id[Throwable \\/ Nothing] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,o.kt)("h3",{id:"happy-path-example-3"},"Happy Path Example"),(0,o.kt)(i.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@6bee81fb\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = \\/-(b = 202)\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n'))),(0,o.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(arg: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// \\/-(202)\n// Result is 202\n'))),(0,o.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use of ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,o.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[MyError \\/ Int] = \\/-(b = 202)\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n')))),(0,o.kt)("h3",{id:"unhappy-path-example-3"},"Unhappy Path Example"),(0,o.kt)(i.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](-101)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@225d1123\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n'))),(0,o.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](-101)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// -\\/(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1])\n'))),(0,o.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use of ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,o.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-101)\n// fa: Id[MyError \\/ Int] = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n')))),(0,o.kt)("h2",{id:"catchingcatchnonfataleither"},"Catching.catchNonFatalEither"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Catching.catchNonFatalEither")," provides a convenient way to use ",(0,o.kt)("inlineCode",{parentName:"p"},"CanCatch"),"\nto catch ",(0,o.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,o.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"F[A \\/ B]")," and returns ",(0,o.kt)("inlineCode",{parentName:"p"},"F[A \\/ B]"),"."),(0,o.kt)("h3",{id:"how-to-use-4"},"How to Use"),(0,o.kt)(i.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz.Catching._\n\nval fa = catchNonFatalEither(\n    IO((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int)\n  )(identity)\n// fa: IO[Throwable \\/ Int] = scalaz.effect.IO$$anon$7@40c43f01\n\nfa.unsafePerformIO()\n// res73: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,o.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\n\nimport effectie.scalaz.Catching._\n\nval executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@52e6fbd2[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@33bbeab8\n\nval fa = catchNonFatalEither(\n    Future((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int)\n  )(identity)\n// fa: Future[Throwable \\/ Int] = Future(Success(-\\/(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res75: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,o.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use of ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,o.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz.Catching._\n\ncatchNonFatalEither[Id](\n    (throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int\n  )(identity)\n// res77: Id[Throwable \\/ Int] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,o.kt)("h3",{id:"happy-path-example-4"},"Happy Path Example"),(0,o.kt)(i.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@1b2206f3\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = \\/-(b = 200)\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),(0,o.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n  \n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// \\/-(200)\n// Result is 200\n'))),(0,o.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use of ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,o.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[MyError \\/ Int] = \\/-(b = 200)\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),(0,o.kt)("h3",{id:"unhappy-path-example-4"},"Unhappy Path Example"),(0,o.kt)(i.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](-1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@87a9c17\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,o.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// -\\/(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,o.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use of ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,o.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-1)\n// fa: Id[MyError \\/ Int] = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))),(0,o.kt)("h2",{id:"catchingcatchnonfataleithert"},"Catching.catchNonFatalEitherT"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Catching.catchNonFatalEitherT")," provides a convenient way to use ",(0,o.kt)("inlineCode",{parentName:"p"},"CanCatch"),"\nto catch ",(0,o.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,o.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"EitherT[F, A, B]")," and returns ",(0,o.kt)("inlineCode",{parentName:"p"},"EitherT[F, A, B]"),"."),(0,o.kt)("h3",{id:"how-to-use-5"},"How to Use"),(0,o.kt)(i.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz.Catching._\n\nval fa = catchNonFatalEitherT[IO](\n    EitherT(IO((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int))\n  )(identity)\n// fa: EitherT[IO, Throwable, Int] = EitherT(\n//   run = scalaz.effect.IO$$anon$7@29124e22\n// )\n\nfa.run.unsafePerformIO()\n// res91: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,o.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\n\nimport effectie.scalaz.Catching._\n\nval executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@330d80c3[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@855abde\n\nval fa = catchNonFatalEitherT[Future](\n    EitherT(Future((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int))\n  )(identity)\n// fa: EitherT[Future, Throwable, Int] = EitherT(\n//   run = Future(Success(-\\/(java.lang.RuntimeException: Something's wrong!)))\n// )\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa.run, Duration.Inf)\n// res93: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,o.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use of ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,o.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz.Catching._\n\nval fa = catchNonFatalEitherT[Id](\n    EitherT((throw new RuntimeException(\"Something's wrong!\")): Id[Throwable \\/ Int])\n  )(identity)\n// fa: EitherT[Id, Throwable, Int] = EitherT(\n//   run = -\\/(a = java.lang.RuntimeException: Something's wrong!)\n// )\n\nfa.run\n// res95: Id[Throwable \\/ Int] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,o.kt)("h3",{id:"happy-path-example-5"},"Happy Path Example"),(0,o.kt)(i.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[IO](1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@6f6b2ef\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = \\/-(b = 200)\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),(0,o.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.scalaz.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).run\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// \\/-(200)\n// Result is 200\n'))),(0,o.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use of ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,o.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[Id](1)\n// fa: Id[MyError \\/ Int] = \\/-(b = 200)\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),(0,o.kt)("h3",{id:"unhappy-path-example-5"},"Unhappy Path Example"),(0,o.kt)(i.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[IO](-1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@cde2a2e\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,o.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.scalaz.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).run\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// -\\/(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,o.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use of ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,o.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[Id](-1)\n// fa: Id[MyError \\/ Int] = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))))}h.isMDXComponent=!0},6010:function(n,e,a){"use strict";function t(n){var e,a,r="";if("string"==typeof n||"number"==typeof n)r+=n;else if("object"==typeof n)if(Array.isArray(n))for(e=0;e<n.length;e++)n[e]&&(a=t(n[e]))&&(r&&(r+=" "),r+=a);else for(e in n)n[e]&&(r&&(r+=" "),r+=e);return r}function r(){for(var n,e,a=0,r="";a<arguments.length;)(n=arguments[a++])&&(e=t(n))&&(r&&(r+=" "),r+=e);return r}a.d(e,{Z:function(){return r}})}}]);