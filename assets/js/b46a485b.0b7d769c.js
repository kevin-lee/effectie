"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[8291],{2123:(n,a,e)=>{e.r(a),e.d(a,{assets:()=>h,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"docs/monix/can-catch","title":"CanCatch","description":"CanCatch","source":"@site/versioned_docs/version-v1/docs/monix/can-catch.md","sourceDirName":"docs/monix","slug":"/docs/monix/can-catch","permalink":"/docs/v1/docs/monix/can-catch","draft":false,"unlisted":false,"tags":[],"version":"v1","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"id":"can-catch","title":"CanCatch"},"sidebar":"sidebar","previous":{"title":"Fx","permalink":"/docs/v1/docs/monix/fx"},"next":{"title":"CanHandleError","permalink":"/docs/v1/docs/monix/can-handle-error"}}');var c=e(4848),r=e(8453),i=e(5537),o=e(9329);const l={sidebar_position:2,id:"can-catch",title:"CanCatch"},s=void 0,h={},d=[{value:"CanCatch",id:"cancatch",level:2},{value:"CanCatch.catchNonFatal",id:"cancatchcatchnonfatal",level:2},{value:"How to Use",id:"how-to-use",level:3},{value:"Happy Path Example",id:"happy-path-example",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example",level:3},{value:"CanCatch.catchNonFatalEither",id:"cancatchcatchnonfataleither",level:2},{value:"How to Use",id:"how-to-use-1",level:3},{value:"Happy Path Example",id:"happy-path-example-1",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-1",level:3},{value:"CanCatch.catchNonFatalEitherT",id:"cancatchcatchnonfataleithert",level:2},{value:"How to Use",id:"how-to-use-2",level:3},{value:"Happy Path Example",id:"happy-path-example-2",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-2",level:3},{value:"Catching",id:"catching",level:2},{value:"Catching.catchNonFatal",id:"catchingcatchnonfatal",level:2},{value:"How to Use",id:"how-to-use-3",level:3},{value:"Happy Path Example",id:"happy-path-example-3",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-3",level:3},{value:"Catching.catchNonFatalEither",id:"catchingcatchnonfataleither",level:2},{value:"How to Use",id:"how-to-use-4",level:3},{value:"Happy Path Example",id:"happy-path-example-4",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-4",level:3},{value:"Catching.catchNonFatalEitherT",id:"catchingcatchnonfataleithert",level:2},{value:"How to Use",id:"how-to-use-5",level:3},{value:"Happy Path Example",id:"happy-path-example-5",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-5",level:3}];function u(n){const a={admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(a.h2,{id:"cancatch",children:"CanCatch"}),"\n",(0,c.jsxs)(a.p,{children:[(0,c.jsx)(a.code,{children:"CanCatch"})," lets you catch ",(0,c.jsx)(a.code,{children:"NonFatal"})," ",(0,c.jsx)(a.code,{children:"Throwable"})," in the ",(0,c.jsx)(a.code,{children:"F[A]"}),"\nand turned it into ",(0,c.jsx)(a.code,{children:"F[Either[Throwable, A]]"}),". It takes a function from ",(0,c.jsx)(a.code,{children:"Throwable"}),"\nto your own error type, yet it can handle only ",(0,c.jsx)(a.code,{children:"NonFatal"})," ones as already mentioned."]}),"\n",(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:"trait CanCatch[F[_]] {\n  def catchNonFatal[A, B](fb: => F[B])(f: Throwable => A): F[Either[A, B]]\n\n  def catchNonFatalEither[A, B](fab: => F[Either[A, B]])(f: Throwable => A): F[Either[A, B]]\n\n  def catchNonFatalEitherT[A, B](fab: => EitherT[F, A, B])(f: Throwable => A): EitherT[F, A, B]\n}\n"})}),"\n",(0,c.jsx)(a.h2,{id:"cancatchcatchnonfatal",children:"CanCatch.catchNonFatal"}),"\n",(0,c.jsxs)(a.p,{children:[(0,c.jsx)(a.code,{children:"CanCatch[F].catchNonFatal[A, B]"})," lets you catch ",(0,c.jsx)(a.code,{children:"NonFatal"})," ",(0,c.jsx)(a.code,{children:"Throwable"})," from ",(0,c.jsx)(a.code,{children:"F[B]"}),"\nand returns ",(0,c.jsx)(a.code,{children:"F[Either[A, B]]"}),"."]}),"\n",(0,c.jsx)(a.h3,{id:"how-to-use",children:"How to Use"}),"\n",(0,c.jsxs)(i.A,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],children:[(0,c.jsx)(o.A,{value:"task",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:"import monix.eval._\n\nimport effectie.monix._\n\nval fa = CanCatch[Task].catchNonFatal(\n    Task(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: Task[Either[Throwable, Nothing]] = Map(\n//   source = FlatMap(\n//     source = Eval(thunk = <function0>),\n//     f = <function1>,\n//     trace = null\n//   ),\n//   f = effectie.CanCatch$$Lambda$12442/0x0000000803504040@7745668a,\n//   trace = StackTrace(\n//     stackTrace = List(\n//       monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//       monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//       monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//       monix.eval.Task.map(Task.scala:2027),\n//       effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n//       effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:26),\n//       effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//       effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//       effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//       repl.MdocSession$App0$.<clinit>(can-catch.md:19),\n//       repl.MdocSession$App.<init>(can-catch.md:5),\n//       repl.MdocSession$.app(can-catch.md:3),\n//       mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//       scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//       scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//       scala.Console$.withErr(Console.scala:193),\n//       mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//       scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//       scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//       scala.Console$.withOut(Console.scala:164),\n//       mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//       mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//       mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:104)\n//     )\n//   )\n// )\n\nimport monix.execution.Scheduler.Implicits.global\nfa.runSyncUnsafe()\n// res1: Either[Throwable, Nothing] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"})})}),(0,c.jsx)(o.A,{value:"future",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.monix._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@373c1d41[Running, parallelism = 4, size = 2, active = 0, running = 0, steals = 2, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@65f2fa14\n\nval fa = CanCatch[Future].catchNonFatal(\n    Future(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: Future[Either[Throwable, Nothing]] = Future(Success(Left(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res3: Either[Throwable, Nothing] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"})})}),(0,c.jsxs)(o.A,{value:"id",children:[(0,c.jsx)(a.admonition,{title:"NOTE",type:"caution",children:(0,c.jsxs)(a.p,{children:["Use of ",(0,c.jsx)(a.code,{children:"Id"})," is not recommended as ",(0,c.jsx)(a.code,{children:"Id"})," means having no ",(0,c.jsx)(a.code,{children:"Effect"}),". Use it only for some special cases like testing."]})}),(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:"import cats._\n\nimport effectie.monix._\n\nCanCatch[Id].catchNonFatal(\n    throw new RuntimeException(\"Something's wrong!\")\n  )(identity)\n// res5: Either[Throwable, Nothing] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"})})]})]}),"\n",(0,c.jsx)(a.h3,{id:"happy-path-example",children:"Happy Path Example"}),"\n",(0,c.jsxs)(i.A,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],children:[(0,c.jsx)(o.A,{value:"task",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Task](1)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = FlatMap(\n//     source = FlatMap(\n//       source = Now(value = 101),\n//       f = <function1>,\n//       trace = StackTrace(\n//         stackTrace = List(\n//           monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//           monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//           monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//           monix.eval.Task.flatMap(Task.scala:1792),\n//           monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//           monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//           cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//           cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//           cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//           repl.MdocSession$App6$$anonfun$doSomething$1.apply(can-catch.md:120),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//           effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//           effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//           repl.MdocSession$App6$.doSomething(can-catch.md:123),\n//           repl.MdocSession$App6$.<clinit>(can-catch.md:126),\n//           repl.MdocSession$App4$.<clinit>(can-catch.md:77),\n//           repl.MdocSession$App2$.<clinit>(can-catch.md:60),\n//           repl.MdocSession$App0$.<clinit>(can-catch.md:28),\n//           repl.MdocSession$App.<init>(can-catch.md:5),\n//           repl.MdocSession$.app(can-catch.md:3),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withErr(Console.scala:193),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withOut(Console.scala:164),\n//           mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//           mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(Markd...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Right(value = 202)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n'})})}),(0,c.jsx)(o.A,{value:"future",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(arg: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(202)\n// Result is 202\n'})})}),(0,c.jsxs)(o.A,{value:"id",children:[(0,c.jsx)(a.admonition,{title:"NOTE",type:"caution",children:(0,c.jsxs)(a.p,{children:["Use of ",(0,c.jsx)(a.code,{children:"Id"})," is not recommended as ",(0,c.jsx)(a.code,{children:"Id"})," means having no ",(0,c.jsx)(a.code,{children:"Effect"}),". Use it only for some special cases like testing."]})}),(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 202)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n'})})]})]}),"\n",(0,c.jsx)(a.h3,{id:"unhappy-path-example",children:"Unhappy Path Example"}),"\n",(0,c.jsxs)(i.A,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],children:[(0,c.jsx)(o.A,{value:"task",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Task](-101)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = FlatMap(\n//     source = FlatMap(\n//       source = Now(value = -1),\n//       f = <function1>,\n//       trace = StackTrace(\n//         stackTrace = List(\n//           monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//           monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//           monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//           monix.eval.Task.flatMap(Task.scala:1792),\n//           monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//           monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//           cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//           cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//           cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//           repl.MdocSession$App12$$anonfun$doSomething$7.apply(can-catch.md:323),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//           effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//           effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//           repl.MdocSession$App12$.doSomething(can-catch.md:326),\n//           repl.MdocSession$App12$.<clinit>(can-catch.md:329),\n//           repl.MdocSession$App10$.<clinit>(can-catch.md:280),\n//           repl.MdocSession$App8$.<clinit>(can-catch.md:223),\n//           repl.MdocSession$App6$.<clinit>(can-catch.md:143),\n//           repl.MdocSession$App4$.<clinit>(can-catch.md:77),\n//           repl.MdocSession$App2$.<clinit>(can-catch.md:60),\n//           repl.MdocSession$App0$.<clinit>(can-catch.md:28),\n//           repl.MdocSession$App.<init>(can-catch.md:5),\n//           repl.MdocSession$.app(can-catch.md:3),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withErr(Console.scala:193),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withOut(Console.scala:164),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n'})})}),(0,c.jsx)(o.A,{value:"future",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](-101)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1])\n'})})}),(0,c.jsxs)(o.A,{value:"id",children:[(0,c.jsx)(a.admonition,{title:"NOTE",type:"caution",children:(0,c.jsxs)(a.p,{children:["Use of ",(0,c.jsx)(a.code,{children:"Id"})," is not recommended as ",(0,c.jsx)(a.code,{children:"Id"})," means having no ",(0,c.jsx)(a.code,{children:"Effect"}),". Use it only for some special cases like testing."]})}),(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-101)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n'})})]})]}),"\n",(0,c.jsx)(a.h2,{id:"cancatchcatchnonfataleither",children:"CanCatch.catchNonFatalEither"}),"\n",(0,c.jsxs)(a.p,{children:[(0,c.jsx)(a.code,{children:"CanCatch[F].catchNonFatalEither[A, B]"})," lets you catch ",(0,c.jsx)(a.code,{children:"NonFatal"})," ",(0,c.jsx)(a.code,{children:"Throwable"})," from ",(0,c.jsx)(a.code,{children:"F[Either[A, B]]"}),"\nand returns ",(0,c.jsx)(a.code,{children:"F[Either[A, B]]"}),"."]}),"\n",(0,c.jsx)(a.h3,{id:"how-to-use-1",children:"How to Use"}),"\n",(0,c.jsxs)(i.A,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],children:[(0,c.jsx)(o.A,{value:"task",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:"import monix.eval._\n\nimport effectie.monix._\n\nval fa = CanCatch[Task].catchNonFatalEither(\n    Task((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int])\n  )(identity)\n// fa: Task[Either[Throwable, Int]] = Map(\n//   source = Map(\n//     source = FlatMap(\n//       source = Eval(thunk = <function0>),\n//       f = <function1>,\n//       trace = null\n//     ),\n//     f = effectie.CanCatch$$Lambda$12442/0x0000000803504040@2fc6d7b6,\n//     trace = StackTrace(\n//       stackTrace = List(\n//         monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//         monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//         monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//         monix.eval.Task.map(Task.scala:2027),\n//         effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n//         effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:26),\n//         effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//         effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//         effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//         repl.MdocSession$App0$.<clinit>(can-catch.md:19),\n//         repl.MdocSession$App.<init>(can-catch.md:5),\n//         repl.MdocSession$.app(can-catch.md:3),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withErr(Console.scala:193),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withOut(Console.scala:164),\n//         mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//         mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//         mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:104)\n//       )\n//     )\n//   ),\n//   f = effectie.CanCatch$$Lambda$12457/0x000000080351d840@73eb95f2,\n//   trace = StackTrace(\n//     stackTrace = List(\n//       monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//       monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//       monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//       monix.eval.Task.map(Task.scala:2027),\n//       effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nfa.runSyncUnsafe()\n// res19: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"})})}),(0,c.jsx)(o.A,{value:"future",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.monix._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@246a58db[Running, parallelism = 4, size = 4, active = 0, running = 0, steals = 3, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@56ba2418\n\nval fa = CanCatch[Future].catchNonFatalEither(\n    Future((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int])\n  )(identity)\n// fa: Future[Either[Throwable, Int]] = Future(Success(Left(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res21: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"})})}),(0,c.jsxs)(o.A,{value:"id",children:[(0,c.jsx)(a.admonition,{title:"NOTE",type:"caution",children:(0,c.jsxs)(a.p,{children:["Use of ",(0,c.jsx)(a.code,{children:"Id"})," is not recommended as ",(0,c.jsx)(a.code,{children:"Id"})," means having no ",(0,c.jsx)(a.code,{children:"Effect"}),". Use it only for some special cases like testing."]})}),(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:"import cats._\n\nimport effectie.monix._\n\nCanCatch[Id].catchNonFatalEither(\n    (throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]\n  )(identity)\n// res23: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"})})]})]}),"\n",(0,c.jsx)(a.h3,{id:"happy-path-example-1",children:"Happy Path Example"}),"\n",(0,c.jsxs)(i.A,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],children:[(0,c.jsx)(o.A,{value:"task",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Task](1)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = FlatMap(\n//       source = FlatMap(\n//         source = Now(value = Right(value = 100)),\n//         f = <function1>,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//             monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//             monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//             monix.eval.Task.flatMap(Task.scala:1792),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//             cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//             cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//             cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//             repl.MdocSession$App24$$anonfun$doSomething$13.apply(can-catch.md:609),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             repl.MdocSession$App24$.doSomething(can-catch.md:612),\n//             repl.MdocSession$App24$.<clinit>(can-catch.md:615),\n//             repl.MdocSession$App22$.<clinit>(can-catch.md:555),\n//             repl.MdocSession$App20$.<clinit>(can-catch.md:538),\n//             repl.MdocSession$App18$.<clinit>(can-catch.md:506),\n//             repl.MdocSession$App16$.<clinit>(can-catch.md:483),\n//             repl.MdocSession$App14$.<clinit>(can-catch.md:426),\n//             repl.MdocSession$App12$.<clinit>(can-catch.md:346),\n//             repl.MdocSession$App10$.<clinit>(can-catch.md:280),\n//             repl.MdocSession$App8$.<clinit>(can-catch.md:223),\n//             repl.MdocSession$App6$.<clinit>(can-catch.md:143),\n//             repl.MdocSession$App4$.<clinit>(can-catch.md:77),\n//             repl.MdocSession$App2$.<clinit>(can-catch.md:60),\n//             repl.MdocSession$App0$.<clinit>(can-catch.md:28),\n//             repl.MdocSession$App.<init>(can-catch.md:5),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Right(value = 200)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'})})}),(0,c.jsx)(o.A,{value:"future",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n  \n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(200)\n// Result is 200\n'})})}),(0,c.jsxs)(o.A,{value:"id",children:[(0,c.jsx)(a.admonition,{title:"NOTE",type:"caution",children:(0,c.jsxs)(a.p,{children:["Use of ",(0,c.jsx)(a.code,{children:"Id"})," is not recommended as ",(0,c.jsx)(a.code,{children:"Id"})," means having no ",(0,c.jsx)(a.code,{children:"Effect"}),". Use it only for some special cases like testing."]})}),(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 200)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'})})]})]}),"\n",(0,c.jsx)(a.h3,{id:"unhappy-path-example-1",children:"Unhappy Path Example"}),"\n",(0,c.jsxs)(i.A,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],children:[(0,c.jsx)(o.A,{value:"task",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Task](-1)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = FlatMap(\n//       source = FlatMap(\n//         source = Now(value = Right(value = -100)),\n//         f = <function1>,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//             monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//             monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//             monix.eval.Task.flatMap(Task.scala:1792),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//             cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//             cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//             cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//             repl.MdocSession$App30$$anonfun$doSomething$19.apply(can-catch.md:844),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             repl.MdocSession$App30$.doSomething(can-catch.md:847),\n//             repl.MdocSession$App30$.<clinit>(can-catch.md:850),\n//             repl.MdocSession$App28$.<clinit>(can-catch.md:790),\n//             repl.MdocSession$App26$.<clinit>(can-catch.md:722),\n//             repl.MdocSession$App24$.<clinit>(can-catch.md:632),\n//             repl.MdocSession$App22$.<clinit>(can-catch.md:555),\n//             repl.MdocSession$App20$.<clinit>(can-catch.md:538),\n//             repl.MdocSession$App18$.<clinit>(can-catch.md:506),\n//             repl.MdocSession$App16$.<clinit>(can-catch.md:483),\n//             repl.MdocSession$App14$.<clinit>(can-catch.md:426),\n//             repl.MdocSession$App12$.<clinit>(can-catch.md:346),\n//             repl.MdocSession$App10$.<clinit>(can-catch.md:280),\n//             repl.MdocSession$App8$.<clinit>(can-catch.md:223),\n//             repl.MdocSession$App6$.<clinit>(can-catch.md:143),\n//             repl.MdocSession$App4$.<clinit>(can-catch.md:77),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'})})}),(0,c.jsx)(o.A,{value:"future",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'})})}),(0,c.jsxs)(o.A,{value:"id",children:[(0,c.jsx)(a.admonition,{title:"NOTE",type:"caution",children:(0,c.jsxs)(a.p,{children:["Use of ",(0,c.jsx)(a.code,{children:"Id"})," is not recommended as ",(0,c.jsx)(a.code,{children:"Id"})," means having no ",(0,c.jsx)(a.code,{children:"Effect"}),". Use it only for some special cases like testing."]})}),(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-1)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'})})]})]}),"\n",(0,c.jsx)(a.h2,{id:"cancatchcatchnonfataleithert",children:"CanCatch.catchNonFatalEitherT"}),"\n",(0,c.jsxs)(a.p,{children:[(0,c.jsx)(a.code,{children:"CanCatch[F].catchNonFatalEitherT[A, B]"})," lets you catch ",(0,c.jsx)(a.code,{children:"NonFatal"})," ",(0,c.jsx)(a.code,{children:"Throwable"})," from ",(0,c.jsx)(a.code,{children:"EitherT[F, A, B]"}),"\nand returns ",(0,c.jsx)(a.code,{children:"EitherT[F, A, B]"}),"."]}),"\n",(0,c.jsx)(a.h3,{id:"how-to-use-2",children:"How to Use"}),"\n",(0,c.jsxs)(i.A,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],children:[(0,c.jsx)(o.A,{value:"task",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:"import cats.data.EitherT\nimport monix.eval._\n\nimport effectie.monix._\n\nval fa = CanCatch[Task].catchNonFatalEitherT(\n    EitherT(Task((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]))\n  )(identity)\n// fa: EitherT[Task, Throwable, Int] = EitherT(\n//   value = Map(\n//     source = Map(\n//       source = FlatMap(\n//         source = Eval(thunk = <function0>),\n//         f = <function1>,\n//         trace = null\n//       ),\n//       f = effectie.CanCatch$$Lambda$12442/0x0000000803504040@4fd8221e,\n//       trace = StackTrace(\n//         stackTrace = List(\n//           monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//           monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//           monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//           monix.eval.Task.map(Task.scala:2027),\n//           effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n//           effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:26),\n//           effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//           effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//           repl.MdocSession$App0$.<clinit>(can-catch.md:19),\n//           repl.MdocSession$App.<init>(can-catch.md:5),\n//           repl.MdocSession$.app(can-catch.md:3),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withErr(Console.scala:193),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withOut(Console.scala:164),\n//           mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//           mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//           mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:104)\n//         )\n//       )\n//     ),\n//     f = effectie.CanCatch$$Lambda$12457/0x000000080351d840@60b37a12,\n//     trace = StackTrace(\n//       stackTrace = List(\n//         monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nfa.value.runSyncUnsafe()\n// res37: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"})})}),(0,c.jsx)(o.A,{value:"future",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats.data.EitherT\nimport effectie.monix._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@16694a5f[Running, parallelism = 4, size = 4, active = 0, running = 0, steals = 3, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@11f4266e\n\nval fa = CanCatch[Future].catchNonFatalEitherT(\n    EitherT(Future((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]))\n  )(identity)\n// fa: EitherT[Future, Throwable, Int] = EitherT(\n//   value = Future(Success(Left(java.lang.RuntimeException: Something's wrong!)))\n// )\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa.value, Duration.Inf)\n// res39: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"})})}),(0,c.jsxs)(o.A,{value:"id",children:[(0,c.jsx)(a.admonition,{title:"NOTE",type:"caution",children:(0,c.jsxs)(a.p,{children:["Use of ",(0,c.jsx)(a.code,{children:"Id"})," is not recommended as ",(0,c.jsx)(a.code,{children:"Id"})," means having no ",(0,c.jsx)(a.code,{children:"Effect"}),". Use it only for some special cases like testing."]})}),(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:"import cats._\nimport cats.data.EitherT\n\nimport effectie.monix._\n\nval fa = CanCatch[Id].catchNonFatalEitherT(\n    EitherT((throw new RuntimeException(\"Something's wrong!\")): Id[Either[Throwable, Int]])\n  )(identity)\n// fa: EitherT[Id, Throwable, Int] = EitherT(\n//   value = Left(value = java.lang.RuntimeException: Something's wrong!)\n// )\n\nfa.value\n// res41: Id[Either[Throwable, Int]] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"})})]})]}),"\n",(0,c.jsx)(a.h3,{id:"happy-path-example-2",children:"Happy Path Example"}),"\n",(0,c.jsxs)(i.A,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],children:[(0,c.jsx)(o.A,{value:"task",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\nimport cats.data.EitherT\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[Task](1)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = FlatMap(\n//       source = FlatMap(\n//         source = Now(value = Right(value = 100)),\n//         f = cats.data.EitherT$$Lambda$12459/0x000000080351c840@1f322e9c,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//             monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//             monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//             monix.eval.Task.flatMap(Task.scala:1792),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//             cats.data.EitherT.flatMap(EitherT.scala:403),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1169),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1169),\n//             effectie.CanCatch.$anonfun$catchNonFatalEitherT$1(CanCatch.scala:28),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEitherT(CanCatch.scala:28),\n//             effectie.CanCatch.catchNonFatalEitherT$(CanCatch.scala:27),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEitherT(CanCatch.scala:26),\n//             repl.MdocSession$App42$.doSomething(can-catch.md:1172),\n//             repl.MdocSession$App42$.<clinit>(can-catch.md:1175),\n//             repl.MdocSession$App40$.<clinit>(can-catch.md:1109),\n//             repl.MdocSession$App38$.<clinit>(can-catch.md:1086),\n//             repl.MdocSession$App36$.<clinit>(can-catch.md:1051),\n//             repl.MdocSession$App34$.<clinit>(can-catch.md:1025),\n//             repl.MdocSession$App32$.<clinit>(can-catch.md:957),\n//             repl.MdocSession$App30$.<clinit>(can-catch.md:867),\n//             repl.MdocSession$App28$.<clinit>(can-catch.md:790),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Right(value = 200)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'})})}),(0,c.jsx)(o.A,{value:"future",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).value\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(200)\n// Result is 200\n'})})}),(0,c.jsxs)(o.A,{value:"id",children:[(0,c.jsx)(a.admonition,{title:"NOTE",type:"caution",children:(0,c.jsxs)(a.p,{children:["Use of ",(0,c.jsx)(a.code,{children:"Id"})," is not recommended as ",(0,c.jsx)(a.code,{children:"Id"})," means having no ",(0,c.jsx)(a.code,{children:"Effect"}),". Use it only for some special cases like testing."]})}),(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 200)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'})})]})]}),"\n",(0,c.jsx)(a.h3,{id:"unhappy-path-example-2",children:"Unhappy Path Example"}),"\n",(0,c.jsxs)(i.A,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],children:[(0,c.jsx)(o.A,{value:"task",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.EitherTSupport._\nimport effectie.monix.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[Task](-1)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = FlatMap(\n//       source = FlatMap(\n//         source = Now(value = Right(value = -100)),\n//         f = cats.data.EitherT$$Lambda$12459/0x000000080351c840@642ab482,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//             monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//             monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//             monix.eval.Task.flatMap(Task.scala:1792),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//             cats.data.EitherT.flatMap(EitherT.scala:403),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1169),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1169),\n//             effectie.CanCatch.$anonfun$catchNonFatalEitherT$1(CanCatch.scala:28),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEitherT(CanCatch.scala:28),\n//             effectie.CanCatch.catchNonFatalEitherT$(CanCatch.scala:27),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEitherT(CanCatch.scala:26),\n//             repl.MdocSession$App42$.doSomething(can-catch.md:1172),\n//             repl.MdocSession$App42$.<clinit>(can-catch.md:1175),\n//             repl.MdocSession$App40$.<clinit>(can-catch.md:1109),\n//             repl.MdocSession$App38$.<clinit>(can-catch.md:1086),\n//             repl.MdocSession$App36$.<clinit>(can-catch.md:1051),\n//             repl.MdocSession$App34$.<clinit>(can-catch.md:1025),\n//             repl.MdocSession$App32$.<clinit>(can-catch.md:957),\n//             repl.MdocSession$App30$.<clinit>(can-catch.md:867),\n//             repl.MdocSession$App28$.<clinit>(can-catch.md:790),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'})})}),(0,c.jsx)(o.A,{value:"future",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).value\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'})})}),(0,c.jsxs)(o.A,{value:"id",children:[(0,c.jsx)(a.admonition,{title:"NOTE",type:"caution",children:(0,c.jsxs)(a.p,{children:["Use of ",(0,c.jsx)(a.code,{children:"Id"})," is not recommended as ",(0,c.jsx)(a.code,{children:"Id"})," means having no ",(0,c.jsx)(a.code,{children:"Effect"}),". Use it only for some special cases like testing."]})}),(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[Id](-1)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'})})]})]}),"\n",(0,c.jsx)(a.h2,{id:"catching",children:"Catching"}),"\n",(0,c.jsxs)(a.p,{children:[(0,c.jsx)(a.code,{children:"Catching.catchNonFatal"})," provides a convenient way to use ",(0,c.jsx)(a.code,{children:"CanCatch"})," to catch ",(0,c.jsx)(a.code,{children:"NonFatal"})," ",(0,c.jsx)(a.code,{children:"Throwable"})," in the ",(0,c.jsx)(a.code,{children:"F[A]"}),"\nand turned it into ",(0,c.jsx)(a.code,{children:"F[Either[Throwable, A]]"}),". Just like ",(0,c.jsx)(a.code,{children:"CanCatch"}),", it takes a function from ",(0,c.jsx)(a.code,{children:"Throwable"}),"\nto your own error type, yet it can handle only ",(0,c.jsx)(a.code,{children:"NonFatal"})," ones as already mentioned."]}),"\n",(0,c.jsx)(a.h2,{id:"catchingcatchnonfatal",children:"Catching.catchNonFatal"}),"\n",(0,c.jsxs)(a.p,{children:[(0,c.jsx)(a.code,{children:"catchNonFatal"})," lets you catch ",(0,c.jsx)(a.code,{children:"NonFatal"})," ",(0,c.jsx)(a.code,{children:"Throwable"})," from ",(0,c.jsx)(a.code,{children:"F[B]"}),"\nand returns ",(0,c.jsx)(a.code,{children:"F[Either[A, B]]"}),"."]}),"\n",(0,c.jsx)(a.h3,{id:"how-to-use-3",children:"How to Use"}),"\n",(0,c.jsxs)(i.A,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],children:[(0,c.jsx)(o.A,{value:"task",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:"import monix.eval._\n\nimport effectie.monix.Catching._\n\nval fa = catchNonFatal(\n    Task(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: Task[Either[Throwable, Nothing]] = Map(\n//   source = FlatMap(\n//     source = Eval(thunk = <function0>),\n//     f = <function1>,\n//     trace = null\n//   ),\n//   f = effectie.CanCatch$$Lambda$12442/0x0000000803504040@38cd21ea,\n//   trace = StackTrace(\n//     stackTrace = List(\n//       monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//       monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//       monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//       monix.eval.Task.map(Task.scala:2027),\n//       effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n//       effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:26),\n//       effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//       effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//       effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//       repl.MdocSession$App0$.<clinit>(can-catch.md:19),\n//       repl.MdocSession$App.<init>(can-catch.md:5),\n//       repl.MdocSession$.app(can-catch.md:3),\n//       mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//       scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//       scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//       scala.Console$.withErr(Console.scala:193),\n//       mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//       scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//       scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//       scala.Console$.withOut(Console.scala:164),\n//       mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//       mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//       mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:104)\n//     )\n//   )\n// )\n\nimport monix.execution.Scheduler.Implicits.global\nfa.runSyncUnsafe()\n// res55: Either[Throwable, Nothing] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"})})}),(0,c.jsx)(o.A,{value:"future",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.monix.Catching._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@83ab7cb[Running, parallelism = 4, size = 3, active = 0, running = 0, steals = 2, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@6723e9e\n\nval fa = catchNonFatal(\n    Future(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: Future[Either[Throwable, Nothing]] = Future(Success(Left(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res57: Either[Throwable, Nothing] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"})})}),(0,c.jsxs)(o.A,{value:"id",children:[(0,c.jsx)(a.admonition,{title:"NOTE",type:"caution",children:(0,c.jsxs)(a.p,{children:["Use of ",(0,c.jsx)(a.code,{children:"Id"})," is not recommended as ",(0,c.jsx)(a.code,{children:"Id"})," means having no ",(0,c.jsx)(a.code,{children:"Effect"}),". Use it only for some special cases like testing."]})}),(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:"import cats._\n\nimport effectie.monix.Catching._\n\ncatchNonFatal[Id](\n    throw new RuntimeException(\"Something's wrong!\")\n  )(identity)\n// res59: Id[Either[Throwable, Nothing]] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"})})]})]}),"\n",(0,c.jsx)(a.h3,{id:"happy-path-example-3",children:"Happy Path Example"}),"\n",(0,c.jsxs)(i.A,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],children:[(0,c.jsx)(o.A,{value:"task",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Task](1)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = FlatMap(\n//     source = FlatMap(\n//       source = Now(value = 101),\n//       f = <function1>,\n//       trace = StackTrace(\n//         stackTrace = List(\n//           monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//           monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//           monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//           monix.eval.Task.flatMap(Task.scala:1792),\n//           monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//           monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//           cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//           cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//           cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//           repl.MdocSession$App60$$anonfun$doSomething$37.apply(can-catch.md:1733),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//           effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//           effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//           effectie.monix.Catching$CurriedCanCatch2$.apply$extension(Catching.scala:45),\n//           repl.MdocSession$App60$.doSomething(can-catch.md:1736),\n//           repl.MdocSession$App60$.<clinit>(can-catch.md:1739),\n//           repl.MdocSession$App58$.<clinit>(can-catch.md:1687),\n//           repl.MdocSession$App56$.<clinit>(can-catch.md:1670),\n//           repl.MdocSession$App54$.<clinit>(can-catch.md:1638),\n//           repl.MdocSession$App52$.<clinit>(can-catch.md:1615),\n//           repl.MdocSession$App50$.<clinit>(can-catch.md:1541),\n//           repl.MdocSession$App48$.<clinit>(can-catch.md:1445),\n//           repl.MdocSession$App46$.<clinit>(can-catch.md:1362),\n//           repl.MdocSession$App44$.<clinit>(can-catch.md:1288),\n//           repl.MdocSession$App42$.<clinit>(can-catch.md:1192),\n//           repl.MdocSession$App40$.<clinit>(can-catch.md:1109),\n//           repl.MdocSession$App38$.<clinit>(can-catch.md:1086),\n//           repl.MdocSession$App36$.<clinit>(can-catch.md:1051),\n//           repl.MdocSession$App34$.<clinit>(can-catch.md:1025),\n//           repl.MdocSession$App32$.<clinit>(can-catch.md:957),\n//           repl.MdocSession$App30$.<clinit>(can-catch.md:867),\n//           repl.MdocSession$App28$.<clinit>(can-catch.md:790),\n//           repl.MdocSession$App26$.<clinit>(can-catch.md:722),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Right(value = 202)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n'})})}),(0,c.jsx)(o.A,{value:"future",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(arg: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(202)\n// Result is 202\n'})})}),(0,c.jsxs)(o.A,{value:"id",children:[(0,c.jsx)(a.admonition,{title:"NOTE",type:"caution",children:(0,c.jsxs)(a.p,{children:["Use of ",(0,c.jsx)(a.code,{children:"Id"})," is not recommended as ",(0,c.jsx)(a.code,{children:"Id"})," means having no ",(0,c.jsx)(a.code,{children:"Effect"}),". Use it only for some special cases like testing."]})}),(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 202)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n'})})]})]}),"\n",(0,c.jsx)(a.h3,{id:"unhappy-path-example-3",children:"Unhappy Path Example"}),"\n",(0,c.jsxs)(i.A,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],children:[(0,c.jsx)(o.A,{value:"task",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Task](-101)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = FlatMap(\n//     source = FlatMap(\n//       source = Now(value = -1),\n//       f = <function1>,\n//       trace = StackTrace(\n//         stackTrace = List(\n//           monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//           monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//           monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//           monix.eval.Task.flatMap(Task.scala:1792),\n//           monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//           monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//           cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//           cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//           cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//           repl.MdocSession$App66$$anonfun$doSomething$43.apply(can-catch.md:1946),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//           effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//           effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//           effectie.monix.Catching$CurriedCanCatch2$.apply$extension(Catching.scala:45),\n//           repl.MdocSession$App66$.doSomething(can-catch.md:1949),\n//           repl.MdocSession$App66$.<clinit>(can-catch.md:1952),\n//           repl.MdocSession$App64$.<clinit>(can-catch.md:1900),\n//           repl.MdocSession$App62$.<clinit>(can-catch.md:1840),\n//           repl.MdocSession$App60$.<clinit>(can-catch.md:1756),\n//           repl.MdocSession$App58$.<clinit>(can-catch.md:1687),\n//           repl.MdocSession$App56$.<clinit>(can-catch.md:1670),\n//           repl.MdocSession$App54$.<clinit>(can-catch.md:1638),\n//           repl.MdocSession$App52$.<clinit>(can-catch.md:1615),\n//           repl.MdocSession$App50$.<clinit>(can-catch.md:1541),\n//           repl.MdocSession$App48$.<clinit>(can-catch.md:1445),\n//           repl.MdocSession$App46$.<clinit>(can-catch.md:1362),\n//           repl.MdocSession$App44$.<clinit>(can-catch.md:1288),\n//           repl.MdocSession$App42$.<clinit>(can-catch.md:1192),\n//           repl.MdocSession$App40$.<clinit>(can-catch.md:1109),\n//           repl.MdocSession$App38$.<clinit>(can-catch.md:1086),\n//           repl.MdocSession$App36$.<clinit>(can-catch.md:1051),\n//           repl.MdocSession$App34$.<clinit>(can-catch.md:1025),\n//           repl.MdocSession$App32$.<clinit>(can-catch.md:957),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n'})})}),(0,c.jsx)(o.A,{value:"future",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](-101)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1])\n'})})}),(0,c.jsxs)(o.A,{value:"id",children:[(0,c.jsx)(a.admonition,{title:"NOTE",type:"caution",children:(0,c.jsxs)(a.p,{children:["Use of ",(0,c.jsx)(a.code,{children:"Id"})," is not recommended as ",(0,c.jsx)(a.code,{children:"Id"})," means having no ",(0,c.jsx)(a.code,{children:"Effect"}),". Use it only for some special cases like testing."]})}),(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-101)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n'})})]})]}),"\n",(0,c.jsx)(a.h2,{id:"catchingcatchnonfataleither",children:"Catching.catchNonFatalEither"}),"\n",(0,c.jsxs)(a.p,{children:[(0,c.jsx)(a.code,{children:"Catching.catchNonFatalEither"})," provides a convenient way to use ",(0,c.jsx)(a.code,{children:"CanCatch"}),"\nto catch ",(0,c.jsx)(a.code,{children:"NonFatal"})," ",(0,c.jsx)(a.code,{children:"Throwable"})," from ",(0,c.jsx)(a.code,{children:"F[Either[A, B]]"})," and returns ",(0,c.jsx)(a.code,{children:"F[Either[A, B]]"}),"."]}),"\n",(0,c.jsx)(a.h3,{id:"how-to-use-4",children:"How to Use"}),"\n",(0,c.jsxs)(i.A,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],children:[(0,c.jsx)(o.A,{value:"task",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:"import monix.eval._\n\nimport effectie.monix.Catching._\n\nval fa = catchNonFatalEither(\n    Task((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int])\n  )(identity)\n// fa: Task[Either[Throwable, Int]] = Map(\n//   source = Map(\n//     source = FlatMap(\n//       source = Eval(thunk = <function0>),\n//       f = <function1>,\n//       trace = null\n//     ),\n//     f = effectie.CanCatch$$Lambda$12442/0x0000000803504040@374d1476,\n//     trace = StackTrace(\n//       stackTrace = List(\n//         monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//         monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//         monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//         monix.eval.Task.map(Task.scala:2027),\n//         effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n//         effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:26),\n//         effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//         effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//         effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//         repl.MdocSession$App0$.<clinit>(can-catch.md:19),\n//         repl.MdocSession$App.<init>(can-catch.md:5),\n//         repl.MdocSession$.app(can-catch.md:3),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withErr(Console.scala:193),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withOut(Console.scala:164),\n//         mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//         mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//         mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:104)\n//       )\n//     )\n//   ),\n//   f = effectie.CanCatch$$Lambda$12457/0x000000080351d840@66deb104,\n//   trace = StackTrace(\n//     stackTrace = List(\n//       monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//       monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//       monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//       monix.eval.Task.map(Task.scala:2027),\n//       effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nfa.runSyncUnsafe()\n// res73: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"})})}),(0,c.jsx)(o.A,{value:"future",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.monix.Catching._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@3b87c6fb[Running, parallelism = 4, size = 4, active = 0, running = 0, steals = 3, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@2c9689db\n\nval fa = catchNonFatalEither(\n    Future((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int])\n  )(identity)\n// fa: Future[Either[Throwable, Int]] = Future(Success(Left(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res75: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"})})}),(0,c.jsxs)(o.A,{value:"id",children:[(0,c.jsx)(a.admonition,{title:"NOTE",type:"caution",children:(0,c.jsxs)(a.p,{children:["Use of ",(0,c.jsx)(a.code,{children:"Id"})," is not recommended as ",(0,c.jsx)(a.code,{children:"Id"})," means having no ",(0,c.jsx)(a.code,{children:"Effect"}),". Use it only for some special cases like testing."]})}),(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:"import cats._\n\nimport effectie.monix.Catching._\n\ncatchNonFatalEither[Id](\n    (throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]\n  )(identity)\n// res77: Id[Either[Throwable, Int]] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"})})]})]}),"\n",(0,c.jsx)(a.h3,{id:"happy-path-example-4",children:"Happy Path Example"}),"\n",(0,c.jsxs)(i.A,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],children:[(0,c.jsx)(o.A,{value:"task",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Task](1)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = FlatMap(\n//       source = FlatMap(\n//         source = Now(value = Right(value = 100)),\n//         f = <function1>,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//             monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//             monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//             monix.eval.Task.flatMap(Task.scala:1792),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//             cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//             cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//             cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//             repl.MdocSession$App78$$anonfun$doSomething$49.apply(can-catch.md:2241),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             effectie.monix.Catching$CurriedCanCatchEither2$.apply$extension(Catching.scala:74),\n//             repl.MdocSession$App78$.doSomething(can-catch.md:2244),\n//             repl.MdocSession$App78$.<clinit>(can-catch.md:2247),\n//             repl.MdocSession$App76$.<clinit>(can-catch.md:2184),\n//             repl.MdocSession$App74$.<clinit>(can-catch.md:2167),\n//             repl.MdocSession$App72$.<clinit>(can-catch.md:2135),\n//             repl.MdocSession$App70$.<clinit>(can-catch.md:2112),\n//             repl.MdocSession$App68$.<clinit>(can-catch.md:2052),\n//             repl.MdocSession$App66$.<clinit>(can-catch.md:1969),\n//             repl.MdocSession$App64$.<clinit>(can-catch.md:1900),\n//             repl.MdocSession$App62$.<clinit>(can-catch.md:1840),\n//             repl.MdocSession$App60$.<clinit>(can-catch.md:1756),\n//             repl.MdocSession$App58$.<clinit>(can-catch.md:1687),\n//             repl.MdocSession$App56$.<clinit>(can-catch.md:1670),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Right(value = 200)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'})})}),(0,c.jsx)(o.A,{value:"future",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n  \n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(200)\n// Result is 200\n'})})}),(0,c.jsxs)(o.A,{value:"id",children:[(0,c.jsx)(a.admonition,{title:"NOTE",type:"caution",children:(0,c.jsxs)(a.p,{children:["Use of ",(0,c.jsx)(a.code,{children:"Id"})," is not recommended as ",(0,c.jsx)(a.code,{children:"Id"})," means having no ",(0,c.jsx)(a.code,{children:"Effect"}),". Use it only for some special cases like testing."]})}),(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 200)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'})})]})]}),"\n",(0,c.jsx)(a.h3,{id:"unhappy-path-example-4",children:"Unhappy Path Example"}),"\n",(0,c.jsxs)(i.A,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],children:[(0,c.jsx)(o.A,{value:"task",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Task](-1)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = FlatMap(\n//       source = FlatMap(\n//         source = Now(value = Right(value = -100)),\n//         f = <function1>,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//             monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//             monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//             monix.eval.Task.flatMap(Task.scala:1792),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//             cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//             cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//             cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//             repl.MdocSession$App84$$anonfun$doSomething$55.apply(can-catch.md:2485),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             effectie.monix.Catching$CurriedCanCatchEither2$.apply$extension(Catching.scala:74),\n//             repl.MdocSession$App84$.doSomething(can-catch.md:2488),\n//             repl.MdocSession$App84$.<clinit>(can-catch.md:2491),\n//             repl.MdocSession$App82$.<clinit>(can-catch.md:2428),\n//             repl.MdocSession$App80$.<clinit>(can-catch.md:2357),\n//             repl.MdocSession$App78$.<clinit>(can-catch.md:2264),\n//             repl.MdocSession$App76$.<clinit>(can-catch.md:2184),\n//             repl.MdocSession$App74$.<clinit>(can-catch.md:2167),\n//             repl.MdocSession$App72$.<clinit>(can-catch.md:2135),\n//             repl.MdocSession$App70$.<clinit>(can-catch.md:2112),\n//             repl.MdocSession$App68$.<clinit>(can-catch.md:2052),\n//             repl.MdocSession$App66$.<clinit>(can-catch.md:1969),\n//             repl.MdocSession$App64$.<clinit>(can-catch.md:1900),\n//             repl.MdocSession$App62$.<clinit>(can-catch.md:1840),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'})})}),(0,c.jsx)(o.A,{value:"future",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'})})}),(0,c.jsxs)(o.A,{value:"id",children:[(0,c.jsx)(a.admonition,{title:"NOTE",type:"caution",children:(0,c.jsxs)(a.p,{children:["Use of ",(0,c.jsx)(a.code,{children:"Id"})," is not recommended as ",(0,c.jsx)(a.code,{children:"Id"})," means having no ",(0,c.jsx)(a.code,{children:"Effect"}),". Use it only for some special cases like testing."]})}),(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-1)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'})})]})]}),"\n",(0,c.jsx)(a.h2,{id:"catchingcatchnonfataleithert",children:"Catching.catchNonFatalEitherT"}),"\n",(0,c.jsxs)(a.p,{children:[(0,c.jsx)(a.code,{children:"Catching.catchNonFatalEitherT"})," provides a convenient way to use ",(0,c.jsx)(a.code,{children:"CanCatch"}),"\nto catch ",(0,c.jsx)(a.code,{children:"NonFatal"})," ",(0,c.jsx)(a.code,{children:"Throwable"})," from ",(0,c.jsx)(a.code,{children:"EitherT[F, A, B]"})," and returns ",(0,c.jsx)(a.code,{children:"EitherT[F, A, B]"}),"."]}),"\n",(0,c.jsx)(a.h3,{id:"how-to-use-5",children:"How to Use"}),"\n",(0,c.jsxs)(i.A,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],children:[(0,c.jsx)(o.A,{value:"task",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:"import cats.data.EitherT\nimport monix.eval._\n\nimport effectie.monix.Catching._\n\nval fa = catchNonFatalEitherT[Task](\n    EitherT(Task((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]))\n  )(identity)\n// fa: EitherT[Task, Throwable, Int] = EitherT(\n//   value = Map(\n//     source = Map(\n//       source = FlatMap(\n//         source = Eval(thunk = <function0>),\n//         f = <function1>,\n//         trace = null\n//       ),\n//       f = effectie.CanCatch$$Lambda$12442/0x0000000803504040@73a7d69b,\n//       trace = StackTrace(\n//         stackTrace = List(\n//           monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//           monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//           monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//           monix.eval.Task.map(Task.scala:2027),\n//           effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n//           effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:26),\n//           effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//           effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//           repl.MdocSession$App0$.<clinit>(can-catch.md:19),\n//           repl.MdocSession$App.<init>(can-catch.md:5),\n//           repl.MdocSession$.app(can-catch.md:3),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withErr(Console.scala:193),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withOut(Console.scala:164),\n//           mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//           mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//           mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:104)\n//         )\n//       )\n//     ),\n//     f = effectie.CanCatch$$Lambda$12457/0x000000080351d840@60e21f7a,\n//     trace = StackTrace(\n//       stackTrace = List(\n//         monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nfa.value.runSyncUnsafe()\n// res91: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"})})}),(0,c.jsx)(o.A,{value:"future",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats.data.EitherT\n\nimport effectie.monix.Catching._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@6557bd83[Running, parallelism = 4, size = 4, active = 0, running = 0, steals = 3, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@7d9738a3\n\nval fa = catchNonFatalEitherT[Future](\n    EitherT(Future((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]))\n  )(identity)\n// fa: EitherT[Future, Throwable, Int] = EitherT(\n//   value = Future(Success(Left(java.lang.RuntimeException: Something's wrong!)))\n// )\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa.value, Duration.Inf)\n// res93: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"})})}),(0,c.jsxs)(o.A,{value:"id",children:[(0,c.jsx)(a.admonition,{title:"NOTE",type:"caution",children:(0,c.jsxs)(a.p,{children:["Use of ",(0,c.jsx)(a.code,{children:"Id"})," is not recommended as ",(0,c.jsx)(a.code,{children:"Id"})," means having no ",(0,c.jsx)(a.code,{children:"Effect"}),". Use it only for some special cases like testing."]})}),(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:"import cats._\nimport cats.data.EitherT\n\nimport effectie.monix.Catching._\n\nval fa = catchNonFatalEitherT[Id](\n    EitherT((throw new RuntimeException(\"Something's wrong!\")): Id[Either[Throwable, Int]])\n  )(identity)\n// fa: EitherT[Id, Throwable, Int] = EitherT(\n//   value = Left(value = java.lang.RuntimeException: Something's wrong!)\n// )\n\nfa.value\n// res95: Id[Either[Throwable, Int]] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"})})]})]}),"\n",(0,c.jsx)(a.h3,{id:"happy-path-example-5",children:"Happy Path Example"}),"\n",(0,c.jsxs)(i.A,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],children:[(0,c.jsx)(o.A,{value:"task",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.syntax.all._\nimport cats.data.EitherT\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\nimport effectie.monix.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[Task](1)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = FlatMap(\n//       source = FlatMap(\n//         source = Now(value = Right(value = 100)),\n//         f = cats.data.EitherT$$Lambda$12459/0x000000080351c840@30c92a84,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//             monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//             monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//             monix.eval.Task.flatMap(Task.scala:1792),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//             cats.data.EitherT.flatMap(EitherT.scala:403),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1169),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1169),\n//             effectie.CanCatch.$anonfun$catchNonFatalEitherT$1(CanCatch.scala:28),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEitherT(CanCatch.scala:28),\n//             effectie.CanCatch.catchNonFatalEitherT$(CanCatch.scala:27),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEitherT(CanCatch.scala:26),\n//             repl.MdocSession$App42$.doSomething(can-catch.md:1172),\n//             repl.MdocSession$App42$.<clinit>(can-catch.md:1175),\n//             repl.MdocSession$App40$.<clinit>(can-catch.md:1109),\n//             repl.MdocSession$App38$.<clinit>(can-catch.md:1086),\n//             repl.MdocSession$App36$.<clinit>(can-catch.md:1051),\n//             repl.MdocSession$App34$.<clinit>(can-catch.md:1025),\n//             repl.MdocSession$App32$.<clinit>(can-catch.md:957),\n//             repl.MdocSession$App30$.<clinit>(can-catch.md:867),\n//             repl.MdocSession$App28$.<clinit>(can-catch.md:790),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Right(value = 200)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'})})}),(0,c.jsx)(o.A,{value:"future",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\nimport effectie.monix.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).value\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(200)\n// Result is 200\n'})})}),(0,c.jsxs)(o.A,{value:"id",children:[(0,c.jsx)(a.admonition,{title:"NOTE",type:"caution",children:(0,c.jsxs)(a.p,{children:["Use of ",(0,c.jsx)(a.code,{children:"Id"})," is not recommended as ",(0,c.jsx)(a.code,{children:"Id"})," means having no ",(0,c.jsx)(a.code,{children:"Effect"}),". Use it only for some special cases like testing."]})}),(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\nimport effectie.monix.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 200)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'})})]})]}),"\n",(0,c.jsx)(a.h3,{id:"unhappy-path-example-5",children:"Unhappy Path Example"}),"\n",(0,c.jsxs)(i.A,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],children:[(0,c.jsx)(o.A,{value:"task",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\nimport effectie.monix.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[Task](-1)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = FlatMap(\n//       source = FlatMap(\n//         source = Now(value = Right(value = -100)),\n//         f = cats.data.EitherT$$Lambda$12459/0x000000080351c840@40a0fa28,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//             monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//             monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//             monix.eval.Task.flatMap(Task.scala:1792),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//             cats.data.EitherT.flatMap(EitherT.scala:403),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1169),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1169),\n//             effectie.CanCatch.$anonfun$catchNonFatalEitherT$1(CanCatch.scala:28),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEitherT(CanCatch.scala:28),\n//             effectie.CanCatch.catchNonFatalEitherT$(CanCatch.scala:27),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEitherT(CanCatch.scala:26),\n//             repl.MdocSession$App42$.doSomething(can-catch.md:1172),\n//             repl.MdocSession$App42$.<clinit>(can-catch.md:1175),\n//             repl.MdocSession$App40$.<clinit>(can-catch.md:1109),\n//             repl.MdocSession$App38$.<clinit>(can-catch.md:1086),\n//             repl.MdocSession$App36$.<clinit>(can-catch.md:1051),\n//             repl.MdocSession$App34$.<clinit>(can-catch.md:1025),\n//             repl.MdocSession$App32$.<clinit>(can-catch.md:957),\n//             repl.MdocSession$App30$.<clinit>(can-catch.md:867),\n//             repl.MdocSession$App28$.<clinit>(can-catch.md:790),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'})})}),(0,c.jsx)(o.A,{value:"future",children:(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\nimport effectie.monix.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).value\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'})})}),(0,c.jsxs)(o.A,{value:"id",children:[(0,c.jsx)(a.admonition,{title:"NOTE",type:"caution",children:(0,c.jsxs)(a.p,{children:["Use of ",(0,c.jsx)(a.code,{children:"Id"})," is not recommended as ",(0,c.jsx)(a.code,{children:"Id"})," means having no ",(0,c.jsx)(a.code,{children:"Effect"}),". Use it only for some special cases like testing."]})}),(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-scala",children:'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\nimport effectie.monix.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[Id](-1)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'})})]})]})]})}function m(n={}){const{wrapper:a}={...(0,r.R)(),...n.components};return a?(0,c.jsx)(a,{...n,children:(0,c.jsx)(u,{...n})}):u(n)}},5537:(n,a,e)=>{e.d(a,{A:()=>v});var t=e(6540),c=e(4164),r=e(5627),i=e(6347),o=e(372),l=e(604),s=e(1861),h=e(8749);function d(n){return t.Children.toArray(n).filter(n=>"\n"!==n).map(n=>{if(!n||(0,t.isValidElement)(n)&&function(n){const{props:a}=n;return!!a&&"object"==typeof a&&"value"in a}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function u(n){const{values:a,children:e}=n;return(0,t.useMemo)(()=>{const n=a??function(n){return d(n).map(({props:{value:n,label:a,attributes:e,default:t}})=>({value:n,label:a,attributes:e,default:t}))}(e);return function(n){const a=(0,s.XI)(n,(n,a)=>n.value===a.value);if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map(n=>n.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n},[a,e])}function m({value:n,tabValues:a}){return a.some(a=>a.value===n)}function p({queryString:n=!1,groupId:a}){const e=(0,i.W6)(),c=function({queryString:n=!1,groupId:a}){if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,l.aZ)(c),(0,t.useCallback)(n=>{if(!c)return;const a=new URLSearchParams(e.location.search);a.set(c,n),e.replace({...e.location,search:a.toString()})},[c,e])]}function f(n){const{defaultValue:a,queryString:e=!1,groupId:c}=n,r=u(n),[i,l]=(0,t.useState)(()=>function({defaultValue:n,tabValues:a}){if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map(n=>n.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const e=a.find(n=>n.default)??a[0];if(!e)throw new Error("Unexpected error: 0 tabValues");return e.value}({defaultValue:a,tabValues:r})),[s,d]=p({queryString:e,groupId:c}),[f,x]=function({groupId:n}){const a=function(n){return n?`docusaurus.tab.${n}`:null}(n),[e,c]=(0,h.Dv)(a);return[e,(0,t.useCallback)(n=>{a&&c.set(n)},[a,c])]}({groupId:c}),E=(()=>{const n=s??f;return m({value:n,tabValues:r})?n:null})();(0,o.A)(()=>{E&&l(E)},[E]);return{selectedValue:i,selectValue:(0,t.useCallback)(n=>{if(!m({value:n,tabValues:r}))throw new Error(`Can't select invalid tab value=${n}`);l(n),d(n),x(n)},[d,x,r]),tabValues:r}}var x=e(9136);const E={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=e(4848);function $({className:n,block:a,selectedValue:e,selectValue:t,tabValues:i}){const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.a_)(),s=n=>{const a=n.currentTarget,c=o.indexOf(a),r=i[c].value;r!==e&&(l(a),t(r))},h=n=>{let a=null;switch(n.key){case"Enter":s(n);break;case"ArrowRight":{const e=o.indexOf(n.currentTarget)+1;a=o[e]??o[0];break}case"ArrowLeft":{const e=o.indexOf(n.currentTarget)-1;a=o[e]??o[o.length-1];break}}a?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.A)("tabs",{"tabs--block":a},n),children:i.map(({value:n,label:a,attributes:t})=>(0,b.jsx)("li",{role:"tab",tabIndex:e===n?0:-1,"aria-selected":e===n,ref:n=>{o.push(n)},onKeyDown:h,onClick:s,...t,className:(0,c.A)("tabs__item",E.tabItem,t?.className,{"tabs__item--active":e===n}),children:a??n},n))})}function g({lazy:n,children:a,selectedValue:e}){const r=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const n=r.find(n=>n.props.value===e);return n?(0,t.cloneElement)(n,{className:(0,c.A)("margin-top--md",n.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:r.map((n,a)=>(0,t.cloneElement)(n,{key:a,hidden:n.props.value!==e}))})}function C(n){const a=f(n);return(0,b.jsxs)("div",{className:(0,c.A)("tabs-container",E.tabList),children:[(0,b.jsx)($,{...a,...n}),(0,b.jsx)(g,{...a,...n})]})}function v(n){const a=(0,x.A)();return(0,b.jsx)(C,{...n,children:d(n.children)},String(a))}},8453:(n,a,e)=>{e.d(a,{R:()=>i,x:()=>o});var t=e(6540);const c={},r=t.createContext(c);function i(n){const a=t.useContext(r);return t.useMemo(function(){return"function"==typeof n?n(a):{...a,...n}},[a,n])}function o(n){let a;return a=n.disableParentContext?"function"==typeof n.components?n.components(c):n.components||c:i(n.components),t.createElement(r.Provider,{value:a},n.children)}},9329:(n,a,e)=>{e.d(a,{A:()=>i});e(6540);var t=e(4164);const c={tabItem:"tabItem_Ymn6"};var r=e(4848);function i({children:n,hidden:a,className:e}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,t.A)(c.tabItem,e),hidden:a,children:n})}}}]);