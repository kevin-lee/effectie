"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5376],{3905:(e,n,a)=>{a.d(n,{Zo:()=>u,kt:()=>f});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=t.createContext({}),s=function(e){var n=t.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},u=function(e){var n=s(e.components);return t.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(a),m=r,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return a?t.createElement(f,l(l({ref:n},u),{},{components:a})):t.createElement(f,l({ref:n},u))}));function f(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5162:(e,n,a)=>{a.d(n,{Z:()=>l});var t=a(7294),r=a(6010);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:n,hidden:a,className:l}=e;return t.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:a},n)}},4866:(e,n,a)=>{a.d(n,{Z:()=>w});var t=a(7462),r=a(7294),o=a(6010),l=a(2466),i=a(6550),c=a(1980),s=a(7392),u=a(12);function d(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:r}}=e;return{value:n,label:a,attributes:t,default:r}}))}function p(e){const{values:n,children:a}=e;return(0,r.useMemo)((()=>{const e=n??d(a);return function(e){const n=(0,s.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function m(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:a}=e;const t=(0,i.k6)(),o=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,c._X)(o),(0,r.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(t.location.search);n.set(o,e),t.replace({...t.location,search:n.toString()})}),[o,t])]}function h(e){const{defaultValue:n,queryString:a=!1,groupId:t}=e,o=p(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:o}))),[c,s]=f({queryString:a,groupId:t}),[d,h]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,o]=(0,u.Nk)(a);return[t,(0,r.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:t}),b=(()=>{const e=c??d;return m({value:e,tabValues:o})?e:null})();(0,r.useEffect)((()=>{b&&i(b)}),[b]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),s(e),h(e)}),[s,h,o]),tabValues:o}}var b=a(2389);const E={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:n,block:a,selectedValue:i,selectValue:c,tabValues:s}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),p=e=>{const n=e.currentTarget,a=u.indexOf(n),t=s[a].value;t!==i&&(d(n),c(t))},m=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;n=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;n=u[a]??u[u.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},n)},s.map((e=>{let{value:n,label:a,attributes:l}=e;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:e=>u.push(e),onKeyDown:m,onClick:p},l,{className:(0,o.Z)("tabs__item",E.tabItem,l?.className,{"tabs__item--active":i===n})}),a??n)})))}function g(e){let{lazy:n,children:a,selectedValue:t}=e;if(n){const e=a.find((e=>e.props.value===t));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},a.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t}))))}function v(e){const n=h(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",E.tabList)},r.createElement(y,(0,t.Z)({},e,n)),r.createElement(g,(0,t.Z)({},e,n)))}function w(e){const n=(0,b.Z)();return r.createElement(v,(0,t.Z)({key:String(n)},e))}},883:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var t=a(7462),r=(a(7294),a(3905)),o=a(4866),l=a(5162);const i={sidebar_position:2,id:"can-catch",title:"CanCatch"},c=void 0,s={unversionedId:"docs/scalaz-effect/can-catch",id:"version-v1/docs/scalaz-effect/can-catch",title:"CanCatch",description:"CanCatch",source:"@site/versioned_docs/version-v1/docs/scalaz-effect/can-catch.md",sourceDirName:"docs/scalaz-effect",slug:"/docs/scalaz-effect/can-catch",permalink:"/docs/v1/docs/scalaz-effect/can-catch",draft:!1,tags:[],version:"v1",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"can-catch",title:"CanCatch"},sidebar:"version-v1/docs",previous:{title:"Fx",permalink:"/docs/v1/docs/scalaz-effect/fx"},next:{title:"OptionTSupport",permalink:"/docs/v1/docs/scalaz-effect/optiont-support"}},u={},d=[{value:"CanCatch",id:"cancatch",level:2},{value:"CanCatch.catchNonFatal",id:"cancatchcatchnonfatal",level:2},{value:"How to Use",id:"how-to-use",level:3},{value:"Happy Path Example",id:"happy-path-example",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example",level:3},{value:"CanCatch.catchNonFatalEither",id:"cancatchcatchnonfataleither",level:2},{value:"How to Use",id:"how-to-use-1",level:3},{value:"Happy Path Example",id:"happy-path-example-1",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-1",level:3},{value:"CanCatch.catchNonFatalEitherT",id:"cancatchcatchnonfataleithert",level:2},{value:"How to Use",id:"how-to-use-2",level:3},{value:"Happy Path Example",id:"happy-path-example-2",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-2",level:3},{value:"Catching",id:"catching",level:2},{value:"Catching.catchNonFatal",id:"catchingcatchnonfatal",level:2},{value:"How to Use",id:"how-to-use-3",level:3},{value:"Happy Path Example",id:"happy-path-example-3",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-3",level:3},{value:"Catching.catchNonFatalEither",id:"catchingcatchnonfataleither",level:2},{value:"How to Use",id:"how-to-use-4",level:3},{value:"Happy Path Example",id:"happy-path-example-4",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-4",level:3},{value:"Catching.catchNonFatalEitherT",id:"catchingcatchnonfataleithert",level:2},{value:"How to Use",id:"how-to-use-5",level:3},{value:"Happy Path Example",id:"happy-path-example-5",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-5",level:3}],p={toc:d},m="wrapper";function f(e){let{components:n,...a}=e;return(0,r.kt)(m,(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"cancatch"},"CanCatch"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch")," lets you catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"F[A]"),"\nand turned it into ",(0,r.kt)("inlineCode",{parentName:"p"},"F[Either[Throwable, A]]"),". It takes a function from ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable"),"\nto your own error type, yet it can handle only ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ones as already mentioned."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"trait CanCatch[F[_]] {\n  def catchNonFatal[A, B](fb: => F[B])(f: Throwable => A): F[A \\/ B]\n\n  def catchNonFatalEither[A, B](fab: => F[A \\/ B])(f: Throwable => A): F[A \\/ B]\n\n  def catchNonFatalEitherT[A, B](fab: => EitherT[F, A, B])(f: Throwable => A): EitherT[F, A, B]\n}\n")),(0,r.kt)("h2",{id:"cancatchcatchnonfatal"},"CanCatch.catchNonFatal"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch[F].catchNonFatal[A, B]")," lets you catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"F[B]"),"\nand returns ",(0,r.kt)("inlineCode",{parentName:"p"},"F[A \\/ B]"),"."),(0,r.kt)("h3",{id:"how-to-use"},"How to Use"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz.effect._\n\nimport effectie.scalaz._\n\nval fa = CanCatch[IO].catchNonFatal(\n    IO(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: IO[scalaz.\\/[Throwable, Nothing]] = scalaz.effect.IO$$anon$7@76c70c63\n\nfa.unsafePerformIO()\n// res1: scalaz.\\/[Throwable, Nothing] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.scalaz._\n\nval executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@8673adf[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@73cceafc\n\nval fa = CanCatch[Future].catchNonFatal(\n    Future(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: Future[scalaz.\\/[Throwable, Nothing]] = Future(Success(-\\/(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res3: scalaz.\\/[Throwable, Nothing] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\n\nCanCatch[Id].catchNonFatal(\n    throw new RuntimeException(\"Something's wrong!\")\n  )(identity)\n// res5: Throwable \\/ Nothing = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,r.kt)("h3",{id:"happy-path-example"},"Happy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@3a1a75d9\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = \\/-(b = 202)\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n'))),(0,r.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    CanCatch[F].catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(arg: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// \\/-(202)\n// Result is 202\n'))),(0,r.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[MyError \\/ Int] = \\/-(b = 202)\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n')))),(0,r.kt)("h3",{id:"unhappy-path-example"},"Unhappy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](-101)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@74f0d2ed\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n'))),(0,r.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    CanCatch[F].catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](-101)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// -\\/(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1])\n'))),(0,r.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-101)\n// fa: Id[MyError \\/ Int] = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n')))),(0,r.kt)("h2",{id:"cancatchcatchnonfataleither"},"CanCatch.catchNonFatalEither"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch[F].catchNonFatalEither[A, B]")," lets you catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"F[A \\/ B]"),"\nand returns ",(0,r.kt)("inlineCode",{parentName:"p"},"F[A \\/ B]"),"."),(0,r.kt)("h3",{id:"how-to-use-1"},"How to Use"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\n\nval fa = CanCatch[IO].catchNonFatalEither(\n    IO((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int)\n  )(identity)\n// fa: IO[Throwable \\/ Int] = scalaz.effect.IO$$anon$7@4570bf6e\n\nfa.unsafePerformIO()\n// res19: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\n\nimport effectie.scalaz._\n\nval executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@51ff3636[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@3822256d\n\nval fa = CanCatch[Future].catchNonFatalEither(\n    Future((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int)\n  )(identity)\n// fa: Future[Throwable \\/ Int] = Future(Success(-\\/(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res21: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\n\nCanCatch[Id].catchNonFatalEither(\n    (throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int\n  )(identity)\n// res23: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,r.kt)("h3",{id:"happy-path-example-1"},"Happy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@4a37ef3e\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = \\/-(b = 200)\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),(0,r.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n  \n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    CanCatch[F].catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// \\/-(200)\n// Result is 200\n'))),(0,r.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[MyError \\/ Int] = \\/-(b = 200)\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),(0,r.kt)("h3",{id:"unhappy-path-example-1"},"Unhappy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](-1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@afcb2d9\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    CanCatch[F].catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// -\\/(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-1)\n// fa: Id[MyError \\/ Int] = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))),(0,r.kt)("h2",{id:"cancatchcatchnonfataleithert"},"CanCatch.catchNonFatalEitherT"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch[F].catchNonFatalEitherT[A, B]")," lets you catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"EitherT[F, A, B]"),"\nand returns ",(0,r.kt)("inlineCode",{parentName:"p"},"EitherT[F, A, B]"),"."),(0,r.kt)("h3",{id:"how-to-use-2"},"How to Use"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\n\nval fa = CanCatch[IO].catchNonFatalEitherT(\n    EitherT(IO((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int))\n  )(identity)\n// fa: EitherT[IO, Throwable, Int] = EitherT(\n//   run = scalaz.effect.IO$$anon$7@229a6b36\n// )\n\nfa.run.unsafePerformIO()\n// res37: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport effectie.scalaz._\n\nval executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@b3a3b45[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@7e016b03\n\nval fa = CanCatch[Future].catchNonFatalEitherT(\n    EitherT(Future((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int))\n  )(identity)\n// fa: EitherT[Future, Throwable, Int] = EitherT(\n//   run = Future(Success(-\\/(java.lang.RuntimeException: Something's wrong!)))\n// )\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa.run, Duration.Inf)\n// res39: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\n\nval fa = CanCatch[Id].catchNonFatalEitherT(\n    EitherT((throw new RuntimeException(\"Something's wrong!\")): Id[Throwable \\/ Int])\n  )(identity)\n// fa: EitherT[Id, Throwable, Int] = EitherT(\n//   run = -\\/(a = java.lang.RuntimeException: Something's wrong!)\n// )\n\nfa.run\n// res41: Id[Throwable \\/ Int] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,r.kt)("h3",{id:"happy-path-example-2"},"Happy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[IO](1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@11047460\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = \\/-(b = 200)\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),(0,r.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    CanCatch[F].catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).run\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// \\/-(200)\n// Result is 200\n'))),(0,r.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[Id](1)\n// fa: Id[MyError \\/ Int] = \\/-(b = 200)\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),(0,r.kt)("h3",{id:"unhappy-path-example-2"},"Unhappy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.EitherTSupport._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[IO](-1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@60b66ead\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    CanCatch[F].catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).run\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// -\\/(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[Id](-1)\n// fa: Id[MyError \\/ Int] = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))),(0,r.kt)("h2",{id:"catching"},"Catching"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Catching.catchNonFatal")," provides a convenient way to use ",(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch")," to catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"F[A]"),"\nand turned it into ",(0,r.kt)("inlineCode",{parentName:"p"},"F[Either[Throwable, A]]"),". Just like ",(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch"),", it takes a function from ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable"),"\nto your own error type, yet it can handle only ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ones as already mentioned."),(0,r.kt)("h2",{id:"catchingcatchnonfatal"},"Catching.catchNonFatal"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"catchNonFatal")," lets you catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"F[B]"),"\nand returns ",(0,r.kt)("inlineCode",{parentName:"p"},"F[A \\/ B]"),"."),(0,r.kt)("h3",{id:"how-to-use-3"},"How to Use"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz.effect._\n\nimport effectie.scalaz.Catching._\n\nval fa = catchNonFatal(\n    IO((throw new RuntimeException(\"Something's wrong!\")): Int)\n  )(identity)\n// fa: IO[scalaz.\\/[Throwable, Int]] = scalaz.effect.IO$$anon$7@3a8c91ed\n\nfa.unsafePerformIO()\n// res55: scalaz.\\/[Throwable, Int] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.scalaz.Catching._\n\nval executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@4fa0accc[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@7d35662c\n\nval fa = catchNonFatal(\n    Future(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: Future[scalaz.\\/[Throwable, Nothing]] = Future(Success(-\\/(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res57: scalaz.\\/[Throwable, Nothing] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz.Catching._\n\ncatchNonFatal[Id](\n    throw new RuntimeException(\"Something's wrong!\")\n  )(identity)\n// res59: Id[Throwable \\/ Nothing] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,r.kt)("h3",{id:"happy-path-example-3"},"Happy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@2e25bc21\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = \\/-(b = 202)\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n'))),(0,r.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(arg: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// \\/-(202)\n// Result is 202\n'))),(0,r.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[MyError \\/ Int] = \\/-(b = 202)\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n')))),(0,r.kt)("h3",{id:"unhappy-path-example-3"},"Unhappy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](-101)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@70f843f1\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n'))),(0,r.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](-101)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// -\\/(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1])\n'))),(0,r.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-101)\n// fa: Id[MyError \\/ Int] = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n')))),(0,r.kt)("h2",{id:"catchingcatchnonfataleither"},"Catching.catchNonFatalEither"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Catching.catchNonFatalEither")," provides a convenient way to use ",(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch"),"\nto catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"F[A \\/ B]")," and returns ",(0,r.kt)("inlineCode",{parentName:"p"},"F[A \\/ B]"),"."),(0,r.kt)("h3",{id:"how-to-use-4"},"How to Use"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz.Catching._\n\nval fa = catchNonFatalEither(\n    IO((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int)\n  )(identity)\n// fa: IO[Throwable \\/ Int] = scalaz.effect.IO$$anon$7@3af457ee\n\nfa.unsafePerformIO()\n// res73: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\n\nimport effectie.scalaz.Catching._\n\nval executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@6ca6529a[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@6f612f9b\n\nval fa = catchNonFatalEither(\n    Future((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int)\n  )(identity)\n// fa: Future[Throwable \\/ Int] = Future(Success(-\\/(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res75: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz.Catching._\n\ncatchNonFatalEither[Id](\n    (throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int\n  )(identity)\n// res77: Id[Throwable \\/ Int] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,r.kt)("h3",{id:"happy-path-example-4"},"Happy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@5db40e4d\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = \\/-(b = 200)\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),(0,r.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n  \n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// \\/-(200)\n// Result is 200\n'))),(0,r.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[MyError \\/ Int] = \\/-(b = 200)\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),(0,r.kt)("h3",{id:"unhappy-path-example-4"},"Unhappy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](-1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@45676932\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// -\\/(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-1)\n// fa: Id[MyError \\/ Int] = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))),(0,r.kt)("h2",{id:"catchingcatchnonfataleithert"},"Catching.catchNonFatalEitherT"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Catching.catchNonFatalEitherT")," provides a convenient way to use ",(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch"),"\nto catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"EitherT[F, A, B]")," and returns ",(0,r.kt)("inlineCode",{parentName:"p"},"EitherT[F, A, B]"),"."),(0,r.kt)("h3",{id:"how-to-use-5"},"How to Use"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz.Catching._\n\nval fa = catchNonFatalEitherT[IO](\n    EitherT(IO((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int))\n  )(identity)\n// fa: EitherT[IO, Throwable, Int] = EitherT(\n//   run = scalaz.effect.IO$$anon$7@1b0bc186\n// )\n\nfa.run.unsafePerformIO()\n// res91: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\n\nimport effectie.scalaz.Catching._\n\nval executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@7d70388b[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@4b870e\n\nval fa = catchNonFatalEitherT[Future](\n    EitherT(Future((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int))\n  )(identity)\n// fa: EitherT[Future, Throwable, Int] = EitherT(\n//   run = Future(Success(-\\/(java.lang.RuntimeException: Something's wrong!)))\n// )\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa.run, Duration.Inf)\n// res93: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz.Catching._\n\nval fa = catchNonFatalEitherT[Id](\n    EitherT((throw new RuntimeException(\"Something's wrong!\")): Id[Throwable \\/ Int])\n  )(identity)\n// fa: EitherT[Id, Throwable, Int] = EitherT(\n//   run = -\\/(a = java.lang.RuntimeException: Something's wrong!)\n// )\n\nfa.run\n// res95: Id[Throwable \\/ Int] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,r.kt)("h3",{id:"happy-path-example-5"},"Happy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[IO](1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@7e9b50cc\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = \\/-(b = 200)\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),(0,r.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.scalaz.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).run\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// \\/-(200)\n// Result is 200\n'))),(0,r.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[Id](1)\n// fa: Id[MyError \\/ Int] = \\/-(b = 200)\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),(0,r.kt)("h3",{id:"unhappy-path-example-5"},"Unhappy Path Example"),(0,r.kt)(o.Z,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"io",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[IO](-1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@3b59b968\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(l.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.scalaz.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).run\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// -\\/(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(l.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[Id](-1)\n// fa: Id[MyError \\/ Int] = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))))}f.isMDXComponent=!0}}]);