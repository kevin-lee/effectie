"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[459],{3905:(n,a,e)=>{e.d(a,{Zo:()=>h,kt:()=>d});var t=e(7294);function r(n,a,e){return a in n?Object.defineProperty(n,a,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[a]=e,n}function o(n,a){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(n,a).enumerable}))),e.push.apply(e,t)}return e}function i(n){for(var a=1;a<arguments.length;a++){var e=null!=arguments[a]?arguments[a]:{};a%2?o(Object(e),!0).forEach((function(a){r(n,a,e[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(a){Object.defineProperty(n,a,Object.getOwnPropertyDescriptor(e,a))}))}return n}function c(n,a){if(null==n)return{};var e,t,r=function(n,a){if(null==n)return{};var e,t,r={},o=Object.keys(n);for(t=0;t<o.length;t++)e=o[t],a.indexOf(e)>=0||(r[e]=n[e]);return r}(n,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(t=0;t<o.length;t++)e=o[t],a.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}return r}var l=t.createContext({}),s=function(n){var a=t.useContext(l),e=a;return n&&(e="function"==typeof n?n(a):i(i({},a),n)),e},h=function(n){var a=s(n.components);return t.createElement(l.Provider,{value:a},n.children)},p={inlineCode:"code",wrapper:function(n){var a=n.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(n,a){var e=n.components,r=n.mdxType,o=n.originalType,l=n.parentName,h=c(n,["components","mdxType","originalType","parentName"]),m=s(e),d=r,u=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return e?t.createElement(u,i(i({ref:a},h),{},{components:e})):t.createElement(u,i({ref:a},h))}));function d(n,a){var e=arguments,r=a&&a.mdxType;if("string"==typeof n||r){var o=e.length,i=new Array(o);i[0]=m;var c={};for(var l in a)hasOwnProperty.call(a,l)&&(c[l]=a[l]);c.originalType=n,c.mdxType="string"==typeof n?n:r,i[1]=c;for(var s=2;s<o;s++)i[s]=e[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,e)}m.displayName="MDXCreateElement"},5162:(n,a,e)=>{e.d(a,{Z:()=>i});var t=e(7294),r=e(6010);const o="tabItem_Ymn6";function i(n){let{children:a,hidden:e,className:i}=n;return t.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:e},a)}},5488:(n,a,e)=>{e.d(a,{Z:()=>d});var t=e(7462),r=e(7294),o=e(6010),i=e(2389),c=e(7392),l=e(7094),s=e(2466);const h="tabList__CuJ",p="tabItem_LNqP";function m(n){var a,e;const{lazy:i,block:m,defaultValue:d,values:u,groupId:f,className:C}=n,b=r.Children.map(n.children,(n=>{if((0,r.isValidElement)(n)&&"value"in n.props)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),E=null!=u?u:b.map((n=>{let{props:{value:a,label:e,attributes:t}}=n;return{value:a,label:e,attributes:t}})),g=(0,c.l)(E,((n,a)=>n.value===a.value));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((n=>n.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const $=null===d?d:null!=(a=null!=d?d:null==(e=b.find((n=>n.props.default)))?void 0:e.props.value)?a:b[0].props.value;if(null!==$&&!E.some((n=>n.value===$)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+$+'" but none of its children has the corresponding value. Available values are: '+E.map((n=>n.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:T,setTabGroupChoices:x}=(0,l.U)(),[v,y]=(0,r.useState)($),F=[],{blockElementScrollPositionUntilNextRender:w}=(0,s.o5)();if(null!=f){const n=T[f];null!=n&&n!==v&&E.some((a=>a.value===n))&&y(n)}const M=n=>{const a=n.currentTarget,e=F.indexOf(a),t=E[e].value;t!==v&&(w(a),y(t),null!=f&&x(f,String(t)))},k=n=>{var a;let e=null;switch(n.key){case"ArrowRight":{var t;const a=F.indexOf(n.currentTarget)+1;e=null!=(t=F[a])?t:F[0];break}case"ArrowLeft":{var r;const a=F.indexOf(n.currentTarget)-1;e=null!=(r=F[a])?r:F[F.length-1];break}}null==(a=e)||a.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",h)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":m},C)},E.map((n=>{let{value:a,label:e,attributes:i}=n;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:v===a?0:-1,"aria-selected":v===a,key:a,ref:n=>F.push(n),onKeyDown:k,onFocus:M,onClick:M},i,{className:(0,o.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":v===a})}),null!=e?e:a)}))),i?(0,r.cloneElement)(b.filter((n=>n.props.value===v))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map(((n,a)=>(0,r.cloneElement)(n,{key:a,hidden:n.props.value!==v})))))}function d(n){const a=(0,i.Z)();return r.createElement(m,(0,t.Z)({key:String(a)},n))}},1723:(n,a,e)=>{e.r(a),e.d(a,{assets:()=>h,contentTitle:()=>l,default:()=>d,frontMatter:()=>c,metadata:()=>s,toc:()=>p});var t=e(7462),r=(e(7294),e(3905)),o=e(5488),i=e(5162);const c={id:"can-catch",title:"CanCatch"},l=void 0,s={unversionedId:"monix/can-catch",id:"monix/can-catch",title:"CanCatch",description:"CanCatch",source:"@site/../generated-docs/target/mdoc/monix/can-catch.md",sourceDirName:"monix",slug:"/monix/can-catch",permalink:"/docs/monix/can-catch",draft:!1,tags:[],version:"current",frontMatter:{id:"can-catch",title:"CanCatch"},sidebar:"someSidebar",previous:{title:"Fx",permalink:"/docs/monix/fx"},next:{title:"CanHandleError",permalink:"/docs/monix/can-handle-error"}},h={},p=[{value:"CanCatch",id:"cancatch",level:2},{value:"CanCatch.catchNonFatal",id:"cancatchcatchnonfatal",level:2},{value:"How to Use",id:"how-to-use",level:3},{value:"Happy Path Example",id:"happy-path-example",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example",level:3},{value:"CanCatch.catchNonFatalEither",id:"cancatchcatchnonfataleither",level:2},{value:"How to Use",id:"how-to-use-1",level:3},{value:"Happy Path Example",id:"happy-path-example-1",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-1",level:3},{value:"CanCatch.catchNonFatalEitherT",id:"cancatchcatchnonfataleithert",level:2},{value:"How to Use",id:"how-to-use-2",level:3},{value:"Happy Path Example",id:"happy-path-example-2",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-2",level:3},{value:"Catching",id:"catching",level:2},{value:"Catching.catchNonFatal",id:"catchingcatchnonfatal",level:2},{value:"How to Use",id:"how-to-use-3",level:3},{value:"Happy Path Example",id:"happy-path-example-3",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-3",level:3},{value:"Catching.catchNonFatalEither",id:"catchingcatchnonfataleither",level:2},{value:"How to Use",id:"how-to-use-4",level:3},{value:"Happy Path Example",id:"happy-path-example-4",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-4",level:3},{value:"Catching.catchNonFatalEitherT",id:"catchingcatchnonfataleithert",level:2},{value:"How to Use",id:"how-to-use-5",level:3},{value:"Happy Path Example",id:"happy-path-example-5",level:3},{value:"Unhappy Path Example",id:"unhappy-path-example-5",level:3}],m={toc:p};function d(n){let{components:a,...e}=n;return(0,r.kt)("wrapper",(0,t.Z)({},m,e,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"cancatch"},"CanCatch"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch")," lets you catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"F[A]"),"\nand turned it into ",(0,r.kt)("inlineCode",{parentName:"p"},"F[Either[Throwable, A]]"),". It takes a function from ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable"),"\nto your own error type, yet it can handle only ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ones as already mentioned."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"trait CanCatch[F[_]] {\n  def catchNonFatal[A, B](fb: => F[B])(f: Throwable => A): F[Either[A, B]]\n\n  def catchNonFatalEither[A, B](fab: => F[Either[A, B]])(f: Throwable => A): F[Either[A, B]]\n\n  def catchNonFatalEitherT[A, B](fab: => EitherT[F, A, B])(f: Throwable => A): EitherT[F, A, B]\n}\n")),(0,r.kt)("h2",{id:"cancatchcatchnonfatal"},"CanCatch.catchNonFatal"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch[F].catchNonFatal[A, B]")," lets you catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"F[B]"),"\nand returns ",(0,r.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]"),"."),(0,r.kt)("h3",{id:"how-to-use"},"How to Use"),(0,r.kt)(o.Z,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"task",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import monix.eval._\n\nimport effectie.monix._\n\nval fa = CanCatch[Task].catchNonFatal(\n    Task(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: Task[Either[Throwable, Nothing]] = Map(\n//   source = FlatMap(\n//     source = Eval(thunk = <function0>),\n//     f = <function1>,\n//     trace = null\n//   ),\n//   f = effectie.CanCatch$$Lambda$9867/0x0000000102c43840@7729e1d6,\n//   trace = StackTrace(\n//     stackTrace = List(\n//       monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//       monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//       monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//       monix.eval.Task.map(Task.scala:2027),\n//       effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n//       effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:26),\n//       effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//       effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//       effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//       repl.MdocSession$App0$.<clinit>(can-catch.md:19),\n//       repl.MdocSession$App.<init>(can-catch.md:5),\n//       repl.MdocSession$.app(can-catch.md:3),\n//       mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//       scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//       scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//       scala.Console$.withErr(Console.scala:193),\n//       mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//       scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//       scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//       scala.Console$.withOut(Console.scala:164),\n//       mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//       mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//       mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:104)\n//     )\n//   )\n// )\n\nimport monix.execution.Scheduler.Implicits.global\nfa.runSyncUnsafe()\n// res1: Either[Throwable, Nothing] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.monix._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@55a03a5e[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@7a25d5f0\n\nval fa = CanCatch[Future].catchNonFatal(\n    Future(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: Future[Either[Throwable, Nothing]] = Future(Success(Left(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res3: Either[Throwable, Nothing] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import cats._\n\nimport effectie.monix._\n\nCanCatch[Id].catchNonFatal(\n    throw new RuntimeException(\"Something's wrong!\")\n  )(identity)\n// res5: Either[Throwable, Nothing] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,r.kt)("h3",{id:"happy-path-example"},"Happy Path Example"),(0,r.kt)(o.Z,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"task",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Task](1)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = FlatMap(\n//     source = FlatMap(\n//       source = Now(value = 101),\n//       f = <function1>,\n//       trace = StackTrace(\n//         stackTrace = List(\n//           monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//           monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//           monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//           monix.eval.Task.flatMap(Task.scala:1792),\n//           monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//           monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//           cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//           cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//           cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//           repl.MdocSession$App6$$anonfun$doSomething$1.apply(can-catch.md:120),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//           effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//           effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//           repl.MdocSession$App6$.doSomething(can-catch.md:123),\n//           repl.MdocSession$App6$.<clinit>(can-catch.md:126),\n//           repl.MdocSession$App4$.<clinit>(can-catch.md:77),\n//           repl.MdocSession$App2$.<clinit>(can-catch.md:60),\n//           repl.MdocSession$App0$.<clinit>(can-catch.md:28),\n//           repl.MdocSession$App.<init>(can-catch.md:5),\n//           repl.MdocSession$.app(can-catch.md:3),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withErr(Console.scala:193),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withOut(Console.scala:164),\n//           mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//           mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(Markd...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Right(value = 202)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(arg: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(202)\n// Result is 202\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 202)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n')))),(0,r.kt)("h3",{id:"unhappy-path-example"},"Unhappy Path Example"),(0,r.kt)(o.Z,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"task",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Task](-101)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = FlatMap(\n//     source = FlatMap(\n//       source = Now(value = -1),\n//       f = <function1>,\n//       trace = StackTrace(\n//         stackTrace = List(\n//           monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//           monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//           monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//           monix.eval.Task.flatMap(Task.scala:1792),\n//           monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//           monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//           cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//           cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//           cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//           repl.MdocSession$App12$$anonfun$doSomething$7.apply(can-catch.md:323),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//           effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//           effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//           repl.MdocSession$App12$.doSomething(can-catch.md:326),\n//           repl.MdocSession$App12$.<clinit>(can-catch.md:329),\n//           repl.MdocSession$App10$.<clinit>(can-catch.md:280),\n//           repl.MdocSession$App8$.<clinit>(can-catch.md:223),\n//           repl.MdocSession$App6$.<clinit>(can-catch.md:143),\n//           repl.MdocSession$App4$.<clinit>(can-catch.md:77),\n//           repl.MdocSession$App2$.<clinit>(can-catch.md:60),\n//           repl.MdocSession$App0$.<clinit>(can-catch.md:28),\n//           repl.MdocSession$App.<init>(can-catch.md:5),\n//           repl.MdocSession$.app(can-catch.md:3),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withErr(Console.scala:193),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withOut(Console.scala:164),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](-101)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1])\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-101)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n')))),(0,r.kt)("h2",{id:"cancatchcatchnonfataleither"},"CanCatch.catchNonFatalEither"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch[F].catchNonFatalEither[A, B]")," lets you catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]"),"\nand returns ",(0,r.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]"),"."),(0,r.kt)("h3",{id:"how-to-use-1"},"How to Use"),(0,r.kt)(o.Z,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"task",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import monix.eval._\n\nimport effectie.monix._\n\nval fa = CanCatch[Task].catchNonFatalEither(\n    Task((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int])\n  )(identity)\n// fa: Task[Either[Throwable, Int]] = Map(\n//   source = Map(\n//     source = FlatMap(\n//       source = Eval(thunk = <function0>),\n//       f = <function1>,\n//       trace = null\n//     ),\n//     f = effectie.CanCatch$$Lambda$9867/0x0000000102c43840@32a9bd7c,\n//     trace = StackTrace(\n//       stackTrace = List(\n//         monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//         monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//         monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//         monix.eval.Task.map(Task.scala:2027),\n//         effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n//         effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:26),\n//         effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//         effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//         effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//         repl.MdocSession$App0$.<clinit>(can-catch.md:19),\n//         repl.MdocSession$App.<init>(can-catch.md:5),\n//         repl.MdocSession$.app(can-catch.md:3),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withErr(Console.scala:193),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withOut(Console.scala:164),\n//         mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//         mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//         mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:104)\n//       )\n//     )\n//   ),\n//   f = effectie.CanCatch$$Lambda$9886/0x0000000102c4d840@ab6cdae,\n//   trace = StackTrace(\n//     stackTrace = List(\n//       monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//       monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//       monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//       monix.eval.Task.map(Task.scala:2027),\n//       effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nfa.runSyncUnsafe()\n// res19: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.monix._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@5e10746c[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@aceb00b\n\nval fa = CanCatch[Future].catchNonFatalEither(\n    Future((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int])\n  )(identity)\n// fa: Future[Either[Throwable, Int]] = Future(Success(Left(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res21: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import cats._\n\nimport effectie.monix._\n\nCanCatch[Id].catchNonFatalEither(\n    (throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]\n  )(identity)\n// res23: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,r.kt)("h3",{id:"happy-path-example-1"},"Happy Path Example"),(0,r.kt)(o.Z,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"task",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Task](1)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = FlatMap(\n//       source = FlatMap(\n//         source = Now(value = Right(value = 100)),\n//         f = <function1>,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//             monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//             monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//             monix.eval.Task.flatMap(Task.scala:1792),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//             cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//             cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//             cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//             repl.MdocSession$App24$$anonfun$doSomething$13.apply(can-catch.md:609),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             repl.MdocSession$App24$.doSomething(can-catch.md:612),\n//             repl.MdocSession$App24$.<clinit>(can-catch.md:615),\n//             repl.MdocSession$App22$.<clinit>(can-catch.md:555),\n//             repl.MdocSession$App20$.<clinit>(can-catch.md:538),\n//             repl.MdocSession$App18$.<clinit>(can-catch.md:506),\n//             repl.MdocSession$App16$.<clinit>(can-catch.md:483),\n//             repl.MdocSession$App14$.<clinit>(can-catch.md:426),\n//             repl.MdocSession$App12$.<clinit>(can-catch.md:346),\n//             repl.MdocSession$App10$.<clinit>(can-catch.md:280),\n//             repl.MdocSession$App8$.<clinit>(can-catch.md:223),\n//             repl.MdocSession$App6$.<clinit>(can-catch.md:143),\n//             repl.MdocSession$App4$.<clinit>(can-catch.md:77),\n//             repl.MdocSession$App2$.<clinit>(can-catch.md:60),\n//             repl.MdocSession$App0$.<clinit>(can-catch.md:28),\n//             repl.MdocSession$App.<init>(can-catch.md:5),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Right(value = 200)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n  \n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(200)\n// Result is 200\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 200)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),(0,r.kt)("h3",{id:"unhappy-path-example-1"},"Unhappy Path Example"),(0,r.kt)(o.Z,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"task",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Task](-1)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = FlatMap(\n//       source = FlatMap(\n//         source = Now(value = Right(value = -100)),\n//         f = <function1>,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//             monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//             monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//             monix.eval.Task.flatMap(Task.scala:1792),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//             cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//             cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//             cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//             repl.MdocSession$App30$$anonfun$doSomething$19.apply(can-catch.md:844),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             repl.MdocSession$App30$.doSomething(can-catch.md:847),\n//             repl.MdocSession$App30$.<clinit>(can-catch.md:850),\n//             repl.MdocSession$App28$.<clinit>(can-catch.md:790),\n//             repl.MdocSession$App26$.<clinit>(can-catch.md:722),\n//             repl.MdocSession$App24$.<clinit>(can-catch.md:632),\n//             repl.MdocSession$App22$.<clinit>(can-catch.md:555),\n//             repl.MdocSession$App20$.<clinit>(can-catch.md:538),\n//             repl.MdocSession$App18$.<clinit>(can-catch.md:506),\n//             repl.MdocSession$App16$.<clinit>(can-catch.md:483),\n//             repl.MdocSession$App14$.<clinit>(can-catch.md:426),\n//             repl.MdocSession$App12$.<clinit>(can-catch.md:346),\n//             repl.MdocSession$App10$.<clinit>(can-catch.md:280),\n//             repl.MdocSession$App8$.<clinit>(can-catch.md:223),\n//             repl.MdocSession$App6$.<clinit>(can-catch.md:143),\n//             repl.MdocSession$App4$.<clinit>(can-catch.md:77),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-1)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))),(0,r.kt)("h2",{id:"cancatchcatchnonfataleithert"},"CanCatch.catchNonFatalEitherT"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch[F].catchNonFatalEitherT[A, B]")," lets you catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"EitherT[F, A, B]"),"\nand returns ",(0,r.kt)("inlineCode",{parentName:"p"},"EitherT[F, A, B]"),"."),(0,r.kt)("h3",{id:"how-to-use-2"},"How to Use"),(0,r.kt)(o.Z,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"task",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.data.EitherT\nimport monix.eval._\n\nimport effectie.monix._\n\nval fa = CanCatch[Task].catchNonFatalEitherT(\n    EitherT(Task((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]))\n  )(identity)\n// fa: EitherT[Task, Throwable, Int] = EitherT(\n//   value = Map(\n//     source = Map(\n//       source = FlatMap(\n//         source = Eval(thunk = <function0>),\n//         f = <function1>,\n//         trace = null\n//       ),\n//       f = effectie.CanCatch$$Lambda$9867/0x0000000102c43840@75f3be73,\n//       trace = StackTrace(\n//         stackTrace = List(\n//           monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//           monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//           monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//           monix.eval.Task.map(Task.scala:2027),\n//           effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n//           effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:26),\n//           effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//           effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//           repl.MdocSession$App0$.<clinit>(can-catch.md:19),\n//           repl.MdocSession$App.<init>(can-catch.md:5),\n//           repl.MdocSession$.app(can-catch.md:3),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withErr(Console.scala:193),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withOut(Console.scala:164),\n//           mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//           mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//           mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:104)\n//         )\n//       )\n//     ),\n//     f = effectie.CanCatch$$Lambda$9886/0x0000000102c4d840@4994c6de,\n//     trace = StackTrace(\n//       stackTrace = List(\n//         monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nfa.value.runSyncUnsafe()\n// res37: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats.data.EitherT\nimport effectie.monix._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@147a6894[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@6bcbccf8\n\nval fa = CanCatch[Future].catchNonFatalEitherT(\n    EitherT(Future((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]))\n  )(identity)\n// fa: EitherT[Future, Throwable, Int] = EitherT(\n//   value = Future(Success(Left(java.lang.RuntimeException: Something's wrong!)))\n// )\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa.value, Duration.Inf)\n// res39: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import cats._\nimport cats.data.EitherT\n\nimport effectie.monix._\n\nval fa = CanCatch[Id].catchNonFatalEitherT(\n    EitherT((throw new RuntimeException(\"Something's wrong!\")): Id[Either[Throwable, Int]])\n  )(identity)\n// fa: EitherT[Id, Throwable, Int] = EitherT(\n//   value = Left(value = java.lang.RuntimeException: Something's wrong!)\n// )\n\nfa.value\n// res41: Id[Either[Throwable, Int]] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,r.kt)("h3",{id:"happy-path-example-2"},"Happy Path Example"),(0,r.kt)(o.Z,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"task",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.data.EitherT\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[Task](1)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = FlatMap(\n//       source = FlatMap(\n//         source = Now(value = Right(value = 100)),\n//         f = cats.data.EitherT$$Lambda$9888/0x0000000102ca8040@3a3f7d4,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//             monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//             monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//             monix.eval.Task.flatMap(Task.scala:1792),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//             cats.data.EitherT.flatMap(EitherT.scala:403),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1169),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1169),\n//             effectie.CanCatch.$anonfun$catchNonFatalEitherT$1(CanCatch.scala:28),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEitherT(CanCatch.scala:28),\n//             effectie.CanCatch.catchNonFatalEitherT$(CanCatch.scala:27),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEitherT(CanCatch.scala:26),\n//             repl.MdocSession$App42$.doSomething(can-catch.md:1172),\n//             repl.MdocSession$App42$.<clinit>(can-catch.md:1175),\n//             repl.MdocSession$App40$.<clinit>(can-catch.md:1109),\n//             repl.MdocSession$App38$.<clinit>(can-catch.md:1086),\n//             repl.MdocSession$App36$.<clinit>(can-catch.md:1051),\n//             repl.MdocSession$App34$.<clinit>(can-catch.md:1025),\n//             repl.MdocSession$App32$.<clinit>(can-catch.md:957),\n//             repl.MdocSession$App30$.<clinit>(can-catch.md:867),\n//             repl.MdocSession$App28$.<clinit>(can-catch.md:790),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Right(value = 200)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).value\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(200)\n// Result is 200\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 200)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),(0,r.kt)("h3",{id:"unhappy-path-example-2"},"Unhappy Path Example"),(0,r.kt)(o.Z,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"task",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.EitherTSupport._\nimport effectie.monix.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[Task](-1)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = FlatMap(\n//       source = FlatMap(\n//         source = Now(value = Right(value = -100)),\n//         f = cats.data.EitherT$$Lambda$9888/0x0000000102ca8040@6cee7348,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//             monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//             monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//             monix.eval.Task.flatMap(Task.scala:1792),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//             cats.data.EitherT.flatMap(EitherT.scala:403),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1169),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1169),\n//             effectie.CanCatch.$anonfun$catchNonFatalEitherT$1(CanCatch.scala:28),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEitherT(CanCatch.scala:28),\n//             effectie.CanCatch.catchNonFatalEitherT$(CanCatch.scala:27),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEitherT(CanCatch.scala:26),\n//             repl.MdocSession$App42$.doSomething(can-catch.md:1172),\n//             repl.MdocSession$App42$.<clinit>(can-catch.md:1175),\n//             repl.MdocSession$App40$.<clinit>(can-catch.md:1109),\n//             repl.MdocSession$App38$.<clinit>(can-catch.md:1086),\n//             repl.MdocSession$App36$.<clinit>(can-catch.md:1051),\n//             repl.MdocSession$App34$.<clinit>(can-catch.md:1025),\n//             repl.MdocSession$App32$.<clinit>(can-catch.md:957),\n//             repl.MdocSession$App30$.<clinit>(can-catch.md:867),\n//             repl.MdocSession$App28$.<clinit>(can-catch.md:790),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    CanCatch[F].catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).value\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[Id](-1)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))),(0,r.kt)("h2",{id:"catching"},"Catching"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Catching.catchNonFatal")," provides a convenient way to use ",(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch")," to catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"F[A]"),"\nand turned it into ",(0,r.kt)("inlineCode",{parentName:"p"},"F[Either[Throwable, A]]"),". Just like ",(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch"),", it takes a function from ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable"),"\nto your own error type, yet it can handle only ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ones as already mentioned."),(0,r.kt)("h2",{id:"catchingcatchnonfatal"},"Catching.catchNonFatal"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"catchNonFatal")," lets you catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"F[B]"),"\nand returns ",(0,r.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]"),"."),(0,r.kt)("h3",{id:"how-to-use-3"},"How to Use"),(0,r.kt)(o.Z,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"task",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import monix.eval._\n\nimport effectie.monix.Catching._\n\nval fa = catchNonFatal(\n    Task(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: Task[Either[Throwable, Nothing]] = Map(\n//   source = FlatMap(\n//     source = Eval(thunk = <function0>),\n//     f = <function1>,\n//     trace = null\n//   ),\n//   f = effectie.CanCatch$$Lambda$9867/0x0000000102c43840@2b178889,\n//   trace = StackTrace(\n//     stackTrace = List(\n//       monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//       monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//       monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//       monix.eval.Task.map(Task.scala:2027),\n//       effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n//       effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:26),\n//       effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//       effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//       effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//       repl.MdocSession$App0$.<clinit>(can-catch.md:19),\n//       repl.MdocSession$App.<init>(can-catch.md:5),\n//       repl.MdocSession$.app(can-catch.md:3),\n//       mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//       scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//       scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//       scala.Console$.withErr(Console.scala:193),\n//       mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//       scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//       scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//       scala.Console$.withOut(Console.scala:164),\n//       mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//       mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//       mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:104)\n//     )\n//   )\n// )\n\nimport monix.execution.Scheduler.Implicits.global\nfa.runSyncUnsafe()\n// res55: Either[Throwable, Nothing] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.monix.Catching._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@1e0e3d1f[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@28f745d\n\nval fa = catchNonFatal(\n    Future(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: Future[Either[Throwable, Nothing]] = Future(Success(Left(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res57: Either[Throwable, Nothing] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import cats._\n\nimport effectie.monix.Catching._\n\ncatchNonFatal[Id](\n    throw new RuntimeException(\"Something's wrong!\")\n  )(identity)\n// res59: Id[Either[Throwable, Nothing]] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,r.kt)("h3",{id:"happy-path-example-3"},"Happy Path Example"),(0,r.kt)(o.Z,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"task",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Task](1)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = FlatMap(\n//     source = FlatMap(\n//       source = Now(value = 101),\n//       f = <function1>,\n//       trace = StackTrace(\n//         stackTrace = List(\n//           monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//           monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//           monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//           monix.eval.Task.flatMap(Task.scala:1792),\n//           monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//           monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//           cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//           cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//           cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//           repl.MdocSession$App60$$anonfun$doSomething$37.apply(can-catch.md:1733),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//           effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//           effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//           effectie.monix.Catching$CurriedCanCatch2$.apply$extension(Catching.scala:45),\n//           repl.MdocSession$App60$.doSomething(can-catch.md:1736),\n//           repl.MdocSession$App60$.<clinit>(can-catch.md:1739),\n//           repl.MdocSession$App58$.<clinit>(can-catch.md:1687),\n//           repl.MdocSession$App56$.<clinit>(can-catch.md:1670),\n//           repl.MdocSession$App54$.<clinit>(can-catch.md:1638),\n//           repl.MdocSession$App52$.<clinit>(can-catch.md:1615),\n//           repl.MdocSession$App50$.<clinit>(can-catch.md:1541),\n//           repl.MdocSession$App48$.<clinit>(can-catch.md:1445),\n//           repl.MdocSession$App46$.<clinit>(can-catch.md:1362),\n//           repl.MdocSession$App44$.<clinit>(can-catch.md:1288),\n//           repl.MdocSession$App42$.<clinit>(can-catch.md:1192),\n//           repl.MdocSession$App40$.<clinit>(can-catch.md:1109),\n//           repl.MdocSession$App38$.<clinit>(can-catch.md:1086),\n//           repl.MdocSession$App36$.<clinit>(can-catch.md:1051),\n//           repl.MdocSession$App34$.<clinit>(can-catch.md:1025),\n//           repl.MdocSession$App32$.<clinit>(can-catch.md:957),\n//           repl.MdocSession$App30$.<clinit>(can-catch.md:867),\n//           repl.MdocSession$App28$.<clinit>(can-catch.md:790),\n//           repl.MdocSession$App26$.<clinit>(can-catch.md:722),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Right(value = 202)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(arg: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(202)\n// Result is 202\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 202)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n')))),(0,r.kt)("h3",{id:"unhappy-path-example-3"},"Unhappy Path Example"),(0,r.kt)(o.Z,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"task",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Task](-101)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = FlatMap(\n//     source = FlatMap(\n//       source = Now(value = -1),\n//       f = <function1>,\n//       trace = StackTrace(\n//         stackTrace = List(\n//           monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//           monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//           monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//           monix.eval.Task.flatMap(Task.scala:1792),\n//           monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//           monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//           cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//           cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//           cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//           repl.MdocSession$App66$$anonfun$doSomething$43.apply(can-catch.md:1946),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//           effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//           effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//           effectie.monix.Catching$CurriedCanCatch2$.apply$extension(Catching.scala:45),\n//           repl.MdocSession$App66$.doSomething(can-catch.md:1949),\n//           repl.MdocSession$App66$.<clinit>(can-catch.md:1952),\n//           repl.MdocSession$App64$.<clinit>(can-catch.md:1900),\n//           repl.MdocSession$App62$.<clinit>(can-catch.md:1840),\n//           repl.MdocSession$App60$.<clinit>(can-catch.md:1756),\n//           repl.MdocSession$App58$.<clinit>(can-catch.md:1687),\n//           repl.MdocSession$App56$.<clinit>(can-catch.md:1670),\n//           repl.MdocSession$App54$.<clinit>(can-catch.md:1638),\n//           repl.MdocSession$App52$.<clinit>(can-catch.md:1615),\n//           repl.MdocSession$App50$.<clinit>(can-catch.md:1541),\n//           repl.MdocSession$App48$.<clinit>(can-catch.md:1445),\n//           repl.MdocSession$App46$.<clinit>(can-catch.md:1362),\n//           repl.MdocSession$App44$.<clinit>(can-catch.md:1288),\n//           repl.MdocSession$App42$.<clinit>(can-catch.md:1192),\n//           repl.MdocSession$App40$.<clinit>(can-catch.md:1109),\n//           repl.MdocSession$App38$.<clinit>(can-catch.md:1086),\n//           repl.MdocSession$App36$.<clinit>(can-catch.md:1051),\n//           repl.MdocSession$App34$.<clinit>(can-catch.md:1025),\n//           repl.MdocSession$App32$.<clinit>(can-catch.md:957),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](-101)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1])\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-101)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n')))),(0,r.kt)("h2",{id:"catchingcatchnonfataleither"},"Catching.catchNonFatalEither"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Catching.catchNonFatalEither")," provides a convenient way to use ",(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch"),"\nto catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]")," and returns ",(0,r.kt)("inlineCode",{parentName:"p"},"F[Either[A, B]]"),"."),(0,r.kt)("h3",{id:"how-to-use-4"},"How to Use"),(0,r.kt)(o.Z,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"task",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import monix.eval._\n\nimport effectie.monix.Catching._\n\nval fa = catchNonFatalEither(\n    Task((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int])\n  )(identity)\n// fa: Task[Either[Throwable, Int]] = Map(\n//   source = Map(\n//     source = FlatMap(\n//       source = Eval(thunk = <function0>),\n//       f = <function1>,\n//       trace = null\n//     ),\n//     f = effectie.CanCatch$$Lambda$9867/0x0000000102c43840@1de42377,\n//     trace = StackTrace(\n//       stackTrace = List(\n//         monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//         monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//         monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//         monix.eval.Task.map(Task.scala:2027),\n//         effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n//         effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:26),\n//         effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//         effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//         effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//         repl.MdocSession$App0$.<clinit>(can-catch.md:19),\n//         repl.MdocSession$App.<init>(can-catch.md:5),\n//         repl.MdocSession$.app(can-catch.md:3),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withErr(Console.scala:193),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withOut(Console.scala:164),\n//         mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//         mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//         mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:104)\n//       )\n//     )\n//   ),\n//   f = effectie.CanCatch$$Lambda$9886/0x0000000102c4d840@aa0a382,\n//   trace = StackTrace(\n//     stackTrace = List(\n//       monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//       monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//       monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//       monix.eval.Task.map(Task.scala:2027),\n//       effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nfa.runSyncUnsafe()\n// res73: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.monix.Catching._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@6529910c[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@1cfd3c68\n\nval fa = catchNonFatalEither(\n    Future((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int])\n  )(identity)\n// fa: Future[Either[Throwable, Int]] = Future(Success(Left(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res75: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import cats._\n\nimport effectie.monix.Catching._\n\ncatchNonFatalEither[Id](\n    (throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]\n  )(identity)\n// res77: Id[Either[Throwable, Int]] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,r.kt)("h3",{id:"happy-path-example-4"},"Happy Path Example"),(0,r.kt)(o.Z,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"task",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Task](1)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = FlatMap(\n//       source = FlatMap(\n//         source = Now(value = Right(value = 100)),\n//         f = <function1>,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//             monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//             monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//             monix.eval.Task.flatMap(Task.scala:1792),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//             cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//             cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//             cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//             repl.MdocSession$App78$$anonfun$doSomething$49.apply(can-catch.md:2241),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             effectie.monix.Catching$CurriedCanCatchEither2$.apply$extension(Catching.scala:74),\n//             repl.MdocSession$App78$.doSomething(can-catch.md:2244),\n//             repl.MdocSession$App78$.<clinit>(can-catch.md:2247),\n//             repl.MdocSession$App76$.<clinit>(can-catch.md:2184),\n//             repl.MdocSession$App74$.<clinit>(can-catch.md:2167),\n//             repl.MdocSession$App72$.<clinit>(can-catch.md:2135),\n//             repl.MdocSession$App70$.<clinit>(can-catch.md:2112),\n//             repl.MdocSession$App68$.<clinit>(can-catch.md:2052),\n//             repl.MdocSession$App66$.<clinit>(can-catch.md:1969),\n//             repl.MdocSession$App64$.<clinit>(can-catch.md:1900),\n//             repl.MdocSession$App62$.<clinit>(can-catch.md:1840),\n//             repl.MdocSession$App60$.<clinit>(can-catch.md:1756),\n//             repl.MdocSession$App58$.<clinit>(can-catch.md:1687),\n//             repl.MdocSession$App56$.<clinit>(can-catch.md:1670),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Right(value = 200)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n  \n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(200)\n// Result is 200\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 200)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),(0,r.kt)("h3",{id:"unhappy-path-example-4"},"Unhappy Path Example"),(0,r.kt)(o.Z,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"task",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Task](-1)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = FlatMap(\n//       source = FlatMap(\n//         source = Now(value = Right(value = -100)),\n//         f = <function1>,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//             monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//             monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//             monix.eval.Task.flatMap(Task.scala:1792),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//             cats.FlatMap$Ops.flatMap(FlatMap.scala:229),\n//             cats.FlatMap$Ops.flatMap$(FlatMap.scala:229),\n//             cats.FlatMap$ToFlatMapOps$$anon$2.flatMap(FlatMap.scala:243),\n//             repl.MdocSession$App84$$anonfun$doSomething$55.apply(can-catch.md:2485),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             effectie.monix.Catching$CurriedCanCatchEither2$.apply$extension(Catching.scala:74),\n//             repl.MdocSession$App84$.doSomething(can-catch.md:2488),\n//             repl.MdocSession$App84$.<clinit>(can-catch.md:2491),\n//             repl.MdocSession$App82$.<clinit>(can-catch.md:2428),\n//             repl.MdocSession$App80$.<clinit>(can-catch.md:2357),\n//             repl.MdocSession$App78$.<clinit>(can-catch.md:2264),\n//             repl.MdocSession$App76$.<clinit>(can-catch.md:2184),\n//             repl.MdocSession$App74$.<clinit>(can-catch.md:2167),\n//             repl.MdocSession$App72$.<clinit>(can-catch.md:2135),\n//             repl.MdocSession$App70$.<clinit>(can-catch.md:2112),\n//             repl.MdocSession$App68$.<clinit>(can-catch.md:2052),\n//             repl.MdocSession$App66$.<clinit>(can-catch.md:1969),\n//             repl.MdocSession$App64$.<clinit>(can-catch.md:1900),\n//             repl.MdocSession$App62$.<clinit>(can-catch.md:1840),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-1)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))),(0,r.kt)("h2",{id:"catchingcatchnonfataleithert"},"Catching.catchNonFatalEitherT"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Catching.catchNonFatalEitherT")," provides a convenient way to use ",(0,r.kt)("inlineCode",{parentName:"p"},"CanCatch"),"\nto catch ",(0,r.kt)("inlineCode",{parentName:"p"},"NonFatal")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"EitherT[F, A, B]")," and returns ",(0,r.kt)("inlineCode",{parentName:"p"},"EitherT[F, A, B]"),"."),(0,r.kt)("h3",{id:"how-to-use-5"},"How to Use"),(0,r.kt)(o.Z,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"task",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.data.EitherT\nimport monix.eval._\n\nimport effectie.monix.Catching._\n\nval fa = catchNonFatalEitherT[Task](\n    EitherT(Task((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]))\n  )(identity)\n// fa: EitherT[Task, Throwable, Int] = EitherT(\n//   value = Map(\n//     source = Map(\n//       source = FlatMap(\n//         source = Eval(thunk = <function0>),\n//         f = <function1>,\n//         trace = null\n//       ),\n//       f = effectie.CanCatch$$Lambda$9867/0x0000000102c43840@20be5b1b,\n//       trace = StackTrace(\n//         stackTrace = List(\n//           monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//           monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//           monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//           monix.eval.Task.map(Task.scala:2027),\n//           effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:28),\n//           effectie.monix.CanCatch$CanCatchIo$.mapFa(CanCatch.scala:26),\n//           effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//           effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//           effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//           repl.MdocSession$App0$.<clinit>(can-catch.md:19),\n//           repl.MdocSession$App.<init>(can-catch.md:5),\n//           repl.MdocSession$.app(can-catch.md:3),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withErr(Console.scala:193),\n//           mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//           scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//           scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//           scala.Console$.withOut(Console.scala:164),\n//           mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//           mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//           mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:104)\n//         )\n//       )\n//     ),\n//     f = effectie.CanCatch$$Lambda$9886/0x0000000102c4d840@2f8d403d,\n//     trace = StackTrace(\n//       stackTrace = List(\n//         monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nfa.value.runSyncUnsafe()\n// res91: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats.data.EitherT\n\nimport effectie.monix.Catching._\n\nimplicit val executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@6851531[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@736e67f5\n\nval fa = catchNonFatalEitherT[Future](\n    EitherT(Future((throw new RuntimeException(\"Something's wrong!\")): Either[Throwable, Int]))\n  )(identity)\n// fa: EitherT[Future, Throwable, Int] = EitherT(\n//   value = Future(Success(Left(java.lang.RuntimeException: Something's wrong!)))\n// )\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa.value, Duration.Inf)\n// res93: Either[Throwable, Int] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n"))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import cats._\nimport cats.data.EitherT\n\nimport effectie.monix.Catching._\n\nval fa = catchNonFatalEitherT[Id](\n    EitherT((throw new RuntimeException(\"Something's wrong!\")): Id[Either[Throwable, Int]])\n  )(identity)\n// fa: EitherT[Id, Throwable, Int] = EitherT(\n//   value = Left(value = java.lang.RuntimeException: Something's wrong!)\n// )\n\nfa.value\n// res95: Id[Either[Throwable, Int]] = Left(\n//   value = java.lang.RuntimeException: Something's wrong!\n// )\n")))),(0,r.kt)("h3",{id:"happy-path-example-5"},"Happy Path Example"),(0,r.kt)(o.Z,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"task",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\nimport cats.data.EitherT\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\nimport effectie.monix.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[Task](1)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = FlatMap(\n//       source = FlatMap(\n//         source = Now(value = Right(value = 100)),\n//         f = cats.data.EitherT$$Lambda$9888/0x0000000102ca8040@215a8c00,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//             monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//             monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//             monix.eval.Task.flatMap(Task.scala:1792),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//             cats.data.EitherT.flatMap(EitherT.scala:403),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1169),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1169),\n//             effectie.CanCatch.$anonfun$catchNonFatalEitherT$1(CanCatch.scala:28),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEitherT(CanCatch.scala:28),\n//             effectie.CanCatch.catchNonFatalEitherT$(CanCatch.scala:27),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEitherT(CanCatch.scala:26),\n//             repl.MdocSession$App42$.doSomething(can-catch.md:1172),\n//             repl.MdocSession$App42$.<clinit>(can-catch.md:1175),\n//             repl.MdocSession$App40$.<clinit>(can-catch.md:1109),\n//             repl.MdocSession$App38$.<clinit>(can-catch.md:1086),\n//             repl.MdocSession$App36$.<clinit>(can-catch.md:1051),\n//             repl.MdocSession$App34$.<clinit>(can-catch.md:1025),\n//             repl.MdocSession$App32$.<clinit>(can-catch.md:957),\n//             repl.MdocSession$App30$.<clinit>(can-catch.md:867),\n//             repl.MdocSession$App28$.<clinit>(can-catch.md:790),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Right(value = 200)\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\nimport effectie.monix.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).value\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Right(200)\n// Result is 200\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\nimport effectie.monix.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[Id](1)\n// fa: Id[Either[MyError, Int]] = Right(value = 200)\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),(0,r.kt)("h3",{id:"unhappy-path-example-5"},"Unhappy Path Example"),(0,r.kt)(o.Z,{groupId:"monix",defaultValue:"task",values:[{label:"Task",value:"task"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"task",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\nimport effectie.monix.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[Task](-1)\n// fa: Task[Either[MyError, Int]] = Map(\n//   source = Map(\n//     source = FlatMap(\n//       source = FlatMap(\n//         source = Now(value = Right(value = -100)),\n//         f = cats.data.EitherT$$Lambda$9888/0x0000000102ca8040@6493acbe,\n//         trace = StackTrace(\n//           stackTrace = List(\n//             monix.eval.internal.TaskTracing$.buildFrame(TaskTracing.scala:52),\n//             monix.eval.internal.TaskTracing$.buildCachedFrame(TaskTracing.scala:43),\n//             monix.eval.internal.TaskTracing$.cached(TaskTracing.scala:38),\n//             monix.eval.Task.flatMap(Task.scala:1792),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:39),\n//             monix.eval.instances.CatsBaseForTask.flatMap(CatsBaseForTask.scala:33),\n//             cats.data.EitherT.flatMap(EitherT.scala:403),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1169),\n//             repl.MdocSession$App42$$anonfun$doSomething$25.apply(can-catch.md:1169),\n//             effectie.CanCatch.$anonfun$catchNonFatalEitherT$1(CanCatch.scala:28),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:31),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalThrowable(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatal(CanCatch.scala:22),\n//             effectie.CanCatch.catchNonFatal$(CanCatch.scala:21),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatal(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEither(CanCatch.scala:25),\n//             effectie.CanCatch.catchNonFatalEither$(CanCatch.scala:24),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEither(CanCatch.scala:26),\n//             effectie.CanCatch.catchNonFatalEitherT(CanCatch.scala:28),\n//             effectie.CanCatch.catchNonFatalEitherT$(CanCatch.scala:27),\n//             effectie.monix.CanCatch$CanCatchIo$.catchNonFatalEitherT(CanCatch.scala:26),\n//             repl.MdocSession$App42$.doSomething(can-catch.md:1172),\n//             repl.MdocSession$App42$.<clinit>(can-catch.md:1175),\n//             repl.MdocSession$App40$.<clinit>(can-catch.md:1109),\n//             repl.MdocSession$App38$.<clinit>(can-catch.md:1086),\n//             repl.MdocSession$App36$.<clinit>(can-catch.md:1051),\n//             repl.MdocSession$App34$.<clinit>(can-catch.md:1025),\n//             repl.MdocSession$App32$.<clinit>(can-catch.md:957),\n//             repl.MdocSession$App30$.<clinit>(can-catch.md:867),\n//             repl.MdocSession$App28$.<clinit>(can-catch.md:790),\n// ...\n\nimport monix.execution.Scheduler.Implicits.global\nval result = fa.runSyncUnsafe()\n// result: Either[MyError, Int] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(i.Z,{value:"future",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\nimport effectie.monix.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): Either[MyError, Int] =\n    if (n === 0)\n      MyError.divideByZero.asLeft[Int]\n    else\n      (100 / n).asRight[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: Fx: CanCatch: Monad](\n    n: Int\n  ): F[Either[MyError, Int]] =\n    catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).value\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case Right(b) =>\n          println(s"Result is $b")\n        case Left(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// Left(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),(0,r.kt)(i.Z,{value:"id",mdxType:"TabItem"},(0,r.kt)("admonition",{title:"NOTE",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," means having no ",(0,r.kt)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data.EitherT\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\nimport effectie.monix.Catching._\nimport effectie.monix.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): Either[MyError, Int] =\n  if (n === 0)\n    MyError.divideByZero.asLeft[Int]\n  else\n    (100 / n).asRight[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: Fx: CanCatch: Monad](\n  n: Int\n): F[Either[MyError, Int]] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).value\n\nval fa = doSomething[Id](-1)\n// fa: Id[Either[MyError, Int]] = Left(\n//   value = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case Right(b) =>\n    println(s"Result is $b")\n  case Left(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))))}d.isMDXComponent=!0}}]);