"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[731],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var f=r.createContext({}),l=function(e){var t=r.useContext(f),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(f.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,f=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=l(n),u=a,d=p["".concat(f,".").concat(u)]||p[u]||m[u]||o;return n?r.createElement(d,i(i({ref:t},s),{},{components:n})):r.createElement(d,i({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var f in t)hasOwnProperty.call(t,f)&&(c[f]=t[f]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3488:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1,id:"fx",title:"Fx"},i=void 0,c={unversionedId:"cats-effect2/fx",id:"cats-effect2/fx",title:"Fx",description:"Fx",source:"@site/../generated-docs/docs/cats-effect2/fx.md",sourceDirName:"cats-effect2",slug:"/cats-effect2/fx",permalink:"/docs/cats-effect2/fx",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"fx",title:"Fx"},sidebar:"latestSidebar",previous:{title:"For Cats Effect",permalink:"/docs/cats-effect2/"},next:{title:"CanCatch",permalink:"/docs/cats-effect2/can-catch"}},f={},l=[{value:"Fx",id:"fx",level:2},{value:"Syntax",id:"syntax",level:2}],s={toc:l};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"fx"},"Fx"),(0,a.kt)("p",null,"If you use Cats Effect and write tagless final code, and look for a generic way to construct ",(0,a.kt)("inlineCode",{parentName:"p"},"F[A]"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Fx")," can help you."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import effectie.core._\n\ntrait Something[F[_]] {\n  def get[A](a: => A): F[A]\n}\n\nobject Something {\n  def apply[F[_]: Something]: Something[F] =\n    implicitly[Something[F]]\n\n  implicit def something[F[_]: Fx]: Something[F] =\n    new SomethingF[F]\n\n  final class SomethingF[F[_]: Fx]\n    extends Something[F] {\n\n    def get[A](a: => A): F[A] =\n      Fx[F].effectOf(a)\n  }\n}\n\nimport cats.effect._\nimport effectie.instances.ce2.fx._\n\nval get1 = Something[IO].get(1)\n// get1: IO[Int] = Delay(\n//   thunk = <function0>,\n//   trace = StackTrace(\n// ...\n\nget1.unsafeRunSync()\n// res1: Int = 1\n")),(0,a.kt)("p",null,"If you feel it's too cumbersome to repeat ",(0,a.kt)("inlineCode",{parentName:"p"},"Fx[F].effectOf()"),", use ",(0,a.kt)("inlineCode",{parentName:"p"},"effectie.syntax.all._"),"."),(0,a.kt)("h2",{id:"syntax"},"Syntax"),(0,a.kt)("p",null,"If you're sick of repeating ",(0,a.kt)("inlineCode",{parentName:"p"},"Fx[F].effectOf()")," and looking for more convenient ways?, use ",(0,a.kt)("inlineCode",{parentName:"p"},"effectie.syntax")," instead."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import effectie.core._\nimport effectie.syntax.all._\n\ntrait Something[F[_]] {\n  def get[A](a: => A): F[A]\n}\n\nobject Something {\n  def apply[F[_]: Something]: Something[F] =\n    implicitly[Something[F]]\n\n  implicit def something[F[_]: Fx]: Something[F] =\n    new SomethingF[F]\n\n  final class SomethingF[F[_]: Fx]\n    extends Something[F] {\n\n    def get[A](a: => A): F[A] =\n      effectOf(a)\n      // No more Fx[F].effectOf(a)\n  }\n}\n\nimport cats.effect._\n\nimport effectie.instances.ce2.fx._\n\nval get1 = Something[IO].get(1)\n// get1: IO[Int] = Delay(\n//   thunk = <function0>,\n//   trace = StackTrace(\n// ...\n\nget1.unsafeRunSync()\n// res3: Int = 1\n")))}p.isMDXComponent=!0}}]);