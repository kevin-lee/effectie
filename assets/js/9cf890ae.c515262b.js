"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[881],{3905:(e,n,o)=>{o.d(n,{Zo:()=>f,kt:()=>d});var t=o(7294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function l(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function i(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?l(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function c(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)o=l[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)o=l[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var a=t.createContext({}),s=function(e){var n=t.useContext(a),o=n;return e&&(o="function"==typeof e?e(n):i(i({},n),e)),o},f=function(e){var n=s(e.components);return t.createElement(a.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,l=e.originalType,a=e.parentName,f=c(e,["components","mdxType","originalType","parentName"]),p=s(o),u=r,d=p["".concat(a,".").concat(u)]||p[u]||m[u]||l;return o?t.createElement(d,i(i({ref:n},f),{},{components:o})):t.createElement(d,i({ref:n},f))}));function d(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=o.length,i=new Array(l);i[0]=u;var c={};for(var a in n)hasOwnProperty.call(n,a)&&(c[a]=n[a]);c.originalType=e,c[p]="string"==typeof e?e:r,i[1]=c;for(var s=2;s<l;s++)i[s]=o[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,o)}u.displayName="MDXCreateElement"},1129:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>s});var t=o(7462),r=(o(7294),o(3905));const l={sidebar_position:7,id:"console-effect",title:"ConsoleEffect"},i=void 0,c={unversionedId:"docs/monix/console-effect",id:"version-v1/docs/monix/console-effect",title:"ConsoleEffect",description:"ConsoleEffect",source:"@site/versioned_docs/version-v1/docs/monix/console-effect.md",sourceDirName:"docs/monix",slug:"/docs/monix/console-effect",permalink:"/docs/v1/docs/monix/console-effect",draft:!1,tags:[],version:"v1",sidebarPosition:7,frontMatter:{sidebar_position:7,id:"console-effect",title:"ConsoleEffect"},sidebar:"version-v1/docs",previous:{title:"EitherTSupport",permalink:"/docs/v1/docs/monix/eithert-support"},next:{title:"For Scalaz Effect",permalink:"/docs/v1/docs/scalaz-effect/"}},a={},s=[{value:"ConsoleEffect",id:"consoleeffect",level:2},{value:"ConsoleEffectful",id:"consoleeffectful",level:2}],f={toc:s},p="wrapper";function m(e){let{components:n,...o}=e;return(0,r.kt)(p,(0,t.Z)({},f,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"consoleeffect"},"ConsoleEffect"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.monix._\nimport effectie.YesNo\n\ntrait Something[F[_]] {\n  def foo[A](): F[Unit]\n}\n\nobject Something {\n\n  def apply[F[_]: Something]: Something[F] =\n    implicitly[Something[F]]\n\n  implicit def something[F[_]: ConsoleEffect: Monad]: Something[F] =\n    new SomethingF[F]\n\n  final class SomethingF[F[_]: ConsoleEffect: Monad]\n    extends Something[F] {\n\n    def foo[A](): F[Unit] = for {\n      _ <- ConsoleEffect[F].putStrLn("Hello")\n      answer <- ConsoleEffect[F].readYesNo("Would you like to proceed?")\n      result = answer match {\n            case YesNo.Yes =>\n              "Done"\n            case YesNo.No =>\n              "Cancelled"\n          }\n      _ <- ConsoleEffect[F].putStrLn(result)\n    } yield ()\n  }\n}\n\nimport monix.eval._\nimport monix.execution.Scheduler.Implicits.global\n\nval foo = Something[Task].foo()\nfoo.runSyncUnsafe()\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Hello\nWould you like to proceed?\nn\nCancelled\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Hello\nWould you like to proceed?\ny\nDone\n")),(0,r.kt)("h2",{id:"consoleeffectful"},"ConsoleEffectful"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.syntax.all._\n\nimport effectie.monix.ConsoleEffectful._\nimport effectie.monix._\nimport effectie.YesNo\n\ntrait Something[F[_]] {\n  def foo[A](): F[Unit]\n}\n\nobject Something {\n\n  def apply[F[_]: Something]: Something[F] =\n    implicitly[Something[F]]\n\n  implicit def something[F[_]: ConsoleEffect: Monad]: Something[F] =\n    new SomethingF[F]\n\n  final class SomethingF[F[_]: ConsoleEffect: Monad]\n    extends Something[F] {\n\n    def foo[A](): F[Unit] = for {\n      _ <- putStrLn("Hello")\n      answer <- readYesNo("Would you like to proceed?")\n      result = answer match {\n            case YesNo.Yes =>\n              "Done"\n            case YesNo.No =>\n              "Cancelled"\n          }\n      _ <- putStrLn(result)\n    } yield ()\n  }\n}\n\nimport monix.eval._\nimport monix.execution.Scheduler.Implicits.global\n\nval foo = Something[Task].foo()\nfoo.runSyncUnsafe()\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Hello\nWould you like to proceed?\nn\nCancelled\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Hello\nWould you like to proceed?\ny\nDone\n")))}m.isMDXComponent=!0}}]);